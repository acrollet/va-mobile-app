#
# Checks if QA approvals are necessary, and if so runs the associated action when a new review is added
#

name: '[Utils] QA required approval'

on:
  pull_request_review:
    types: [submitted]
  # Only run if QA is actually required, ignore unit test only PRs
  pull_request:
    paths:
      - include:
        - 'VAMobile/src'
        - 'VAMobile/e2e'
        - 'VAMobile/package.json'
        - 'VAMobile/detoxrc.json'
        - '!VAMobile/src/*.test.tsx'

jobs:
  check_for_qa_approval:
    if: github.event.review.state == 'APPROVED'
    outputs:
      has_qa_approval: ${{ steps.check-qa-approval.outputs.has_qa_approval }}
    runs-on: ubuntu-latest
    steps:
      - name: Check for QA approvals
        id: check-qa-approval
        shell: bash
        run: |
          token=${{ secrets.GITHUB_TOKEN }}
          base64AuthInfo='$token | base64 -e'
          response=$(curl --request GET \
          --url https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews \
          --header 'Authorization: $base64AuthInfo' \
          --header 'Content-Type: application/json')

          approvals = $response | jq '.[] | select(.state=="APPROVED")'
          echo $approvals

          if $aprovals.length > 2
        # TODO: Figure out a way to target the team, but for now we only have access to the user object
            qa_approvals = $approvals | jq '.[] | select(.user.login | IN("rbontrager","DJUltraTom","TKDickson"))'
              if $qa_approvals.length > 0
                echo 'This PR has QA approval to merge'
                echo ::set-output name=has_qa_approval::'true'
              else 
                echo 'This PR requires QA approval to merge'
                echo ::set-output name=has_qa_approval::'false'
              fi
          else
            echo 'This PR requires 3 approvals, including one QA approval, before merging.'
            echo ::set-output name=has_qa_approval::'false'
          fi

  add_or_remove_qa_required_label:
    needs: check_for_qa_approval
    env:
      LABEL: qa-review-required
    steps:
      - name: 'Set up GH CLI secret'
        run: echo "${{ secrets.GITHUB_TOKEN }}" >> token.txt
      - name: 'Log into GH CLI'
        run: gh auth login --with-token < token.txt
      - name: 'Add or remove label'
        if: ${{ needs.check_for_qa_approval.outputs.has_qa_approval }} == 'true'
          run: |
            gh pr edit ${{ github.event.pull_request.number }} --remove-label "$LABEL"
        else:
          run: |
            gh pr edit ${{ github.event.pull_request.number }} --add-label "$LABEL"
            exit 1


