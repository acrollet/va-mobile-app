#
# Checks if QA approvals are necessary, and if so runs the associated action when a new review is added
#

name: '[Utils] QA required approval'

on:
  pull_request:
    types: [opened, edited, converted_to_draft, ready_for_review, reopened]
    paths:
      - 'VAMobile/src/**'
      - 'VAMobile/package.json'
      - '!VAMobile/src/**.test.*'

  pull_request_review:
    types: [submitted, dismissed]

  pull_request_target:
    branches:
      - 'develop'

jobs:
  check_for_qa_approval:
    name: Requires QA approval
    runs-on: ubuntu-latest
    steps:
      - name: Check QA approval
        shell: bash
        run: |
          approvals=$(curl --request GET \
          --url https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/reviews \
          --header 'Authorization: ${{ secrets.GITHUB_TOKEN }}' \
          --header 'Content-Type: application/json' |
          jq '[map(select(.state == "APPROVED")) | .[] .user.login]')

          branch_protections=$(curl -L \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/${{ github.repository }}/branches/develop/protection)

          echo "Approvers: $approvals"
          
          echo $branch_protections
          required_approval_count=$(jq -c '.required_pull_request_reviews.required_approving_review_count' <<< "$branch_protections")
          qa_team_url=$(jq -c '.required_pull_request_reviews.dismissal_restrictions.teams | .[] | select(.name == "flagship-mobile-qa") | .url + "/members"' <<< "$branch_protections")

          echo "required approval count: $required_approval_count"
          echo "team url: $qa_team_url"

          if [[ $(jq '. | length' <<< "$approvals") -gt $(jq -c '.required_pull_request_reviews.required_approving_review_count -1' <<< "$branch_protections") ]]
            then
              if [[ $(jq '[.[] | select(. | IN("rbontrager", "DJUltraTom", "TKDickson"))] | length' <<< "$approvals") -gt 0 ]]
                then
                echo 'This PR has QA approval to merge'
                exit 0
              else 
                echo 'This PR requires QA approval to merge'
                exit 1
              fi
          else
            echo 'This PR requires 3 approvals, including one QA approval, before merging.'
            exit 1
          fi
