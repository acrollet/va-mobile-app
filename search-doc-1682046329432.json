[{"title":"Inclusive Meeting Tips","type":0,"sectionRef":"#","url":"docs/About/inclusive-meetings","content":"","keywords":""},{"title":"Best practices:​","type":1,"pageTitle":"Inclusive Meeting Tips","url":"docs/About/inclusive-meetings#best-practices","content":"Try to share the meeting agenda and materials ahead of time. This allows folks to come to the meeting prepared with questions, review them async if that is more comfortable, or follow along if they can’t attend a meeting. Also it’s helpful to add timecodes when creating meeting invites.Turn on live captioning for every call. Live captioning services are a critical way for some individuals to understand and participate in meetings. Connect your speech and visuals. Try to connect the subject of your talk to the presentation or on-screen visuals. This helps folk understand who might not be able to see on-screen. If folks are using captions remember that during screen share it means they might immediately see or be reading the captions in real-time. Be mindful of the clock. If you are leading a meeting try to time box agenda items so that everyone gets what they need and expect out of the meeting. If you are participating in a meeting try to keep discussion focused to the agenda so the team can try to work through all the items.Use the raise hand feature in meetings. It helps give everyone a chance to take a turn, and helps facilitators moderate discussions. This also will help people using accessibility tools who may otherwise miss verbal or visual cues. Stay on mute until it is your turn to talk. Interruption and interjections can make live captioning difficult. For people using live captioning (or transcription) services, even innocuous interjections, affirmations, and “hmms” can make it difficult to follow the transcript. Unless called on directly, take turns making space to let other folks speak or answer a question. Helps everyone get a chance to speak in meetings and get experience presenting ideas.Cameras encouraged but optional. Zoom fatigue, anxiety, ADHD, chaotic children or pets, and other life things can make turning your camera on a negative experience. In large group meetings try to turn your camera on during the first 2-3 minutes to say hello. Or try turning it on for small group meetings and/or one-on-ones. It’s nice to see folks' faces, but we’ll leave the choice to be on camera up to you.Consider which chat method would work best for your meeting. For some folks, especially those who might be using assistive technology, discussions in the meeting chat software can be distracting or confusing to follow. Also the discussion often will be lost once the meeting ends which means folks not in attendance could miss out. One option is to capture those comments and conversations in Slack or in an asynchronous document used for the meeting. "},{"title":"Other caption specific pro-tips we’ve learned:​","type":1,"pageTitle":"Inclusive Meeting Tips","url":"docs/About/inclusive-meetings#other-caption-specific-pro-tips-weve-learned","content":"Turn on captions for yourself and follow them to make sure what you are saying is translating correctly. For example, some names don’t translate well so you may need to also say folk’s title (e.g. “Let’s check with the product manager on that feature”). Captioning software can struggle if folks talk too fast. It will attempt to autocorrect words as it goes, but keep in mind that you might have to talk a bit slower so it can translate correctly. Captions can be a second or more behind so folks may need time to catch up. Google Meet: You don’t need to do anything to enable captions on Google Meet.Zoom: If you are hosting Zoom meetings here is info on how to enable auto captioning. "},{"title":"Engineering","type":0,"sectionRef":"#","url":"docs/Engineering/","content":"Engineering The Engineering team for the VA mobile app includes Front End, Back End and QA.","keywords":""},{"title":"Team charter","type":0,"sectionRef":"#","url":"docs/About/team-charter","content":"","keywords":""},{"title":"Guideposts​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#guideposts","content":""},{"title":"Team Vision​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#team-vision","content":"Each Veteran is securely connected to the VA services that matter most to them regardless of device or VA org chart. "},{"title":"Team Mission Statement​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#team-mission-statement","content":"A native mobile app that is a trusted source for Veterans to quickly and easily check the status of their VA services and complete simple, transactional tasks across their health and benefits. "},{"title":"What we work on​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#what-we-work-on","content":""},{"title":"Product Suite​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#product-suite","content":"Health, benefits, payments, and profile products and services.Global systems like UI library, FE components, accessibility, devops, governance and documentation. "},{"title":"Product Portfolio​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#product-portfolio","content":"Health​ AppointmentsSecure MessagesPrescriptionsVaccines Benefits​ Claims &amp; appeals statusDisability ratingLetters Profile​ Personal &amp; military information Payments​ Compensation "},{"title":"Who we are​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#who-we-are","content":""},{"title":"Teams​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#teams","content":"Red Team​ Concentrating on health products in the app. Blue Team​ Concentrating on benefits products and global features in the app such as navigation, single sign on (SIS), and improvements and maintenance (aka TLC). "},{"title":"Team Members​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#team-members","content":"VA Product Owners​ Chris JohnstonRachel HanRyan ThurlwellMartha Wilkes (accessibility as needed) Program Management​ Seth Eheart - Program Manager Product​ Matt Hall - Product LeadershipAdam Bischoff - ProductStacy Blackwood - ProductMeko Hong - ProductKelly Lein - ProductGreta Opzt - Data UX​ Jen Ecker - UX LeadershipBrea Blackwelder - Accessibility DesignHolly Collier - DesignMelissa Lefevre - DesignMisty Milliron-Grant - Content StrategistLauren Russell - DesignLiz Straghalis - ResearchJessica Woodin - Design Engineering​ Tim Wright - Engineering LeadershipChika Adibemma - EngineeringChris Alexander - EngineeringTheo Bentum - EngineeringJon Bindbeutel - EngineeringJason Conigliari - EngineeringAndrew Herzberg - EngineeringDylan Nienberg - EngineeringJayson Perkins - EngineeringKris Pethtel - EngineeringNarin Ratana - EngineeringTim Roettger - EngineeringTom Gammons - Engineering, QATherese Dickson - Engineering, QARachael Bontrager - Engineering, QA "},{"title":"How we work​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#how-we-work","content":""},{"title":"Team Meetings Cadence​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#team-meetings-cadence","content":"Stand-up​ Check in on people and product progress. Raise blockers. Every Tuesday and Thursdays15-30 minutesRed team at 1:30pm ETBlue team at 2pm ET Sprint Planning​ Outline work to be done this sprint in order to accomplish the team's goals. Last Tuesday of every sprint1 hourRed team at 1pm ETBlue team at 2pm ET Demo​ Showcase of work done during the previous sprint. Thursday after the end of every sprint45 minutesEntire team (Red + Blue) at 2:35 ET Retro​ Open discussion on what has gone well, what has been challenging, and discussion of action items. Mid-Thursday of every sprint45 minutesEntire team (Red + Blue) at 2:30 ET Sprint 0​ Team and POs working ahead of the team to define future initiatives. Create draft product briefs that we can pull from in the future. Open to anyone on the team. 1 hourWeekly on Wednesdays at 1:05pm ET Scrum of Scrums (SoS)​ Product, leads, and PO get together to discuss: Highlight the quarterly plan and review progressReview changes in risks, dependencies, assumptions, or priority for the current sprintReview insights from ongoing discovery or delivery work in the current sprintDiscuss the plan for the upcoming sprintRebalance team staffing if necessaryTriage unplanned work Cadence: 1 hourWeekly on Tuesdays at 4:05pm ET Quarterly Planning​ Outline work to be done next quarter in order to accomplish the team's goals. Upcoming tentative dates Q2 2023 - 4/4/23Q3 2023 - 6/27/23Q4 2023 - 10/3/23Q1 2024 - 1/9/24 2 hoursEntire team (Red + Blue) "},{"title":"Issue Etiquette​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#issue-etiquette","content":"Anyone on the team can create a(n) issue/ticket/story.All teammates are responsible for keeping them up to date.Templates are available within the new issue/ticket/story during creation. Labels to use:​ Team assigned (mobile-blue-team, etc)Discipline(s) (ux, content, front-end, back-end, qa)Feature area(s) if applicable (direct-deposit, payments, etc.)For bugs, add the bug tag and applicable severity tag Epics should include:​ Clear acceptance criteriaDefinition of doneA user story that reflects the benefit to a Veteran, Caregiver, or other userBeen broken up into discrete tasks/Github tickets that are attached to the epicAll components/steps have been accounted for in the epicDocumented risks: Risks: Value Risk, Feasibility Risk, Business Viability Risk, Usability Risk Stories/Tickets should include:​ Title that explains the goal in plain languageLinked to another ticket or epicIncludes: Description (what happened &amp; why we need this ticket),General tasks to performAcceptance criteria (expected result) Estimation​ We use fibonacci numbers (1, 2, 3, 5, 8, 13) to account for the level of effort, complexity, and amount of unknowns in our work. Here is our guide: Points\tComplexity\tMeaning 1\txxsmall\tTrivial change - Up to 2 hours (time mostly in submitting the work) 2\txsmall\tSmall change - Up to 4 hours (More validation is required) 3\tsmall\tRoutine addon/none new - 1 to 2 days (small work/high domain knowledge/1 or no moving parts) 5\tmedium\tRoutine addon/none new - 2 to 3 days (medium work/1-2 moving parts) 8\tlarge\tNew work/High Complexity - 3 to 5 days (over 2 moving parts) 13\txlarge\tToo big/Risky, should be broken down - 1 to 2 weeks "},{"title":"Team Norms​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#team-norms","content":""},{"title":"Values​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#values","content":"We strive to create a product that is usable for all Veterans, no matter their abilities. We take a proactive, accessibility-first approach to everything we build. Accessibility is never an afterthought. It’s considered in every step of our process, from initial discovery to QA. We also believe in accessibility beyond compliance. We don’t just meet the bare minimum of accessibility. recommendations. We go above and beyond these recommendations to ensure we’re creating a product that is truly accessible to all of our users. We aim to start simple when building new features and take advantage of existing components.We want to act as a partner to VA rather than a vendor.We get input and feedback from all disciplines throughout feature implementation.We make a point to celebrate our accomplishments. "},{"title":"Communication​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#communication","content":"Meetings follow communication norms as outlined in inclusive meeting tips.We use Slack &quot;threads&quot; to contain conversations in a single place and aim to work in public channels. We don’t wait for meetings get question answered.We respect before/after hours time commitments and time zones. When we will be away we communicate availability in Slack, team calendars, and OOO docs.We work to balance having just enough meetings for folks to get work done while also feeling connected to teamNEW: Meetings have agenda, notes, description and desired outcome, send along read ahead.NEW: Cameras are encouraged but optional in meetings.NEW: We strive to keep Friday a non-meeting day.NEW: Be considerate of long Slack threads. Signals of a thread getting out of hand are if you have to @folks to get attention or there are multiple conversations going on. If you see that happening, consider changing the format to a meeting and link meeting notes in the Slack thread. "},{"title":"Slack DSVA “#va-mobile-app”:​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#slack-dsva-va-mobile-app","content":"This is our main means of communication with each other. Keep as much conversation in public channels as possible, to minimize duplicative and extraneous communication. "},{"title":"GitHub​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#github","content":"Product and research documentation are on VA.gov repository.Codebase and issues are on separate VA mobile repository.Update tickets regularly. If conversations happen in Slack that are pertinent to a product or initiative, copy the useful info into GitHub/ZenHub. "},{"title":"PTO​","type":1,"pageTitle":"Team charter","url":"docs/About/team-charter#pto","content":"We will respect time off and understand that mental, physical, and personal health is the top priority for team members. "},{"title":"OpenAPI Docs","type":0,"sectionRef":"#","url":"docs/Engineering/API/OpenAPI Docs","content":"OpenAPI Docs OpenAPI Docs","keywords":""},{"title":"Auth Diagrams","type":0,"sectionRef":"#","url":"docs/Engineering/Architecture/Auth Diagrams","content":"Auth Diagrams","keywords":""},{"title":"Intro","type":0,"sectionRef":"#","url":"docs/Engineering/Architecture/Intro","content":"Intro","keywords":""},{"title":"Background Workers","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/BackgroundWorkers","content":"Background Workers TODO Sidekiq jobs, pre-caching...","keywords":""},{"title":"Back End","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/","content":"Back End BackEnd Engineering resources for the VA Mobile app.","keywords":""},{"title":"Continuous Integration and Deployment","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/ContinuousIntegrationAndDeployment","content":"Continuous Integration and Deployment RspecRubocopSimpleCov","keywords":""},{"title":"Data Flow","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/DataFlow","content":"Data Flow TODO Endpoint data flow: controller (request) -&gt; param contract -&gt; proxy/service -&gt; middleware -&gt; adapter -&gt; model -&gt; serializer -&gt; controller (response)...","keywords":""},{"title":"Directory Layout","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/DirectoryLayout","content":"Directory Layout TODO vets-api app vs lib vs mobile module...","keywords":""},{"title":"Documentation","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/Documentation","content":"Documentation Automatically published via a github action anytime the YAML file changes in vets-api.","keywords":""},{"title":"Endpoint Creation Checklist","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/Endpoint Creation Checklist","content":"","keywords":""},{"title":"Checklist for creating new endpoints:​","type":1,"pageTitle":"Endpoint Creation Checklist","url":"docs/Engineering/BackEnd/Architecture/Endpoint Creation Checklist#checklist-for-creating-new-endpoints","content":""},{"title":"App Functionality​","type":1,"pageTitle":"Endpoint Creation Checklist","url":"docs/Engineering/BackEnd/Architecture/Endpoint Creation Checklist#app-functionality","content":"Added endpoint to routes.rb (modules/mobile/config/routes.rb)Created new controller method for endpoint (modules/mobile/app/controllers)Created new serializer (modules/mobile/app/serializers/mobile) (if applicable)Created new model (modules/mobile/app/models) (if applicable)Created new pagination contract (modules/mobile/app/models/mobile/v0/contracts) (if applicable) "},{"title":"Specs​","type":1,"pageTitle":"Endpoint Creation Checklist","url":"docs/Engineering/BackEnd/Architecture/Endpoint Creation Checklist#specs","content":"Wrote request specs for new endpoint in rspec (modules/mobile/spec/request)Created JSON schema for endpoint (modules/mobile/spec/support/schemas) (if applicable) "},{"title":"Documentation​","type":1,"pageTitle":"Endpoint Creation Checklist","url":"docs/Engineering/BackEnd/Architecture/Endpoint Creation Checklist#documentation","content":"Created $ref schema for new endpoint (modules/mobile/docs/schemas)Updated openapi.yaml for new endpoint (modules/mobile/docs/openapi.yaml)Regenerated HTML file by running generate_static_docs.sh command (modules/mobile/docs/generate_static_docs.sh) "},{"title":"Monitoring​","type":1,"pageTitle":"Endpoint Creation Checklist","url":"docs/Engineering/BackEnd/Architecture/Endpoint Creation Checklist#monitoring","content":"Added new endpoint to SERVICE_GRAPH (modules/mobile/app/controllers/mobile/v0/maintenance_windows_controller.rb) (only applicable for new upstream services used) Updated request specs (modules/mobile/spec/models/service_graph_spec.rb) Added new endpoint component to api_mobile_components in devops repo (ansible/deployment/config/revproxy-vagov/vars/nginx_components.yml) (only applicable if new endpoint not already covered by any existing components) Ordered the components accordingly to avoid incorrect matches (Components are used to match the routes of incoming requests. When a new request is received by the vets-api, datadog will attempt to associate it with the first component in the list that matches- e.g. if a new request comes in for /mobile/v0/appointments and appointment is listed above appointments in the components list, it will associate the request with the appointment component.)Added mapping of component section to nginx_api_server.conf.j2 (ansible/deployment/config/revproxy-vagov/templates/nginx_api_server.conf.j2) (if new component section added in nginx_components.yml)Added mapping of component section to nginx_new_api_server.conf.j2 (ansible/deployment/config/revproxy-vagov/templates/nginx_new_api_server.conf.j2) (if new component section added in nginx_components.yml) "},{"title":"Feature Flagging","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/FeatureFlagging","content":"","keywords":""},{"title":"Flipper​","type":1,"pageTitle":"Feature Flagging","url":"docs/Engineering/BackEnd/Architecture/FeatureFlagging#flipper","content":"We use Flipper to manage feature flags. Instructions for use and best practices can be found here "},{"title":"Access​","type":1,"pageTitle":"Feature Flagging","url":"docs/Engineering/BackEnd/Architecture/FeatureFlagging#access","content":""},{"title":"Staging​","type":1,"pageTitle":"Feature Flagging","url":"docs/Engineering/BackEnd/Architecture/FeatureFlagging#staging","content":"In order to turn features on and off in staging and in review instances, you will first need to create an id.me account. You can do this by going to staging, clicking &quot;sign in&quot;, choosing to sign in with id.me, then choosing to sign in using the google integration. Enter your Ad Hoc email address. It will then take you through an identity verification process. This is done on the id.me sandbox environment. DO NOT PROVIDE YOUR REAL SSN OR OTHER SENSITIVE DATA. IT WILL ACCEPT ANY PERSONAL IDENTIFYING INFORMATION. Once this is done, you will need to add your Ad Hoc email to the flipper section in config/settings.yml. You will have flipper access once this file has been deployed to staging. "},{"title":"Production​","type":1,"pageTitle":"Feature Flagging","url":"docs/Engineering/BackEnd/Architecture/FeatureFlagging#production","content":"In order to change feature flags in production, you will need a real id.me account. Because you're only allowed to have one id.me account, it is strongly recommended that you sign up using your personal email address. You can create an account at id.me. You can then add other email addresses to your id.me profile. If you've already created a sandbox id.me account with your AdHoc email address, you may experience difficulty linking your AdHoc address to your production account. You will then need to add your production id.me email address to config/settings.yml. You will have flipper access once this file has been deployed to production. "},{"title":"Toggling Feature Flags​","type":1,"pageTitle":"Feature Flagging","url":"docs/Engineering/BackEnd/Architecture/FeatureFlagging#toggling-feature-flags","content":"Flipper URLS (note the 'api' in the url) staging: https://staging-api.va.gov/flipper/featuresproduction: https://api.va.gov/flipper/features From there, you can select individual features and turn them on and off for all users, individual users, or even a percentage of random users. "},{"title":"JSON-API","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/JsonApi","content":"JSON-API TODO link to docs, Fastserializers...","keywords":""},{"title":"IAM","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/Iam","content":"","keywords":""},{"title":"Authentication Sequence Diagram​","type":1,"pageTitle":"IAM","url":"docs/Engineering/BackEnd/Architecture/Iam#authentication-sequence-diagram","content":" "},{"title":"Vets-API Authentication Activity Diagram​","type":1,"pageTitle":"IAM","url":"docs/Engineering/BackEnd/Architecture/Iam#vets-api-authentication-activity-diagram","content":" "},{"title":"Provider Details​","type":1,"pageTitle":"IAM","url":"docs/Engineering/BackEnd/Architecture/Iam#provider-details","content":"DSLogon - Oldest authentication method. Connected to DoD. Vets who already have this login info can use it to access services on VA.gov and Mobile that don't require MFA. MHV - Allows users to use their My HealtheVet credentials to utilize other services such as va.gov and our mobile app. Similar to DSLogon users, authenticating this way can't access services that require users to have MFA. Id.me - Owned by a 3rd party company, paid for by the VA. Requires identity verification and MFA (via OTPs). Login.gov - Newest authentication method. Recently built and owned by the VA. Requires identity verification and MFA (via many different options). Long term goal is to move everyone to login.gov so all users will be verified and the VA can stop paying for id.me "},{"title":"Test Users​","type":1,"pageTitle":"IAM","url":"docs/Engineering/BackEnd/Architecture/Iam#test-users","content":"DSLogon - Currently we only have one DSL test user, Arfan Russel. The login password in for can be found in the VA Mobile 1Password under &quot;DSlogon staging (claims)&quot; MHV - Users can be found here: MHV test users. Premium users are the only ones who work with the mobile app. Id.me - Can be found here: MVI staging test users or can be found in the VA.gov 1Password vault under vets.gov.user+NNN@gmail.com where NNN is a number 1 to 3 digits long. Login.gov - Located in the VA.gov 1Password vault. Can be found by searching &quot;login.gov&quot;. "},{"title":"Parallel Calls","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/ParallelCalls","content":"Parallel Calls The mobile API often needs to make requests to external services to fetch data to return to the client. In some cases, a single request from the client can require data from multiple external services. This can cause those requests to be slow and creates a bad user experience. To mitigate the issue, we use the Parallel Gem, which provides a simple interface for executing functions in parallel using threads. A simple use pattern is: Find the common location where code branches off into the multiple network calls.Wrap the methods that initiate those branches in lambdas.Pass an array of those lambdas to the gem, telling it how many threads to use and specifying that it should execute the call method on each lambda to execute it.Capture return values if needed.It is possible to rescue errors either within lambdas or around the entire parallelization code block. This allows us the ability to capture errors and either log them or provide helpful information back to the client. If we do not rescue, errors will stop execution and be handled as they normally would.","keywords":""},{"title":"Services","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/Services","content":"","keywords":""},{"title":"Upstream Service Map​","type":1,"pageTitle":"Services","url":"docs/Engineering/BackEnd/Architecture/Services#upstream-service-map","content":" "},{"title":"Service Contacts​","type":1,"pageTitle":"Services","url":"docs/Engineering/BackEnd/Architecture/Services#service-contacts","content":"Service\tSlack Channel\tContactsCaseflow\t#caseflow-support-team CDC\tN/A\tiisinfo@cdc.gov DSLogon\t#vsa-authd-exp EMIS\t#vsa-authd-exp EVSS\t#evss-prod ID.ME\t#idme-va-gov Lighthouse\t#lighthouse-infrastructure MHV\t#mhv-vetsgov, #vsa-authd-exp VAOS\t#vaos-team VEText\t#va-mobile-app-push-notifications Vet360\t#vsa-authd-exp\t "},{"title":"Record Filtering","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/RecordFiltering","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Record Filtering","url":"docs/Engineering/BackEnd/Architecture/RecordFiltering#overview","content":"The vets-api has a mechanism built into the Common::Collection class that's intended to be used to filter lists of records. However, there are a number of problems with this, including the fact that many of the services we use to fetch indexes do not return data in collections and instead just use arrays. Additionally, the filtering mechanism requires changes to the filtered model to enable filtering and to define the type of filtering allowed. There are also some limits to the collection's filtering logic that have prevented this library from meeting our requirements. And since both Common::Collection and many of the models we use exist outside of the mobile module, they're not easy for us to change. To address these limitations, we've created our own filtering library that borrows the same param syntax from Common::Collection but removes the requirement to make changes to the model. This will allow us to easily apply filters to all of our indexes and make changes to the filtering logic as needed without the risk of impacting other teams. "},{"title":"Usage​","type":1,"pageTitle":"Record Filtering","url":"docs/Engineering/BackEnd/Architecture/RecordFiltering#usage","content":""},{"title":"Backend​","type":1,"pageTitle":"Record Filtering","url":"docs/Engineering/BackEnd/Architecture/RecordFiltering#backend","content":"Adding filtering is a per-endpoint action. After fetching the records, call:records, errors = ListFilter.matches(records, params[:filter]) The records object passed to ListFilter must be an array of either Common::Resource or Common::Base objects. The filter argument must be a controller params object. ListFilter will always return two objects: the matching records and any errors encountered. See error handling for details. Any caching should be done on the unfiltered records, not on the results of the filtering. Any pagination should be done on the results of the filtering. "},{"title":"Frontend​","type":1,"pageTitle":"Record Filtering","url":"docs/Engineering/BackEnd/Architecture/RecordFiltering#frontend","content":"The front end must provide filters as query params in the format filter[model_attribute][operation]=value. For example, if your model implements an attribute called &quot;status&quot; and you want to receive only records where the status equals &quot;complete&quot;, you would add the param filter[status][eq]=complete. At this time, our filtering system only supports two operations: eq and not_eq. Attribute/operation pairs can only be used once. In other words, you can't request filter[status][eq]=complete and filter[status][eq]=pending. This is a limitation in how params are processed by the rails app. We intend to add &quot;one of these values&quot; functionality as well as other operations later. Filters are additive. In other words, if the request contains filter[status][eq]=complete and filter[telehealth][not_eq]=true, you will receive only records where the status is complete and telehealth is not true. As discussed below, error behavior can be defined on a per-endpoint or even per-error-case basis. "},{"title":"Error Handling​","type":1,"pageTitle":"Record Filtering","url":"docs/Engineering/BackEnd/Architecture/RecordFiltering#error-handling","content":"Any errors encountered during the filter process, either due to invalid filters or other causes, will cancel the filtering process. The filter library will return all records as well as the error encountered. What we do with that information can be determined on a per-endpoint basis. It is up to the controller to determine whether to re-raise the error or pass it back to the client in the metadata. This approach was chosen in order to keep our endpoints as stable as possible until we determine that filtering is reliable and error-free. As we develop greater confidence in the filtering and our requirements become clearer, we may later decide to always allow the error to be raised. "},{"title":"Logs","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Monitoring/Logs","content":"","keywords":""},{"title":"How to Access and Search Logs​","type":1,"pageTitle":"Logs","url":"docs/Engineering/BackEnd/Monitoring/Logs#how-to-access-and-search-logs","content":"The Grafana UI is used as the visualization interface for logs aggregated by Loki. To view logs, Log in to the VFS Grafana instance 🧦 (Socksneeded; use GitHub account for auth; see image below)  Go to Explore (the little compass icon on the left-hand navigation; see image below)  Select the Loki environment that you're interested in (from the drop-down near the top-left of the page; see image below)  You'll now see a query interface for searching and analyzing log files:  In the Log browser, enter a query starting with an app label to view all logs for a given app. Many developers will be interested in vets-api logs: To use this use case as an example, click &quot;Log browser&quot;Make sure &quot;app&quot; is highlightedScroll down and highlight &quot;vets-api-server&quot; or &quot;vets-api-worker&quot; depending on your needClick &quot;Show logs&quot;  Note: The query can be updated to include two labels such as the app and specific log file. {app=&quot;vets-api-server&quot;, filename=~&quot;.+json.log&quot;} Copy After selecting the labels for the data you are looking for, modify the query in the browser to include the text or the regex of the data you are looking for and then run the query. A basic query example that searches for errors within the logs: { app=~&quot;vets-api-server&quot;, filename=~&quot;.+json.log&quot; } |~ &quot;error&quot;` Copy  If searching for data that has a specific key and value, the data can be searched using regex. In the example below, The query is looking for log lines that contain a key of &quot;message&quot; with a value of &quot;Mobile Request&quot;.  "},{"title":"How to Parse Logs​","type":1,"pageTitle":"Logs","url":"docs/Engineering/BackEnd/Monitoring/Logs#how-to-parse-logs","content":"LogQL can be used to parse data out of certain log formats such as JSON or traditional Apache log formats. To parse logs, you need to enter a query of the data that you are looking for, then include the regex expression to remove the prefixed timestamp, container name, and pipe symbol. Once you use regex to extract the JSON blob to an object, you can then parse it with the built-in JSON parser. The regex expression that needs to be included in the to extract JSON to an object is: | regexp &quot;(?P&lt;time&gt;\\\\d\\\\d:\\\\d\\\\d:\\\\d\\\\d) (?P&lt;process_name&gt;\\\\w+.\\\\d) \\\\s+ (\\\\|) (?P&lt;json&gt;.+)&quot; Copy To parse JSON blob, also include in the query: | line_format &quot;{{.json}}&quot; | json Copy The query end-result will look like: {app=&quot;vets-api-server&quot;, filename=~&quot;.+json.log&quot;} |~ &quot;error&quot; | regexp &quot;(?P&lt;time&gt;\\\\d\\\\d:\\\\d\\\\d:\\\\d\\\\d) (?P&lt;process_name&gt;\\\\w+.\\\\d) \\\\s+ (\\\\|) (?P&lt;json&gt;.+)&quot; | line_format &quot;{{.json}}&quot; | json Copy Where &quot;error&quot; can be replaced with any data that you are searching for within the logs.  In the resulting logs, click on one of the logs to see additional details, including extracted fields and other labels that are tagged onto that specific message. Within the list of labels will be the json label that contains the json blob. The contents of the json are then listed under &quot;detected fields&quot;.  "},{"title":"Datadog","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Monitoring/DataDog","content":"","keywords":""},{"title":"Integrations​","type":1,"pageTitle":"Datadog","url":"docs/Engineering/BackEnd/Monitoring/DataDog#integrations","content":"One of the major Pros of Datadog is a plethora of already created integration steps. Datadog integration documentation  "},{"title":"Exploring Metrics​","type":1,"pageTitle":"Datadog","url":"docs/Engineering/BackEnd/Monitoring/DataDog#exploring-metrics","content":"You can search for existing metrics using Datadog's explore page. Within Datadog navigate to Metrics -&gt; Explore from the sidebar. Selecting a metric from here will automatically create a graph that can be modified and exported to new or existing dashboards. Explore documentation  "},{"title":"Creating Graphs​","type":1,"pageTitle":"Datadog","url":"docs/Engineering/BackEnd/Monitoring/DataDog#creating-graphs","content":"Navigate to Dashboards -&gt; Quick Graphs or edit a graph from an existing dashboardChoose the metric to graph by searching or selecting it from the dropdown next to 'Metric'  Select filters for the metric  Decide how to aggregate the metric (Max, Min, Avg, Sum)  Apply functions to the metric. Functions documentation  Example: Total requests per second to any mobile endpoint averaged over 5 minutes  "},{"title":"Formulas​","type":1,"pageTitle":"Datadog","url":"docs/Engineering/BackEnd/Monitoring/DataDog#formulas","content":"You can compare multiple metrics by using formulas. Example: Request error rate averaged over 5 minutes  "},{"title":"Dashboards​","type":1,"pageTitle":"Datadog","url":"docs/Engineering/BackEnd/Monitoring/DataDog#dashboards","content":"Dashboards allow you to display many different widgets. Select the 'Add widgets' button then select the desired widget. Widgets documentation  Additionally you can add variables for use across all widgets within a single dashboard. At the top of a dashboard select the pencil icon then fill in the details of your variable. These variables can be accessed from within a widget using $[variable name]. Template variables documentation  "},{"title":"Creating Alerts​","type":1,"pageTitle":"Datadog","url":"docs/Engineering/BackEnd/Monitoring/DataDog#creating-alerts","content":"Define a metric to alert on. This works the same as discussed in the graphs section above  Define alert thresholds. These will dictate when the alert triggers  Decide how you would like to be notified when the alert triggers  Define message you want to appear when alert triggers  To receive alert messages in slack the Datadog slack tool will need to be added to the channel where you want notifications then the channel also needs to be added via the slack integration within Datadog. Once this is complete the channel will be in a dropdown in the 'Notify your team' section shown above. Slack integration docs  "},{"title":"Good Places to Get Started​","type":1,"pageTitle":"Datadog","url":"docs/Engineering/BackEnd/Monitoring/DataDog#good-places-to-get-started","content":"Datadog 101 videos and Datadog documentation home page "},{"title":"Existing Mobile Dashboards​","type":1,"pageTitle":"Datadog","url":"docs/Engineering/BackEnd/Monitoring/DataDog#existing-mobile-dashboards","content":"Dashboard and Alerts. If you have issues accessing the dashboard or the VA Datadog site reach out in the shared mobile slack channel "},{"title":"Sentry","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Monitoring/Sentry","content":"Sentry Sentry is our automated error tracking tool. New exceptions in the API will cause Sentry to send us an email alert. We also audit the existing errors when fixing tech debt or silencing errors that are expected, i.e. unexceptional, such as when sub-systems return validation or not-found errors as 500s rather than 422s or 404s. All our classes are namespaced with a 'Mobile' Ruby module. When auditing errors a custom search of 'Mobile' filters out other vets-api errors. To further refine the search to only 'error', rather than 'warn' or 'info' level errors you can toggle open the search builder bar. And then select 'error' from the list. Once you've found an error, or have been linked to one directly from an alert email, you'll be taken to the error details page. The majority of our errors occur during HTTP responses. Often the errors first present themselves deep within the API framework's base classes. Selecting the 'Full' tab reveals the full call stack and as seen below the true source of the error. Once the location of the error has been determined the next step is determining the cause. Errors from bugs we have introduced (500s in our API responses) will have clear Ruby errors such as 'NoMethodError'. For errors from sub-systems you'll need to check the 'ADDITIONAL DATA' section of the error details page. As seen below this section includes the errors from the upstream service as well as any custom tags added for that specific service. In this case 'ICN' and 'MHV Correlation ID' can be used to cross-reference Loki based logs to get an idea of the full request flow and any user actions that lead up to the error.","keywords":""},{"title":"Statsd Metrics","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Monitoring/Statsd","content":"Statsd Metrics You can create custom Mobile metrics within Vets API by adding new statsd entries to modules/mobile/config/initializers/statsd.rb. More information about Statsd can be found at: https://github.com/Shopify/statsd-instrument . In order for metics to be picked up an entry for the associated endpoint must also be in ansible/deployment/config/revproxy-vagov/vars/nginx_components.yml in the DevOps repo","keywords":""},{"title":"On-Call Procedure","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Monitoring/OnCallProcedure","content":"","keywords":""},{"title":"Handling Backend Alerts​","type":1,"pageTitle":"On-Call Procedure","url":"docs/Engineering/BackEnd/Monitoring/OnCallProcedure#handling-backend-alerts","content":"First use tools described above to track down the source of an issue. Look up the error in Sentry. You can find expanded error details, stack traces, and parameters in Sentry. A good query to start with is searching for the 'Mobile' namespace sorted by 'Last Seen'. Add more filters by toggling open the search builder sidebar on the right of the search field.Loki logs via Grafana can help you find more data or trace the requests before the error occurred.Our Datadog dashboard offers a wider metric based view of how often the issue has been occurring. It's also the first place to look for latency issues and to check if an upstream service is down.Datadog's Application Performance Management tool is also configured for vets-api. It breaks down the ruby, database, and upstream calls down so you can determine the source latency. The APM also provides p50 and p99 latency data to let us know how slow the worst 50% and 1% of calls are doing. If you've determined that the source of the issue is an upstream service contact the relevant party.If you believe a forward proxy is down or having trouble connecting to the service. Then contact the Operations team via DSVA Slack's #vfs-platform-support channel. To open a support ticket type /support. This will open a modal window with a form rather than posting a Slack message. For the 'I need help from' field select 'Operations Team'. Then add the details in the 'Summary of request' field.Finally if the error is not from the API, a forward proxy connection to an upstream service, or an upstream service itself but rather an issue with infrastructure that we (and VSP/VFS) control then a SNOW ticket should be opened. Only a DSVA team member can do this. Reach out to a stakeholder and have them open a SNOW ticket for you (currently Travis Newby or Leanna Miller). "},{"title":"Prerequisites","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Testing/Prerequisites","content":"Prerequisites This guide assumes that you have locally: Configured and turned on the SOCKS proxyChecked out the DevOps repoConfigured your AWS credentials and MFA","keywords":""},{"title":"API Tokens","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Testing/ApiTokens","content":"","keywords":""},{"title":"Authorization and token types​","type":1,"pageTitle":"API Tokens","url":"docs/Engineering/BackEnd/Testing/ApiTokens#authorization-and-token-types","content":"The mobile app currently uses two authorization services: IAM and SIS (short for Sign-In Service). IAM is a third party service and SIS is an in-house VA auth service. We expect to eventually sunset IAM in favor of SIS. The tokens are visually distinct: IAM tokens are 20 characters long, while SIS tokens are over a thousand characters long. The one important functional difference is that you have to include an additional header when using SIS tokens: Authentication-Method: SIS "},{"title":"Fetching API tokens​","type":1,"pageTitle":"API Tokens","url":"docs/Engineering/BackEnd/Testing/ApiTokens#fetching-api-tokens","content":"We host a web app on heroku for fetching api tokens. You can fetch tokens in two ways: Manual: Go to the token generator web app and log in with a test user. User credentials are in 1Password. Automated: These requests use basic auth (ask teammates for username and password) and will only work if the test user has previously been logged in via the manual approach and the user's refresh token is still valid. There are routes for fetching IAM tokens: GET https://va-mobile-cutter.herokuapp.com/auth/iam/token/judy.morrison@id.me And SIS tokens: GET https://va-mobile-cutter.herokuapp.com/auth/sis/token/judy.morrison@id.me "},{"title":"Working on the token app​","type":1,"pageTitle":"API Tokens","url":"docs/Engineering/BackEnd/Testing/ApiTokens#working-on-the-token-app","content":"The code for the token fetcher app can be found here and instructions for development can be found in the README. To work on the app, you will need write access to the repo and admin access to the heroku instance. "},{"title":"Testing the Mobile App on Staging","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Testing/StagingApps","content":"Testing the Mobile App on Staging You can test the application on your mobile devices. For more information, visit the TestFlight &amp; AppTester section under QA Resources to get set up.","keywords":""},{"title":"Review Instances","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Testing/ReviewInstances","content":"","keywords":""},{"title":"API Calls​","type":1,"pageTitle":"Review Instances","url":"docs/Engineering/BackEnd/Testing/ReviewInstances#api-calls","content":""},{"title":"Making Requests​","type":1,"pageTitle":"Review Instances","url":"docs/Engineering/BackEnd/Testing/ReviewInstances#making-requests","content":"As with the URLs you've been accessing so far, all API requests must go through the SOCKS proxy. You can configure this in your API client (Postman, Insomnia, Paw, etc). The proxy URL is socks5h://127.0.0.1:2001. Requests, as in staging and production, require that you include an 'Authorization' header with a bearer token. An example request using the SOCKS proxy to the user endpoint would look like below. curl --proxy socks5h://127.0.0.1:2001 --request GET \\ --url http://a8710e1eb08cd469aa43874b25f86278-api.review.vetsgov-internal/mobile/v1/user \\ --header 'Authorization: Bearer EESBp0xiLD6p1g86q4g1' --header 'X-Key-Inflection: camel' Copy "},{"title":"Console Access​","type":1,"pageTitle":"Review Instances","url":"docs/Engineering/BackEnd/Testing/ReviewInstances#console-access","content":"You can SSH into the review instance and test code directly in a review instance Rails console. You retrieve the instance name via the Jenkins console output. To get to Jenkins, return to the PR on Github and click 'Show environments' within the 'This branch was successfully deployed' section. Click the 'Deployed' link to the left of the 'View deployment' button. This will open Jenkins. Next, select 'Console Output' from the menu on the left.  Then search for &quot;SSH at&quot;. 07:15:00 [0;32m msg: Review instance available at http://9bbbb1184faf0a6cb1c551390c073923.review.vetsgov-internal/, or via SSH at ip-172-30-18-119.us-gov-west-1.compute.internal[0m Copy In the example above 'ip-172-30-18-119.us-gov-west-1.compute.internal' is the address for the instance. To open a Rails console SSH in and then run the console Docker command as below. ssh ip-172-30-18-119.us-gov-west-1.compute.internal cd ~/vets-api; docker-compose -f docker-compose.review.yml exec vets-api bundle exec rails c {&quot;host&quot;:&quot;0fca69c2c0fa&quot;,&quot;application&quot;:&quot;vets-api-server&quot;,&quot;environment&quot;:&quot;production&quot;,&quot;timestamp&quot;:&quot;2021-12-02T16:32:05.979827Z&quot;,&quot;level&quot;:&quot;info&quot;,&quot;level_index&quot;:2,&quot;pid&quot;:632,&quot;thread&quot;:&quot;65000&quot;,&quot;name&quot;:&quot;Rails&quot;,&quot;message&quot;:&quot;Raven 2.13.0 ready to catch errors&quot;} 2021-12-02 16:32:08.420676 W [632:65000] SemanticLogger::Appenders -- Ignoring attempt to add a second console appender: SemanticLogger::Appender::File since it would result in duplicate console output. Loading production environment (Rails 6.1.4.1) irb(main):001:0&gt; Copy To generate a user session, see section User Token below then follow User Sign-in instructions. "},{"title":"User Token​","type":1,"pageTitle":"Review Instances","url":"docs/Engineering/BackEnd/Testing/ReviewInstances#user-token","content":"Currently, there are two authentication options, IAM and SIS. IAM authentication isn't working for RIs or staging right now for unknown reasons that may not be fixed because IAM is being deprecated for SIS, which is why the instructions in the next section (User Sessions) don't work right now on RIs. We lack the ability to log in via SIS on RIs due to limitations the SIS team is working on. We expect this to be fixed at some point, but in the meantime it means we have to use staging to help us spoof the sign-in process with the instructions below: Open a browser and start the authorization process for your review instance (remember your -api) http://dc02d94d6648a008950cc9c84056a860-api.review.vetsgov-internal/v0/sign_in/authorize?type=idme&amp;code_challenge_method=S256&amp;acr=loa3&amp;client_id=mobile&amp;code_challenge=1BUpxy37SoIPmKw96wbd6MDcvayOYm3ptT-zbe6L_zM= Copy Open network tab on browser Inspector then complete sign in. After sign in, you will be redirected to staging and there will be a failed callback request in the Inspector network tab.With your network tab still open, replace https://staging-api.va.gov in your browswer url bar with your review instance (remember your -api) and go to that urlIn the network tab, you should see another request to /callback. In the request headers, there will be a location with a value starting with vamobile: that will contain a code that can be used to exchange tokens. The code should look something like 7ca6321-ca3e-4b51-8a4f-4b8ecf2f1597To get a token with that code, ensure that your socks proxy is running and send the following Curl using your review instance and code: curl --proxy socks5h://127.0.0.1:2001 -X POST http://dbded860eb589f4ccfef2b1470e8472d-api.review.vetsgov-internal/v0/sign_in/token -H 'Content-Type: application/json' -d '{&quot;grant_type&quot;: &quot;authorization_code&quot;, &quot;code_verifier&quot;: &quot;5787d673fb784c90f0e309883241803d&quot;, &quot;code&quot;: &quot;69a8cdea-6251-413f-8773-0ff7c5c82877&quot;}' Copy Open network tab on browser Inspector then complete sign inAfter sign in, you should notice a failed request that looks similar to: https://staging-api.va.gov/idHlwZSI6ImlkbWUiLCJjbGllbnRfaWQiOiJ3ZWIiLCJjb2RlX2NoYWxsZW5nZSI6IjFCVXB4eTM3U29JUG1Ldzk2d2JkNk1EY3ZheU9ZbTNwdFQtemJlNkxfek0iLCJjbGllbnRfc3RhdGUiOm51bGwsImNvZGUiOiJmYjNmMTVjOWU0ZDcxNWNkNjEyNjBhMmM1NzYxNzY3YyJ9.EINudwac8qI5JCFPpsYsN7Q7AkyJaQb7jzO78ZJU_GWyPsy4VShRUuYRuxegeBClnjrqkXkfqE78vU5Jjp7aViWLDmDcs2WAJaMwsFRwNEwfQi0g-XUXxWqjVup_rWfDTYWMlxNCipj3xhLN2ACMkFjxoXXlWoob_didzURc1vBEuozkseAAcsA0UOPMexnIjAfFvk11dhR6bC5_Ql14aS22WTE7D-rrngtPCTo_J4Fe-vOgpn-PPV_t5AyiLhzpqDkRlaWTbihwJ_6JpZ8FctkT42Vz4zGk6XTS33BjGv8yJvJYwgEwC2FeVpg-Em49zfkc47Bgl7DEjlDNs624lQ&amp;code=8cb3d1e45111430eafd6e2f155f067e0 Copy Replace https://staging-api.va.gov with your review instance and go to that url in your browser (still having your network tab open)Find a response in the network tab that has redirect to the vamobile: with a code that can be used to exchange tokens. Code should look something like 7ca6321-ca3e-4b51-8a4f-4b8ecf2f1597To get a token with that code, send the following Curl but with your review instance and code: curl -X POST http://dbded860eb589f4ccfef2b1470e8472d-api.review.vetsgov-internal/v0/sign_in/token -H 'Content-Type: application/json' -d '{&quot;grant_type&quot;: &quot;authorization_code&quot;, &quot;code_verifier&quot;: &quot;5787d673fb784c90f0e309883241803d&quot;, &quot;code&quot;: &quot;69a8cdea-6251-413f-8773-0ff7c5c82877&quot;}' Copy "},{"title":"Staging Instances","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Testing/StagingInstances","content":"","keywords":""},{"title":"API Calls​","type":1,"pageTitle":"Staging Instances","url":"docs/Engineering/BackEnd/Testing/StagingInstances#api-calls","content":"API calls are made in a similar way to the review instances above. Note that your API client may not connect to staging if going through the SOCKS proxy. The API URL for staging is http://staging-api.va.gov/mobile. Staging uses the same API tokens as review instances. curl --request GET \\ --url https://staging-api.va.gov/mobile/v1/user \\ --header 'Authorization: Bearer 6qdITmRgDqEmsdGyzNj7' \\ --header 'X-Key-Inflection: camel' Copy "},{"title":"Console Access​","type":1,"pageTitle":"Staging Instances","url":"docs/Engineering/BackEnd/Testing/StagingInstances#console-access","content":"To connect to a staging instance, open a terminal locally and enter 'mfa' followed by a code from a 2FA tool such as Authy. Change into the devops repo dir, and run the SSM script with 'staging' as an argument. The script will return a numbered list of available instances. mfa {2fa code} AWS Session credentials saved. Will expire in 12 hours cd {path to devops checkout dir} sh utilities/ssm.sh vets-api-server staging Finding apps for vets-api-server staging -e Found the following instances: Instance ID Private Ip Name i-0cb43936846956681 10.247.34.198 dsva-vagov-staging-deployment-vagov-staging-vets-api-server-20211201-221337-asg i-002a2d845a9bbfb47 10.247.34.238 dsva-vagov-staging-deployment-vagov-staging-vets-api-server-20211201-221337-asg i-09bf54f2024d20400 10.247.34.61 dsva-vagov-staging-deployment-vagov-staging-vets-api-server-20211201-221337-asg i-0900c0675f349b4b5 10.247.34.15 dsva-vagov-staging-deployment-vagov-staging-vets-api-server-20211201-221337-asg i-0304e9c0fc5d4c4e3 10.247.35.117 dsva-vagov-staging-deployment-vagov-staging-vets-api-server-20211201-221337-asg i-0a9d52a236730155f 10.247.35.40 dsva-vagov-staging-deployment-vagov-staging-vets-api-server-20211201-221337-asg What instance do you want to connect to? (input only the number eg: 1, 2, 4) Type 'q' to exit 1) -n 5) -n 9) -n 2) i-0cb43936846956681 6) i-09bf54f2024d20400 10) i-0304e9c0fc5d4c4e3 3) -n 7) -n 11) -n 4) i-002a2d845a9bbfb47 8) i-0900c0675f349b4b5 12) i-0a9d52a236730155f #? Copy Select an instance by typing its number, e.g. 2. Then change to a super user and run the Docker command to launch the Rails console. #? 2 Starting session to: i-0cb43936846956681 Starting session with SessionId: First.Last-09fdb960f34e99c93 sh-4.2$ sudo su [root@ip-10-247-34-198 /]# docker exec -it vets-api bundle exec rails c {&quot;host&quot;:&quot;0fca69c2c0fa&quot;,&quot;application&quot;:&quot;vets-api-server&quot;,&quot;environment&quot;:&quot;production&quot;,&quot;timestamp&quot;:&quot;2021-12-02T16:32:05.979827Z&quot;,&quot;level&quot;:&quot;info&quot;,&quot;level_index&quot;:2,&quot;pid&quot;:632,&quot;thread&quot;:&quot;65000&quot;,&quot;name&quot;:&quot;Rails&quot;,&quot;message&quot;:&quot;Raven 2.13.0 ready to catch errors&quot;} 2021-12-02 16:32:08.420676 W [632:65000] SemanticLogger::Appenders -- Ignoring attempt to add a second console appender: SemanticLogger::Appender::File since it would result in duplicate console output. Loading production environment (Rails 6.1.4.1) irb(main):001:0&gt; Copy "},{"title":"User Sign In​","type":1,"pageTitle":"Staging Instances","url":"docs/Engineering/BackEnd/Testing/StagingInstances#user-sign-in","content":"You can then fetch an api token and use that token to create either an IAM user session (deprecated): irb(main):001:0&gt; user = IAMSSOeOAuth::SessionManager.new('EESBp0xiLD6p1g86q4g1').find_or_create_user Copy or an SIS user session: irb(main):001:0&gt; token = SignIn::AccessTokenJwtDecoder.new(access_token_jwt: 'crazylongsistoken').perform(with_validation: true) irb(main):001:0&gt; user = User.find(token.user_uuid) Copy "},{"title":"Jobs","type":0,"sectionRef":"#","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs","content":"","keywords":""},{"title":"lint​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#lint","content":""},{"title":"Description​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#description","content":"This reusable job spins up an instance, installs dependencies and runs the lint command to check for lint errors. Should be run before builds and merges. "},{"title":"Image (see Images)​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#image-see-images","content":"default "},{"title":"Steps​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#steps","content":"- checkout - install_deps - lint Copy  "},{"title":"test​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#test","content":""},{"title":"Description​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#description-1","content":"Reusable job that runs the Unit tests. This runs them with parallelism in order to complete them faster and runs on an x-large resource container. "},{"title":"Image (see Images)​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#image-see-images-1","content":"default "},{"title":"Steps​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#steps-1","content":"- checkout - install_deps - jest Copy  "},{"title":"start_slack_thread​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#start_slack_thread","content":""},{"title":"Description​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#description-2","content":"Reusable job that sends a message to the va-mobile-app channel in DSVA slack and starts a thread to keep from cluttering the Slack feed. "},{"title":"Image (see Images)​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#image-see-images-2","content":"default "},{"title":"Parameters​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#parameters","content":"Name\tDescription\ttype\tdefault?message\tString value of the message that will serve as the top of the thread in Slack channel\tstring\tnone "},{"title":"Steps​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#steps-2","content":"- get_slack_channel_id: channelName: 'va-mobile-app' - send_slack_message: message: &lt;&lt; parameters.message &gt;&gt; channelId: ${SLACK_CHANNEL_ID} - save_slack_thread Copy  "},{"title":"build_ios_qa​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#build_ios_qa","content":""},{"title":"Description​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#description-3","content":"Reusable job that runs the iOS build commands and is configured for daily QA builds. "},{"title":"Image (see Images)​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#image-see-images-3","content":"ios "},{"title":"Steps​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#steps-3","content":"- checkout - install_deps - decode_ios_keys - install_pods - bundle_app: os: 'ios' - queue_ios_jobs - ios_fastlane Copy  "},{"title":"build_android_qa​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#build_android_qa","content":""},{"title":"Description​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#description-4","content":"Reusable job that runs the Android build commands and is configured for daily QA builds. "},{"title":"Image (see Images)​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#image-see-images-4","content":"android "},{"title":"Steps​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#steps-4","content":"- checkout - install_deps - create_keys_directory - decode_android_keys - bundle_app: os: 'android' - queue_android_jobs - android_fastlane Copy  "},{"title":"build_ios_feature​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#build_ios_feature","content":""},{"title":"Description​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#description-5","content":"Reusable job that runs the iOS build commands and is configured to run off a tag. Release Notes will use the git tag to generate a readable string. Sends all builds to the Development Team in Test Flight "},{"title":"Image (see Images)​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#image-see-images-5","content":"ios "},{"title":"Steps​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#steps-5","content":"- checkout - install_deps - decode_ios_keys - install_pods - bundle_app: os: ios - queue_ios_jobs - ios_fastlane: lane: on_demand notes: ${CIRCLE_TAG} tf_group: Development Team Copy  "},{"title":"build_android_feature​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#build_android_feature","content":""},{"title":"Description​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#description-6","content":"Reusable job that runs the Android build commands and is configured to run off a tag. Release Notes will use the git tag to generate a readable string. Sends all builds to the Development Team track in the Play Store "},{"title":"Image (see Images)​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#image-see-images-6","content":"android "},{"title":"Steps​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#steps-6","content":"- checkout - install_deps - create_keys_directory - decode_android_keys - bundle_app: os: android - queue_android_jobs - android_fastlane: lane: on_demand notes: ${CIRCLE_TAG} ps_track: Development Team Copy  "},{"title":"cut_release_branch​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#cut_release_branch","content":""},{"title":"Description​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#description-7","content":"This reusable command calls the release_branch.sh script in order to create a new branch to freeze for release. "},{"title":"Image (see Images)​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#image-see-images-7","content":"default "},{"title":"Steps​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#steps-7","content":"- checkout - run_script: script_name: 'release_branch.sh' script_options: '' workingDir: '~/project/VAMobile' Copy  "},{"title":"build_ios_release​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#build_ios_release","content":""},{"title":"Description​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#description-8","content":"Reusable command that builds a production version of the app for review by the App Store. The CIRCLE_TAG will be the version number, i.e. 'v1.1.1' "},{"title":"Image (see Images)​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#image-see-images-8","content":"ios "},{"title":"Steps​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#steps-8","content":"- checkout - install_deps: environment: 'production' - decode_ios_keys - install_pods - bundle_app: os: 'ios' - queue_ios_jobs - ios_fastlane: version: ${CIRCLE_TAG} lane: 'review' Copy  "},{"title":"build_android_release​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#build_android_release","content":""},{"title":"Description​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#description-9","content":"Reusable command that builds a production version of the app for review by the Play Store. The CIRCLE_TAG will be the version number, i.e. 'v1.1.1' "},{"title":"Image (see Images)​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#image-see-images-9","content":"android "},{"title":"Steps​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#steps-9","content":"- checkout - install_deps: environment: 'production' - create_keys_directory - decode_android_keys - bundle_app: os: 'android' - queue_android_jobs - android_fastlane: version: ${CIRCLE_TAG} lane: 'review' Copy  "},{"title":"run_release_lanes​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#run_release_lanes","content":""},{"title":"Description​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#description-10","content":"This reusable command runs the release lanes in the fastfiles in order to release any pending versions that have been approved by the stores. "},{"title":"Image (see Images)​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#image-see-images-10","content":"default "},{"title":"Steps​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#steps-10","content":"- checkout - create_keys_directory - decode_ios_keys - decode_android_keys - android_fastlane: lane: 'release' use_slack_thread: false - ios_fastlane: lane: 'release' use_slack_thread: false Copy  "},{"title":"build_android_release_candidate​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#build_android_release_candidate","content":""},{"title":"Description​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#description-11","content":"Reusable job that runs the Android build commands and is configured to build with the special release candidate configurations for the QA team. Sends all builds to the Development Team track in the Play Store "},{"title":"Image (see Images)​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#image-see-images-11","content":"android "},{"title":"Steps​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#steps-11","content":"- checkout - install_deps - create_keys_directory - decode_android_keys - bundle_app: os: 'android' - queue_android_jobs - android_fastlane: lane: 'rc' Copy  "},{"title":"build_ios_release_candidate​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#build_ios_release_candidate","content":""},{"title":"Description​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#description-12","content":"Reusable job that runs the iOS build commands and is configured to build with the special release candidate configurations for the QA team. Sends all builds to the Development Team track in the Test Flight "},{"title":"Image (see Images)​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#image-see-images-12","content":"ios "},{"title":"Steps​","type":1,"pageTitle":"Jobs","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Jobs#steps-12","content":"- checkout - install_deps - decode_ios_keys - install_pods - bundle_app: os: 'ios' - queue_ios_jobs - ios_fastlane: lane: 'rc' Copy  "},{"title":"Circle CI","type":0,"sectionRef":"#","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Overview","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Circle CI","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Overview#overview","content":"All of our builds happen in CircleCI workers. At the time this is written, CircleCI has better ability to make and reuse pieces of the build process. The build system currently allows us to build in multiple ways and for multiple configurations. ✅ Staging API or Production API ✅ Special Release Candidate configuration ✅ Options to upload to a specific lane or Test Flight group ✅ Configurations to create one-off builds for feature branch testing prior to merging ✅ Queueing capabilities to avoid build collisions on build numbers ✅ Automated testing and linting ✅ Dependency installation and caching to speed up delivery ✅ Slack integration to send useful messages to our DSVA Slack channels to raise errors and to indicate success "},{"title":"Images​","type":1,"pageTitle":"Circle CI","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Overview#images","content":"Current list of runners that we have for each job  default: docker: - image: cimg/ruby:3.0.2-node android: docker: - image: cimg/android:2022.09.2-node resource_class: xlarge ios: macos: xcode: 13.4.1 Copy DefaultAndroidMac "},{"title":"Local Testing​","type":1,"pageTitle":"Circle CI","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Overview#local-testing","content":"You can run and check your .config file locally with the CircleCI CLI Tool "},{"title":"Commands","type":0,"sectionRef":"#","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands","content":"","keywords":""},{"title":"Workflows","type":0,"sectionRef":"#","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows","content":"","keywords":""},{"title":"pr​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#pr","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#description","content":"This Workflow is run on PRs. It runs the lint and test jobs in order to make sure no breaking changes are merged. Fails should block the PR merging in GitHub. "},{"title":"Triggers​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#triggers","content":"Currently runs on every commit. Can be reviewed to see if this can be moved to GH Actions, which has triggers for only PR updates and would run less. "},{"title":"Jobs​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#jobs","content":"- lint - test Copy  "},{"title":"qa_build​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#qa_build","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#description-1","content":"This workflow runs every night to create and upload the QA version of the app configured for the staging environment for both Android and iOS. Creates a Slack thread in the channel and updates the thread with the results of each build job. "},{"title":"Triggers​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#triggers-1","content":"cron: '0 5 * * 1,2,3,4,5' Copy Runs every Weekday at 0500 UTC on only the develop branch "},{"title":"Jobs​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#jobs-1","content":"- start_slack_thread: message: 'QA build process starting. Please see :thread: for results. This process may take a while.' - build_android_qa: requires: - start_slack_thread - build_ios_qa: requires: - start_slack_thread Copy  "},{"title":"release_build​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#release_build","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#description-2","content":"This workflow runs every time a tag with vint.int.int pattern is pushed to the origin. It builds production versions for both Android and iOS. Creates a Slack thread in the channel and updates the thread with the results of each build job. "},{"title":"Triggers​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#triggers-2","content":"tags matching the regular expression /^vd+.d+.d+/ "},{"title":"Jobs​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#jobs-2","content":"- start_slack_thread: message: 'Automation starting release build for the app. This build will be sent to the app stores for review upon completion. Please see :thread: for results. This process may take a while.' filters: tags: only: /^v\\d+\\.\\d+\\.\\d+/ branches: ignore: /.*/ - build_android_release: requires: - start_slack_thread filters: tags: only: /^v\\d+\\.\\d+\\.\\d+/ branches: ignore: /.*/ - build_ios_release: requires: - start_slack_thread filters: tags: only: /^v\\d+\\.\\d+\\.\\d+/ branches: ignore: /.*/ Copy  "},{"title":"feature_build​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#feature_build","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#description-3","content":"This workflow runs every time a tag with feature-build- pattern is pushed to the origin. It builds staging versions for both Android and iOS. Creates a Slack thread in the channel and updates the thread with the results of each build job. "},{"title":"Triggers​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#triggers-3","content":"tags matching the regular expression /^feature-build-+/ "},{"title":"Jobs​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#jobs-3","content":"- start_slack_thread: message: 'On-demand feature build process starting. Please see :thread: for results. This process may take a while.' filters: tags: only: /^feature-build-.+/ branches: ignore: /.*/ - build_android_feature: requires: - start_slack_thread filters: tags: only: /^feature-build-.+/ branches: ignore: /.*/ - build_ios_feature: requires: - start_slack_thread filters: tags: only: /^feature-build-.+/ branches: ignore: /.*/ Copy  "},{"title":"release_candidate_build​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#release_candidate_build","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#description-4","content":"This workflow runs every time a tag with RC-vint.int.int pattern is pushed to the origin. It builds staging versions for both Android and iOS. Creates a Slack thread in the channel and updates the thread with the results of each build job. "},{"title":"Triggers​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#triggers-4","content":"tags matching the regular expression /^RC-v.d+.d+.d+$/ "},{"title":"Jobs​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#jobs-4","content":"- start_slack_thread: message: 'Release Candidate build process starting. This build is a staging build for QA to validate and do regression testing on. Please see :thread: for results. This process may take a while.' filters: tags: only: /^RC-v\\d+\\.\\d+\\.\\d+-\\d+-\\d+$/ branches: ignore: /.*/ - build_android_release_candidate: requires: - start_slack_thread filters: tags: only: /^RC-v\\d+\\.\\d+\\.\\d+-\\d+-\\d+$/ branches: ignore: /.*/ - build_ios_release_candidate: requires: - start_slack_thread filters: tags: only: /^^RC-v\\d+\\.\\d+\\.\\d+-\\d+-\\d+$/ branches: ignore: /.*/ Copy  "},{"title":"new_release_branch​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#new_release_branch","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#description-5","content":"Workflow runs in order to create the release branch and kick off the release ticket process. "},{"title":"Triggers​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#triggers-5","content":" cron: '30 6 * * 3' Copy Runs every Wednesday at 0630 UTC on only the develop branch "},{"title":"Jobs​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#jobs-5","content":"- cut_release_branch Copy  "},{"title":"go_live​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#go_live","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#description-6","content":"Job runs on release day to send approved versions to the stores "},{"title":"Triggers​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#triggers-6","content":"cron: '0 14 * * 2' Copy Runs every Tuesday at 1400 UTC on only the main branch "},{"title":"Jobs​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Workflows#jobs-6","content":"- run_release_lanes Copy  "},{"title":"install_deps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#install_deps","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description","content":"This command runs the scripts that install base build dependencies and set up the ENV files for the configuration. The command checks the lock to see if it matches the cached dependencies. It then installs yarn with npm, runs a yarn install to catch any missed dependencies from the cache. Once complete, it then runs the yarn env: command for the specified environment It then saves the yarn cache, installs the bundler gem and then exits. This command should be used for any setup that is universal to all the builds. "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters","content":"Name\tDescription\ttype\tdefault?environment\tString value for the api environment to use for the build\tstring\tstaging "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps","content":"- restore_cache: key: yarn-v1-{{ checksum &quot;VAMobile/yarn.lock&quot; }}-{{ arch }} - run: command: | echo INSTALLING YARN npm install yarn echo INSTALLING NODE MODULES cd VAMobile yarn install --frozen-lockfile --non-interactive echo CREATING ENV FILE FOR env:&lt;&lt;parameters.environment&gt;&gt; yarn env:&lt;&lt;parameters.environment&gt;&gt; - save_cache: key: yarn-v1-{{ checksum &quot;VAMobile/yarn.lock&quot; }}-{{ arch }} paths: - VAMobile/node_modules - run: command: | echo INSTALLING BUNDLER sudo gem install bundler Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs","content":"None  "},{"title":"install_python​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#install_python","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-1","content":"This command is used to install the python dependencies for any hosted runner that does not have it installed by default. Python is required for the queueing scripts. This command updates apt-get, installs python3-pip with apt-get, and installs the requests plugin for py3 "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-1","content":"None "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-1","content":"- run: sudo apt-get update - run: sudo apt-get install python3-pip - run: python3 -m pip install requests Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-1","content":"None  "},{"title":"bundle_app​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#bundle_app","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-2","content":"Bundles the app for the OS specified using the React Native bundle command "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-2","content":"Name\tDescription\ttype\tdefault?os\tString value for the OS to build for. [android, ios]\tstring\tnone "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-2","content":"- run: working_directory: ~/project/VAMobile command: yarn bundle:&lt;&lt;parameters.os&gt;&gt; Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-2","content":"None  "},{"title":"lint​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#lint","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-3","content":"Runs the lint checks for the app. Lints error on any warnings. "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-3","content":"None "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-3","content":"- run: working_directory: ~/project/VAMobile command: yarn lint:ci when: always Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-3","content":"None  "},{"title":"jest​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#jest","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-4","content":"Runs the automated unit tests with jest using time splitting. "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-4","content":"None "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-4","content":"- run: working_directory: ~/project/VAMobile command: | TEST=$(circleci tests glob &quot;src/**/*.test.ts*&quot; | circleci tests split --split-by=timings) yarn test $TEST -w 2 when: always - store_test_results: path: VAMobile/coverage/junit/ - store_artifacts: path: VAMobile/coverage/junit/ Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-4","content":"None  "},{"title":"install_pods​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#install_pods","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-5","content":"Installs the cocoa pods for any iOS builds. Not needed for Android builds. This command loads cached pods with the pod-lock checksum at the start and saves to a cache at the end for faster builds when there have been no changes to those files. "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-5","content":"None "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-5","content":"- restore_cache: key: pods-v1-{{ checksum &quot;VAMobile/ios/Podfile.lock&quot; }}-{{ arch }} - run: working_directory: ~/project/VAMobile/ios command: | echo INSTALL COCOA PODS pod check || pod install - save_cache: key: pods-v1-{{ checksum &quot;VAMobile/ios/Podfile.lock&quot; }}-{{ arch }} paths: - VAMobile/ios/Pods Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-5","content":"None  "},{"title":"create_keys_directory​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#create_keys_directory","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-6","content":"creates a directory for the google keys because that folder is ignored by git "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-6","content":"None "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-6","content":"- run: command: mkdir VAMobile/android/keys Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-6","content":"None  "},{"title":"decode_file​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#decode_file","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-7","content":"Decodes a base64 string to a file and saves it to the specified path "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-7","content":"Name\tDescription\ttype\tdefault?workingDir\tString value for the directory to decode file to\tstring\tnone secretString\tbase64 string value to decode\tstring\tnone destination\tFilename to save as\tstring\tnone "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-7","content":"- run: working_directory: &lt;&lt;parameters.workingDir&gt;&gt; command: | # decode base64 secret string echo &lt;&lt;parameters.secretString&gt;&gt; | base64 --decode | tee &lt;&lt;parameters.destination&gt;&gt; &gt;/dev/null Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-7","content":"None  "},{"title":"decode_ios_keys​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#decode_ios_keys","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-8","content":"This command decodes all the files needed to build and sign for iOS. It currently decodes a signing cert and a provisioning profile, but that may not be necessary because of match and can be tested for removal of the IOS_CERTIFICATE_BASE64 and IOS_PROVISIONING_BASE64. "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-8","content":"None "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-8","content":"- decode_file: workingDir: '~/project/VAMobile/ios' secretString: ${IOS_CERTIFICATE_BASE64} destination: ${IOS_CERTIFICATE_PATH} - decode_file: workingDir: '~/project/VAMobile/ios' secretString: ${IOS_CERTIFICATE_BASE64} destination: ${IOS_PROVISIONING_PATH} - decode_file: workingDir: '~/project/VAMobile/ios' secretString: ${APPSTORE_CONNECT_BASE64} destination: ${APPSTORE_CONNECT_FILEPATH} - decode_file: workingDir: '~/project/VAMobile/ios' secretString: ${IOS_GS_PLIST_BASE64} destination: ${IOS_GS_PLIST_PATH} Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-8","content":"None  "},{"title":"ios_fastlane​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#ios_fastlane","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-9","content":"This command runs all the steps and commands in order to build for iOS. This is a configurable commands that will build and upload to Test Flight based on the configuration options sent in. This command loads cached gems at the beginning and saves them at the end for faster builds with fastlane and its plugins. This command sets the vendor directory for ruby and updates the fastlane bundle app. If a slack thread is indicated it will get that information from the attached workspace. It then runs the fastlane script with the available configuration. "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-9","content":"Name\tDescription\ttype\tdefault?version\tString value for the build type. Options are 'qa' or a version string like 'v1.1.1'\tstring\tqa lane\tString name for the fastlane lane to run [qa, demo, review, release, on_demand, rc]\tstring\tqa tf_group\tString name of the Test Flight Group to send to. See Test Flight groups in AppStoreConnect for options\tstring use_slack_thread\tBoolean value to indicate if a Slack thread should be pulled from an attached workspace\tboolean\ttrue notes\tString value for notes that show up in description in Test Flight\tstring\t "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-9","content":"- restore_cache: key: bundle-v1-{{ checksum &quot;VAMobile/ios/Gemfile.lock&quot; }}-{{ arch }} - run: working_directory: ~/project/VAMobile/ios command: bundle config set --local path 'vendor/bundle' &amp;&amp; bundle install - run: working_directory: ~/project/VAMobile/ios command: | echo UPDATING FASTLANE bundle update fastlane - save_cache: key: bundle-v1-{{ checksum &quot;VAMobile/ios/Gemfile.lock&quot; }} paths: - VAMobile/ios/vendor/bundle - when: condition: &lt;&lt;parameters.use_slack_thread&gt;&gt; steps: - get_slack_thread - run: working_directory: ~/project/VAMobile/ios command: bundle exec fastlane &lt;&lt;parameters.lane&gt;&gt; version:&lt;&lt;parameters.version&gt;&gt; notes:&quot;&lt;&lt;parameters.notes&gt;&gt;&quot; tfGroup:&quot;&lt;&lt;parameters.tf_group&gt;&gt;&quot; --verbose no_output_timeout: '30m' Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-9","content":"Uploads .ipa file to Test Flight with the configured build  "},{"title":"decode_android_keys​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#decode_android_keys","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-10","content":"This command decodes all the keys needed to build and upload to google play "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-10","content":"None "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-10","content":"- decode_file: workingDir: '~/project/VAMobile/android/keys' secretString: ${GOOGLE_KS} destination: ${GOOGLE_KS_PATH} - decode_file: workingDir: '~/project/VAMobile/android/keys' secretString: ${GOOGLE_SA_JSON} destination: ${GOOGLE_SA_PATH} - decode_file: workingDir: '~/project/VAMobile/android/app' secretString: ${GOOGLE_SERVICES_JSON} destination: ${GOOGLE_SERVICES_PATH} - decode_file: workingDir: '~/project/VAMobile/android/keys' secretString: ${FIREBASE_DIST_FILE_BASE64} destination: ${FIREBASE_DIST_DECODE_PATH} Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-10","content":"None  "},{"title":"android_fastlane​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#android_fastlane","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-11","content":"This command runs all the steps and commands in order to build for Android. This is a configurable commands that will build and upload to Play Store based on the configuration options sent in. This command loads cached gems at the beginning and saves them at the end for faster builds with fastlane and its plugins. This command sets the vendor directory for ruby and updates the fastlane bundle app. If a slack thread is indicated it will get that information from the attached workspace. It then runs the fastlane script with the available configuration. "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-11","content":"Name\tDescription\ttype\tdefault?version\tString value for the build type. Options are 'qa' or a version string like 'v1.1.1'\tstring\tqa lane\tString name for the fastlane lane to run [qa, demo, review, release, on_demand, rc, firebase_app_dist_add_testers, firebase_app_dist_remove_testers]\tstring\tqa ps_track\tString name of the Play Store Lane to send to. See Play Store Closed Testing groups for options\tstring use_slack_thread\tBoolean value to indicate if a Slack thread should be pulled from an attached workspace\tboolean\ttrue notes\tString value for notes that show up in description in Firebase Distribution\tstring\t "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-11","content":"- restore_cache: key: bundle-v1-{{ checksum &quot;VAMobile/android/Gemfile.lock&quot; }}-{{ arch }} - run: working_directory: ~/project/VAMobile/android command: bundle check || bundle config set --local path 'vendor/bundle' &amp;&amp; bundle install - run: working_directory: ~/project/VAMobile/android command: | echo UPDATING FASTLANE bundle update fastlane - save_cache: key: bundle-v1-{{ checksum &quot;VAMobile/android/Gemfile.lock&quot; }} paths: - VAMobile/android/vendor/bundle - when: condition: &lt;&lt;parameters.use_slack_thread&gt;&gt; steps: - get_slack_thread - run: working_directory: ~/project/VAMobile/android command: bundle exec fastlane &lt;&lt;parameters.lane&gt;&gt; --verbose version:&lt;&lt;parameters.version&gt;&gt; notes:&quot;&lt;&lt;parameters.notes&gt;&gt;&quot; psTrack:&quot;&lt;&lt;parameters.ps_track&gt;&gt;&quot; Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-11","content":".aab file sent to Play Store  "},{"title":"run_script​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#run_script","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-12","content":"Runs a bash script. Takes the working directory, script name and script options as params This is useful if there is a script that needs to be run in different directories, allowing you to write once and use everywhere. This command runs chmod +x on the script to ensure it is executable in the CI runner. "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-12","content":"Name\tDescription\ttype\tdefault?workingDir\tString value for the directory to decode file to\tstring\t~/project/VAMobile script_name\tString value for the name of the script, i.e. run_me.sh\tstring\tnone script_options\tString value for any flags or options that need to be set on the script\tstring\tnone "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-12","content":"- run: working_directory: &lt;&lt;parameters.workingDir&gt;&gt; command: | chmod +x &lt;&lt;parameters.script_name&gt;&gt; bash &lt;&lt;parameters.script_name&gt;&gt; &lt;&lt;parameters.script_options&gt;&gt; Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-12","content":"None  "},{"title":"get_slack_channel_id​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#get_slack_channel_id","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-13","content":"Checks DSVA slack to get the channel id from a channel name. Slack can sometimes change the channel id and channel name is not reliable to send messages so we search for the id by channel name and set it to the BASH ENV on the runner. "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-13","content":"Name\tDescription\ttype\tdefault?channelName\tString of the channel name in VA DSVA Slack that you want to post to\tstring\tnone "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-13","content":"- run: name: 'Find the right channel id since it can sometimes change' command: | id=$(curl -X GET -H 'Authorization: Bearer '&quot;$SLACK_API_TOKEN&quot;' ' \\ -H 'Content-type: application/x-www-form-urlencoded' \\ https://slack.com/api/conversations.list\\?limit=1000 | jq '.channels[] | .name as $data | select($data == &quot;&lt;&lt;parameters.channelName&gt;&gt;&quot;).id' ) echo &quot;export SLACK_CHANNEL_ID=${id}&quot; &gt;&gt; $BASH_ENV Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-13","content":"BASH_ENV::SLACK_CHANNEL_ID  "},{"title":"send_slack_message​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#send_slack_message","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-14","content":"Sends a slack message in the specified channel and sets the SLACK_THREAD_TS ENV var "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-14","content":"Name\tDescription\ttype\tdefault?channelId\tString value of the Slack channel id is VA DSVA Slack that you want to send a message to\tstring\tnone message\tThe string message that you want to send to the channel.\tstring\tnone "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-14","content":"- run: name: 'Post message to slack' command: | ts=$(curl -X POST -H 'Authorization: Bearer '&quot;$SLACK_API_TOKEN&quot;' ' \\ -H 'Content-type: application/json' \\ --data '{&quot;channel&quot;:&quot;'&lt;&lt;parameters.channelId&gt;&gt;'&quot;,&quot;text&quot;:&quot;&lt;&lt;parameters.message&gt;&gt;&quot;}' \\ https://slack.com/api/chat.postMessage| jq -r '.ts') echo &quot;export SLACK_THREAD_TS=${ts}&quot; &gt;&gt; $BASH_ENV Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-14","content":"BASH_ENV::SLACK_THREAD_TS  "},{"title":"persist_env​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#persist_env","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-15","content":"Persist a bash env to the workspace for other jobs This command creates a workspace in the CircleCI runner in order to share persisted environment variables across concurrent jobs, since they are running on separate VMs "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-15","content":"Name\tDescription\ttype\tdefault?envVar\tName of the environment variable to persist to a workspace, i.e. MY_ENV_VAR\tstring\tnone path\tString name of workspace path. Can be whatever to just indicate a unique workspace. save_slack_thread uses a path of 'threadTs` to save to a unique workspace for threading messages.\tstring\tnone "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-15","content":"- run: mkdir -p workspace - run: echo &lt;&lt; parameters.envVar &gt;&gt; &gt; workspace/&lt;&lt; parameters.path &gt;&gt; - persist_to_workspace: root: workspace paths: - &lt;&lt; parameters.path &gt;&gt; Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-15","content":"creates a workspace at workspace/&lt;path&gt; with BASH_ENV::envVar  "},{"title":"retrieve_persisted_env​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#retrieve_persisted_env","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-16","content":"This command pulls in a workspace and persists a BASH_ENV from that workspace onto the runner "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-16","content":"Name\tDescription\ttype\tdefault?envVar\tName of the environment variable to pull from a workspace into the runner, i.e. MY_ENV_VAR\tstring\tnone path\tString name of workspace path that you would like to persist an ENV from\tstring\tnone "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-16","content":"- attach_workspace: at: /tmp/workspace - run: command: | echo `cat /tmp/workspace/&lt;&lt; parameters.path &gt;&gt;` var=$(cat /tmp/workspace/&lt;&lt; parameters.path &gt;&gt;) echo &quot;export &lt;&lt;parameters.envVar&gt;&gt;=${var}&quot; &gt;&gt; $BASH_ENV Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-16","content":"BASH_ENV::envVar  "},{"title":"save_slack_thread​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#save_slack_thread","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-17","content":"Uses the persist_env command to save the Thread TS variable for a Slack thread onto the workspace. "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-17","content":"None "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-17","content":"- persist_env: envVar: ${SLACK_THREAD_TS} path: 'threadTs Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-17","content":"Creates a workspace at workspace/threadTs with BASH_ENV::SLACK_THREAD_TS persisted  "},{"title":"get_slack_thread​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#get_slack_thread","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-18","content":"Retrieves the workspace at workspace/threadTs and persists the workspace SLACK_THREAD_TS to the current runner. "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-18","content":"None "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-18","content":"- retrieve_persisted_env: envVar: 'SLACK_THREAD_TS' path: 'threadTs' Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-18","content":"BASH_ENV::SLACK_THREAD_TS  "},{"title":"queue_android_jobs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#queue_android_jobs","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-19","content":"This command runs the queue job for Android builds. Python does not come pre-installed on the Android runners in CircleCI, so this command calls the install_python command before it runs the queue script The BUILD_REGEX value is saved to the BASH_ENV so that the queue script can pick up the job filter "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-19","content":"Name\tDescription\ttype\tdefault?regex\tRegular expression string for the filtering of jobs in the queue. Usually just '^buildandroid' or '^buildios' but can be any filter of job names in the config\tstring\t^buildandroid "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-19","content":"- run: echo &quot;export BUILD_REGEX=&lt;&lt;parameters.regex&gt;&gt;&quot; &gt;&gt; $BASH_ENV - install_python - run: working_directory: ~/project/VAMobile command: python3 queue-builds.py Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-19","content":"None  "},{"title":"queue_ios_jobs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#queue_ios_jobs","content":""},{"title":"Description​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#description-20","content":"This command runs the queue job for iOS builds. Pyhton3 is pre-installed on the Mac runners, but does not have the requests plugin installed. This command installs that plugin before running the script. The BUILD_REGEX value is saved to the BASH_ENV so that the queue script can pick up the job filter "},{"title":"Parameters​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#parameters-20","content":"Name\tDescription\ttype\tdefault?regex\tRegular expression string for the filtering of jobs in the queue. Usually just '^buildandroid' or '^buildios' but can be any filter of job names in the config\tstring\t^buildios "},{"title":"Steps​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#steps-20","content":"- run: echo &quot;export BUILD_REGEX=&lt;&lt;parameters.regex&gt;&gt;&quot; &gt;&gt; $BASH_ENV - run: python3 -m pip install requests - run: working_directory: ~/project/VAMobile command: python3 queue-builds.py Copy "},{"title":"Outputs​","type":1,"pageTitle":"Commands","url":"docs/Engineering/DevOps/Automation Code Docs/CircleCI/Commands#outputs-20","content":"None "},{"title":"GitHub Actions","type":0,"sectionRef":"#","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Overview","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"GitHub Actions","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Overview#overview","content":"GitHub Actions is used to do most of our non-build operations and automation. It can be much easier to tune the triggers and has most of the tools we need pre-installed to do the work within GitHub and doesn't require a complicated connection from CircleCI to authorize. "},{"title":"Automation Robot​","type":1,"pageTitle":"GitHub Actions","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Overview#automation-robot","content":"We use our GitHub automation robot account to do any work in Actions. va-mobile-automation-robot account credentials are located in the VA Mobile vault in 1Password. I would recommend that you use this account in a separate browser from your every-day browser. It's easier to have the two accounts at hand if one is running in Chrome and the other is only used in say Safari. Access in Actions is granted with Personal Access Tokens. "},{"title":"Workflows​","type":1,"pageTitle":"GitHub Actions","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Overview#workflows","content":"This is the current list of things automated by GitHub Workflows Adding a new user to the va-mobile-team in GitHub to grant write access in the repository and ZenHub.Automated updates for bundler and Fastlane plugins to keep the build system up to date. Code QL scanning of commits.Test building of documentation site changes.Automated build and deploy of the documentation site.Ability to create / (slash) commands that will run from any GitHub issue.Automated creation of release tickets when a new release branch is created. Uses the release_ticket.md template. Automated creation of a TestRail run when a release ticket is created for QA regression testing.Automated creation of TestRail Milestone to track testing completionAutomated updating of the QA run mermaid chart in release tickets when a TestRail run updates (There are limitations to this due to TestRail events API)Approve slash command that merges release branch to main and creates a PR from the release branch to merge any changes back to develop, then comments on the issue and closed it.Workflow that checks merges to main for a message that matches the version format from the slash merge and then tags the commit with that version number, kicking off the CircleCI workflow "},{"title":"Local Testing​","type":1,"pageTitle":"GitHub Actions","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Overview#local-testing","content":"You can test GitHub Actions on your local machine using act CLI tool You can find saved test data used in my local testing here "},{"title":"Scripts","type":0,"sectionRef":"#","url":"docs/Engineering/DevOps/Automation Code Docs/Scripts","content":"","keywords":""},{"title":"queue-builds.py​","type":1,"pageTitle":"Scripts","url":"docs/Engineering/DevOps/Automation Code Docs/Scripts#queue-buildspy","content":""},{"title":"Description​","type":1,"pageTitle":"Scripts","url":"docs/Engineering/DevOps/Automation Code Docs/Scripts#description","content":"This python script runs as a step in every build job. It is a simplified version of the CircleCI Orb for the same purpose. iOS and Android Stores use build number as the unique ID and do not allow builds to be uploaded with the same build number. Since the build number has to be saved PRIOR TO the build process starting, there is no way to keep the system from running concurrent jobs where the build numbers collide. The queueing script queries CircleCI for jobs running with a specific regular expression and queues the older jobs, which allows the system to upload one build number before a second build job can fire off, eliminating upload collisions for duplicate build numbers. This allows a greater flexibility for who can kick off a build job. "},{"title":"Parameters​","type":1,"pageTitle":"Scripts","url":"docs/Engineering/DevOps/Automation Code Docs/Scripts#parameters","content":"No params, but requires the CIRCLE_BUILD_NUM and BUILD_REGEX environment variables to be set in order to work properly. "},{"title":"File location​","type":1,"pageTitle":"Scripts","url":"docs/Engineering/DevOps/Automation Code Docs/Scripts#file-location","content":"~/VAMobile/queue-builds.py  "},{"title":"on-demand-build.sh​","type":1,"pageTitle":"Scripts","url":"docs/Engineering/DevOps/Automation Code Docs/Scripts#on-demand-buildsh","content":""},{"title":"Description​","type":1,"pageTitle":"Scripts","url":"docs/Engineering/DevOps/Automation Code Docs/Scripts#description-1","content":"This script allows a developer with the correct Signing Keys stored locally to build a configured version for one of the stores. This version can be configured with any of the below parameters and will run the correct Fastlane script to complete the job. "},{"title":"Parameters​","type":1,"pageTitle":"Scripts","url":"docs/Engineering/DevOps/Automation Code Docs/Scripts#parameters-1","content":"Flag\tDescription\trequired?\ttype\tdefault?\tchoose from (case sensitive)-o OR --os\tOperating system to build for\tyes\tstring\tnone\t[ios, android] -e OR --environment\tVets API environment to build for\tno\tstring\tstaging\t[staging, production] -b OR --branch\tBranch to checkout\tno\tstring\tdevelop\tAny GitHub Branch -t OR --type\tType of build\tno\tstring\tqa\t[qa, release, hotfix] -f OR --flight_group\tTest Flight group to build for (iOS)\tno\tstring\tDevelopment Team\t[Development Team, Ad Hoc Production Testers, IAM Group, Push Testing, UAT Group, VA 508 Testers, VA Employee (Wide) Beta, VA Production Testers, VA Stakeholders] -p OR --play_track\tGoogle Play Track to build for (Android)\tno\tstring\tDevelopment Team\t[Development Team, VA Production Testers] -n OR --notes\tNotes to display in Test Flight or Firebase Distribution for this build\tno\tstring\tnone\tNA -h OR --help\tDisplays this help menu\tno\tNA\tNA\tNA "},{"title":"File location​","type":1,"pageTitle":"Scripts","url":"docs/Engineering/DevOps/Automation Code Docs/Scripts#file-location-1","content":"~/VAMobile.on-demand-build.sh  "},{"title":"production.sh​","type":1,"pageTitle":"Scripts","url":"docs/Engineering/DevOps/Automation Code Docs/Scripts#productionsh","content":""},{"title":"Description​","type":1,"pageTitle":"Scripts","url":"docs/Engineering/DevOps/Automation Code Docs/Scripts#description-2","content":"Build an production version of Android or iOS. This will deploy to the release staging lane for the OS. Requires that the developer have the corret certificates installed on their local machine. "},{"title":"Parameters​","type":1,"pageTitle":"Scripts","url":"docs/Engineering/DevOps/Automation Code Docs/Scripts#parameters-2","content":"Flag\tDescription\trequired?\ttype\tdefault?\tchoose from (case sensitive)-o OR --os\tOperating system to build for\tyes\tstring\tnone\t[ios, android] -v OR --version\tVersion name\tyes\tstring\tnone\tShould conform to the regular expression /^v\\d+\\.\\d+\\.\\d+/ (eg v1.1.10) -h OR --help\tDisplays this help menu\tNA\tNA\tNA\tNA "},{"title":"File location​","type":1,"pageTitle":"Scripts","url":"docs/Engineering/DevOps/Automation Code Docs/Scripts#file-location-2","content":"~/VAMobile/production.sh  "},{"title":"release_branch.sh​","type":1,"pageTitle":"Scripts","url":"docs/Engineering/DevOps/Automation Code Docs/Scripts#release_branchsh","content":""},{"title":"Description​","type":1,"pageTitle":"Scripts","url":"docs/Engineering/DevOps/Automation Code Docs/Scripts#description-3","content":"This script is used by the release branch automation. because release branches happen every two weeks and chrontabs notation does not offer intervals we have this script. From the help:​ Release branch automation script This script does the following: Checks the date to see if it occurs at a 2 week interval from August 4, 2021. (If this is true, then we should cut a release branch from developChecks out the main branch, then pulls the latest tag.Increments the latest tag by the minor version to get the next release version numberChecks out and pulls latest develop branchCreates a new release branch with the correct name and pushes it up to the origin "},{"title":"Parameters​","type":1,"pageTitle":"Scripts","url":"docs/Engineering/DevOps/Automation Code Docs/Scripts#parameters-3","content":"None "},{"title":"File location​","type":1,"pageTitle":"Scripts","url":"docs/Engineering/DevOps/Automation Code Docs/Scripts#file-location-3","content":"~/VAMobile/release_branch.sh  "},{"title":"Apple Signing Keys","type":0,"sectionRef":"#","url":"docs/Engineering/DevOps/Automation Code Docs/Signing Keys/Apple","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Apple Signing Keys","url":"docs/Engineering/DevOps/Automation Code Docs/Signing Keys/Apple#overview","content":"Apple Signing and Distribution keys are obtained through the Apple Developer Portal Certificates, Identifiers, and Profiles Developers will each need to have a development certificate created for them, or else a team will need a shared key for each machine. Apple and iOS Distribution certificates are limited in the organization. Currently, the Health and Benefits App has its own certificate for Apple Distribution. In the future, it may be that teams have a shared signing path with different provisioning profiles, but at this time it is not necessary. Apple Certificates expire every year and need to be renewed. This process is linked below and requires updating both the Certificates' area in the Developer Portal, and work to update the Fastlane Match system used to sign apple builds. "},{"title":"Fastlane Match and Apple Signing​","type":1,"pageTitle":"Apple Signing Keys","url":"docs/Engineering/DevOps/Automation Code Docs/Signing Keys/Apple#fastlane-match-and-apple-signing","content":"Apple Signing in our build system is managed with [Fastlane match]. Match manages and stores the certificates so that a single Distribution certificate can be shared with the team through GitHub authorization to the private, encrypted repository. Match can be called from a local machine to download the certificates and provisioning profiles for distribution or development. It is also used to sign certificates in the CI during Fastlane scripts. "},{"title":"Renewing Certificates​","type":1,"pageTitle":"Apple Signing Keys","url":"docs/Engineering/DevOps/Automation Code Docs/Signing Keys/Apple#renewing-certificates","content":"In order to renew certificates you will need to delete the old certificates from Apple, as well as delete them from the private key repository. In the repository, you will need to delete the following files: Provisioning Profile​ /profiles/appstore/&lt;filename&gt;.mobileprovision/certs/distribution/&lt;filename&gt;.cer/certs/distribution/&lt;filename&gt;.p12 You will need to delete the expiring profile and certificates from the Developer Console Certificate​ NAME\tTYPE\tPLATFORM\tCREATED BY\tEXPIRATIONUS Department of Veterans Affairs (VA)\tDistribution\tAll\tPatrick Saxton\t07/13/2023 Provisioning Profiles​ NAME\tPLATFORM\tTYPE\tEXPIRATIONmatch AppStore gov.va.vamobileapp\tiOS\tApp Store\t07/13/2023 Once the certificates have been deleted from both locations you can run match in your terminal to renew the certs navigate to ~/VAMobile/ios/fastlane and then run fastlane match appstore. You should be able to follow the prompt to create a new Distribution Certificate and Provisioning Profile that will be uploaded to the private repository and can then be used for signing apps. You should be able to test locally by building with the On-demand Script. If the signing part doesn't fail before build everything should be good to go. You can PR any file changes that may have happened. NOTE: You may need to update the configs and profiles in the VAMobile.plist with xCode if the name strings are changed. If you receive a build error about not finding a cert, double check this first "},{"title":"Location in the CI​","type":1,"pageTitle":"Apple Signing Keys","url":"docs/Engineering/DevOps/Automation Code Docs/Signing Keys/Apple#location-in-the-ci","content":"Apple certificates are encrypted by Fastlane match into a private repository and fetched at build time. On your local machine they can be found in the Keychain Access application. "},{"title":"ENV Constants for the keys​","type":1,"pageTitle":"Apple Signing Keys","url":"docs/Engineering/DevOps/Automation Code Docs/Signing Keys/Apple#env-constants-for-the-keys","content":"All keys are stored in match "},{"title":"More Documentation​","type":1,"pageTitle":"Apple Signing Keys","url":"docs/Engineering/DevOps/Automation Code Docs/Signing Keys/Apple#more-documentation","content":"Apple Codesigning DocumentationFastlane Codesigning Documentation "},{"title":"Firebase Signing Keys","type":0,"sectionRef":"#","url":"docs/Engineering/DevOps/Automation Code Docs/Signing Keys/Firebase","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Firebase Signing Keys","url":"docs/Engineering/DevOps/Automation Code Docs/Signing Keys/Firebase#overview","content":"In order to use any of the Firebase plugins in our application we need to include the correct configuration keys in the build. The current Firebase configuration files can be downloaded from the project page settings page If you need to create new keys because they were leaked or for any other reason you will need to follow the Getting Started Menu here. Android QA and other staging versions are distributed with Firebase Distribution and this file is also help in a base64 string in the CI "},{"title":"Location in the CI​","type":1,"pageTitle":"Firebase Signing Keys","url":"docs/Engineering/DevOps/Automation Code Docs/Signing Keys/Firebase#location-in-the-ci","content":"Apple and Android certificates are stored in CircleCI as base64 strings that are decoded by the CI when they are needed. "},{"title":"ENV Constants for the keys​","type":1,"pageTitle":"Firebase Signing Keys","url":"docs/Engineering/DevOps/Automation Code Docs/Signing Keys/Firebase#env-constants-for-the-keys","content":"Key Name\tENV String\tLocation ENV String\tDecoded Location\tCI CommandApple Google Services plist\tIOS_GS_PLIST_BASE64\tIOS_GS_PLIST_PATH\t~/project/VAMobile/ios/GoogleService-Info.plist\tdecode_ios_keys Android Google Services json\tGOOGLE_SERVICES_JSON\tGOOGLE_SERVICES_PATH\t~/project/VAMobile/android/app/google-services.json\tdecode_android_keys Firebase Distribution Key\tFIREBASE_DIST_FILE_BASE64\tFIREBASE_DIST_DECODE_PATH\t~/project/VAMobile/android/keys/firebase-dist.json\tdecode_android_keys "},{"title":"More Documentation​","type":1,"pageTitle":"Firebase Signing Keys","url":"docs/Engineering/DevOps/Automation Code Docs/Signing Keys/Firebase#more-documentation","content":"Firebase Documentation SiteFirebase Distribution Documentation "},{"title":"Google Signing Keys","type":0,"sectionRef":"#","url":"docs/Engineering/DevOps/Automation Code Docs/Signing Keys/Google","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Google Signing Keys","url":"docs/Engineering/DevOps/Automation Code Docs/Signing Keys/Google#overview","content":"Google .aab files are signed with an upload key and signed by Google's app signing process after upload and before distribution. A new upload keystore and upload key are generated in Android Studio. Those keys are then stored as base64 strings within the CI and decoded during the build process. An additional step of creating a Google Play service worker in order to upload with Fastlane tooling. This can only be done by the account holder. You can find that information for the VA account here This process rarely needs to happen. A service account can live the life of the app if the credentials are not shared. The same is true for the upload certificates. "},{"title":"Location in the CI​","type":1,"pageTitle":"Google Signing Keys","url":"docs/Engineering/DevOps/Automation Code Docs/Signing Keys/Google#location-in-the-ci","content":"The Android certificates are stored in CircleCI as base64 strings that are decoded by the CI when they are needed. "},{"title":"ENV Constants for the keys​","type":1,"pageTitle":"Google Signing Keys","url":"docs/Engineering/DevOps/Automation Code Docs/Signing Keys/Google#env-constants-for-the-keys","content":"Key Name\tENV String\tDestination ENV String\tDecoded Location\tCI CommandAndroid Keystore\tGOOGLE_KS\tGOOGLE_KS_PATH\t~/project/VAMobile/android/keys/vamobile\tdecode_android_keys Google Service Account\tGOOGLE_SA_JSON\tGOOGLE_SA_PATH\t~/project/VAMobile/android/keys/service-account.json\tdecode_android_keys "},{"title":"More Documentation​","type":1,"pageTitle":"Google Signing Keys","url":"docs/Engineering/DevOps/Automation Code Docs/Signing Keys/Google#more-documentation","content":"Android DevelopersFastlane Google SetupGoogle Play Developer APISample Walk-through "},{"title":"Build Automation Overview","type":0,"sectionRef":"#","url":"docs/Engineering/DevOps/Overview","content":"","keywords":""},{"title":"Releases​","type":1,"pageTitle":"Build Automation Overview","url":"docs/Engineering/DevOps/Overview#releases","content":"Our releases are made live every other Tuesday morning. A GitHub Action runs every Tuesday morning to check and see if there is a staged build ready for developer release in the Apple App Store. For Play Store, it checks to see if there is a newer build than the production lane waiting in the Pre-Prod Stash lane. If there is, they are released to production at that time and sends a message to the main va-mobile-app channel in DSVA slack. If not, it completes silently. Release branches are cut by an Action every other Wednesday that follows a release. The release branch acts as a freeze on the develop branch for the next release that allows QA to run regressions from a static point and allows any last-minute changes to be added before being merged to main and build for review in the stores. This release branch being created then starts automation that creates the release ticket in GitHub and assigns the relevant people. Releases coincide with the last day of a sprint and new release branches are cut on the first day of the sprint. Release process approval ends with an authorized person (currently a VA Product Owner) releasing the app for build and upload to the stores by running the /approve command in the automated release ticket. This is accomplish by adding a comment to the issue in the form of /approve vX.Y.Z where X.Y.Z is the next version number. This version number should be present in the title of the ticket. Once the release is approved, the build system will create and upload production versions of the app to the App Stores for review. Barring any issues, these should be released on the next Tuesday when the release Action runs. NOTE: Because chrontab notation doesn't have a way to schedule a job at an interval , i.e. every two weeks, the release action has to be scheduled for EVERY Tuesday. This means that if the approve command is run before the Tuesday in the middle of the sprint, the releases will go out a week early.​ "},{"title":"QA Builds​","type":1,"pageTitle":"Build Automation Overview","url":"docs/Engineering/DevOps/Overview#qa-builds","content":""},{"title":"Daily Builds​","type":1,"pageTitle":"Build Automation Overview","url":"docs/Engineering/DevOps/Overview#daily-builds","content":"Regular QA builds are distributed every weekday. These builds are based on the most current commit on the develop branch in order to provide QA with the most up-to-date versions as possible and can be augmented with the other types of builds. "},{"title":"On-Demand Builds​","type":1,"pageTitle":"Build Automation Overview","url":"docs/Engineering/DevOps/Overview#on-demand-builds","content":"On Demand Builds are run from a developers local machine to create one-off-builds for distribution to a specific team or for a specific configuration. These builds use the on-demand script and require the developer to have a copy of the signing certificates and keychains on their local machine. This type of build is usually for very specific builds the developer wants to distribute to other tracks in Test Flight and Play Store. It is also here as a back-up in case the automated build system experiences issues. This allows for manual kick-off of a build, but guarantees that the build will be, at minimum, configured and built correctly. "},{"title":"Tagged Builds​","type":1,"pageTitle":"Build Automation Overview","url":"docs/Engineering/DevOps/Overview#tagged-builds","content":"Tagged builds, or feature builds, are a way for any developer to create a build for a larger branch or a branch that needs to be tested by QA or another group on live devices before the branch is merged. These builds are created by tagging the specific commit on a branch with a tag that starts with feature-build-. The trailing parts of the tag will be used to describe the build notes for anyone receiving them. For example: Say I tag a branch on Veterans Day at 11:30 with the tag feature-build-my-cool-feature. The automation system will use that tag to create release notes that say Feature Build: my cool release - 11/11/22 11:30. This allows the developer to use the tag and identify the use of a build when it is listed in the distribution apps like Test Flight. "},{"title":"Front End","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/","content":"Front End FrontEnd Engineering resources for the VA Mobile app.","keywords":""},{"title":"Workflows","type":0,"sectionRef":"#","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows","content":"","keywords":""},{"title":"add-new-user​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#add-new-user","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#description","content":"Workflow used to add a new user to the flagship-mobile-team in GitHub, which grants write and read access tot he va-mobile-app repository and to our ZenHub instance. "},{"title":"Trigger​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#trigger","content":"Creation of Add User to VA Flagship Mobile Team template in va-mobile-app repository. "},{"title":"Steps/Source​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#stepssource","content":" Click for full source ... const extractUsernameRegex = /@[a-zA-Z-_0-9]+/; const username = getFirstMatch(extractUsernameRegex, context.payload.issue.body).substring(1); if(username) { await inviteToTeam(username) await addComment(&quot;User added successfully&quot;) await addLabels(&quot;complete&quot;) await closeIssue() } else { // error const errorMessage = &quot;Invalid username. Requires manual addition to team&quot; // assign for manual approval and addition, add error label await addAssignees(EXCEPTION_ASSIGNEES) await addLabels(&quot;needs-approval&quot;) await addComment(errorMessage) } ... Copy - uses: actions/github-script@v6 with: github-token: ${{ secrets.GH_ACTIONS_PAT }} script: | const [owner, repo] = process.env.GITHUB_REPOSITORY.split(&quot;/&quot;); // const DEBUG = core.isDebug(); // function debug(msg) { // if (DEBUG) { // core.debug(msg); // } // } // GH team to add user to const TEAM_SLUG = &quot;flagship-mobile-team&quot;; // role to give user in team const DEFAULT_ROLE = &quot;member&quot; // assignees for any errors const EXCEPTION_ASSIGNEES = ['lexicalninja', 'narin'] function getFirstMatch(regex, str) { const match = regex.exec(str); if (match) { return match[match.length &gt; 1 ? 1 : 0]; } return null; } function addComment(body) { return github.rest.issues.createComment({ owner, repo, issue_number: context.payload.issue.number, body, }); } function addLabels(labels) { let normalizedLabels = labels; if (!Array.isArray(labels)) { normalizedLabels = [labels]; } return github.rest.issues.addLabels({ owner, repo, issue_number: context.payload.issue.number, labels: normalizedLabels, }); } function closeIssue() { return github.rest.issues.update({ owner, repo, issue_number: context.payload.issue.number, state: &quot;closed&quot;, }); } function addAssignees(assignees) { return github.rest.issues.update({ owner, repo, issue_number: context.payload.issue.number, assignees, }); } async function inviteToTeam(username) { return github.rest.teams.addOrUpdateMembershipForUserInOrg({ org: owner, team_slug: TEAM_SLUG, username: username, role: DEFAULT_ROLE }) } Copy - if: ${{ failure() }} uses: actions/github-script@v6 with: github-token: ${{ secrets.GH_ACTIONS_PAT }} script: | const [owner, repo] = process.env.GITHUB_REPOSITORY.split(&quot;/&quot;); function addComment(body) { return github.rest.issues.createComment({ owner, repo, issue_number: context.payload.issue.number, body, }); } await addComment('Failed to send invitation. See Actions logs for details.) Copy  "},{"title":"approve_command​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#approve_command","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#description-1","content":"Workflow for the /approve command in GitHub Issues. Workflow is made available in Issues by the slash_commands workflow. The current version of the workflow looks for a comment in issues that starts with /approve. The command should be immediately followed by a version string that matches the version regex /^vd+.d+.d+$/ The current logic on this trigger is pretty brittle and if the admin doesn't do it correctly it can have some incorrect effects that need to get fixed with a new comment that is formatted correctly. There is likely some work to make this better, but there is some time needed to sort out the logic and have the command send the correct message back to the issue and to tag whoever initiated the command. This command calls the release_pull_request workflow during execution. "},{"title":"Trigger​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#trigger-1","content":"Workflow is triggered when a user types /approve into a GitHub Issue and clicks the comment button. "},{"title":"Steps/Source​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#stepssource-1","content":"See in repository  "},{"title":"bundler_update​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#bundler_update","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#description-2","content":"Automated workflow that runs every Wednesday to update all the installed bundler libraries and any installed Fastlane plugins for both the iOS and Android Fastfiles "},{"title":"Trigger​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#trigger-2","content":"Runs every Wednesday at 0700 UTC on only the develop branch. "},{"title":"Steps/Source​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#stepssource-2","content":"See in repository  "},{"title":"codeql​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#codeql","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#description-3","content":"Runs mandatory Code QL scanning on the repository. This workflow was created and is maintained by the VA's GitHub group and should not be updated or removed without consent from that team in order to stay in compliance with VA security policy. If you need to update the script, please read the comments in the workflow to see what can be added to scanning by the mobile team. "},{"title":"Trigger​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#trigger-3","content":"- cron: '27 2 * * 1' Copy Runs every Monday at 0227 UTC Also runs on every push or pull request to devlop branch. "},{"title":"Steps/Source​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#stepssource-3","content":"See in repository  "},{"title":"create_test_rail_milestone​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#create_test_rail_milestone","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#description-4","content":"Creates a new Sprint Milestone in TestRail that can be added to a test run and used for tracking in TestRail. "},{"title":"Trigger​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#trigger-4","content":"Runs when called by another workflow "},{"title":"Paramters​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#paramters","content":"Secrets​ Name\tDescription\ttype\trequired?TEST_RAIL_USER\tTestrail robot userid. User and id received from the VA testing tools team. See Github Robot PAT for Testrail in VA Mobile 1Password\tstring\tyes TEST_RAIL_KEY\tTestRail API key. See Github Robot PAT for Testrail in VA Mobile 1Password\tstring\tyes "},{"title":"Outputs​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#outputs","content":"Name\tDescription\ttypemilestoneId\tTestRail ID for the Milestone that is created\tstring "},{"title":"Steps/Source​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#stepssource-4","content":"create_milestone: outputs: milestoneId: ${{ steps.add_milestone.outputs.milestone }} runs-on: ubuntu-latest steps: - name: 'Add new sprint milestone in Testrail' id: add_milestone run: | dateRange=&quot;$(date '+%B %-d') - $(date -d '+13 days' '+%B %-d')&quot; id=$(curl -X POST -H 'Content-Type: application/json' \\ -u &quot;${{secrets.TEST_RAIL_USER}}:${{secrets.TEST_RAIL_KEY}}&quot; \\ &quot;https://dsvavsp.testrail.io//index.php?/api/v2/add_milestone/29&quot; \\ -d '{&quot;name&quot;: &quot;Sprint: '&quot;${dateRange}&quot;'&quot;, &quot;description&quot;: &quot;Milestone for all testing performed during Sprint: '&quot;${dateRange}&quot;'&quot;, &quot;start_on&quot;: '$(date +%s)', &quot;due_on&quot;: '$(date -d '+13 days' '+%s')' }' | jq '.id') echo &quot;id is $id&quot; curl -X POST -H 'Content-Type: application/json' \\ -u &quot;${{secrets.TEST_RAIL_USER}}:${{secrets.TEST_RAIL_KEY}}&quot; \\ &quot;https://dsvavsp.testrail.io//index.php?/api/v2/update_milestone/${id}&quot; \\ -d '{&quot;is_started&quot;:1}' echo &quot;&quot; echo &quot;::set-output name=milestone::${id}&quot; Copy  "},{"title":"documentation_deploy​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#documentation_deploy","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#description-5","content":"Workflow that runs every day to update this documentation site with any approved changes. "},{"title":"Trigger​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#trigger-5","content":"- cron: &quot;0 3 * * *&quot; Copy Runs every day at 0300 UTC "},{"title":"Steps/Source​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#stepssource-5","content":"See in repository  "},{"title":"documentation_test_build​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#documentation_test_build","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#description-6","content":"Automated workflow that runs on every PR that touches autogenerated content for this documentation site to make sure that not of the changes breaks the automatic build and deploy of the site. "},{"title":"Trigger​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#trigger-6","content":"Runs on every pull request to develop branch that touches the following paths: VAMobile/src/components/**VAMobile/documentation/**VAMobile/src/utils/hooks.tsx "},{"title":"Steps/Source​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#stepssource-6","content":"test-deploy: name: Test runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - uses: actions/setup-node@v2 with: node-version: 14.x cache: yarn cache-dependency-path: VAMobile/yarn.lock - name: Test build working-directory: VAMobile run: | yarn install --frozen-lockfile cd documentation yarn install --frozen-lockfile yarn build Copy  "},{"title":"production_builds​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#production_builds","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#description-7","content":"Automated workflow that runs on merges to main. If the merge title matches our version scheme, this workflow will then tag that commit with the version string, kicking off the production build flows on CircleCI "},{"title":"Trigger​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#trigger-7","content":"Pull Request merged to main where the PR title matches ^v[0-9]+\\.[0-9]+\\.[0-9]+$ "},{"title":"Steps/Source​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#stepssource-7","content":"tag_for_release: if: github.event.pull_request.merged == true runs-on: ubuntu-latest steps: - uses: actions/checkout@v2 - name: Tag for release run: | if [[ ${{github.event.pull_request.title}} =~ (^v[0-9]+\\.[0-9]+\\.[0-9]+$) ]]; then git config --global user.name 'VA Automation Bot' git config --global user.email 'va-mobileapp@adhocteam.us' git tag -a ${{github.event.pull_request.title}} -m ${{github.event.pull_request.title}} git push origin ${{github.event.pull_request.title}} else echo 'Non-release PR, exiting' exit 0 fi shell: bash Copy  "},{"title":"release_branch_issue​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#release_branch_issue","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#description-8","content":"This automated workflow creates the release ticket for every release. This ticket runs any time a release branch is created that matches our strategy of release/^v[0-9]+\\.[0-9]+\\.[0-9]+$ and does the following: scrapes the version from the GitHub referenceCalculates teh QA, Product, and VA Due Dates for the ticketCalculates the Release Date for the specified versionCreates a table of all the Sev-1 and Sev-2 bugs that are open in the repositoryCreates an issue from the release_ticket GitHub Issue TemplateCreates a TestRail Run and Milestone for QA regression testing and trackingAdds the TestRail run graph to the ticket after the run has been created "},{"title":"Trigger​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#trigger-8","content":"Runs on every branch create and creates a new ticket only if the branch name matches release/^v[0-9]+\\.[0-9]+\\.[0-9]+$ "},{"title":"Steps/Source​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#stepssource-8","content":"See in repository  "},{"title":"release_pull_request​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#release_pull_request","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#description-9","content":"This Workflow runs when called by another workflow and merges the release branch changes to main and then creates a PR for any branch updates to be pulled back into develop "},{"title":"Trigger​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#trigger-9","content":"Runs when called by another Workflow "},{"title":"Parameters​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#parameters","content":"Inputs​ Name\tDescription\ttype\trequired?version\tVersion Number (eg. v1.1.0)\tstring\tyes Secrets​ Name\tDescription\ttype\trequired?GH_ACTIONS_PAT\tPAT token from composite parent workflow. Should be PAT from our automation robot\tstring\tyes Outputs​ Name\tDescription\ttypedevPrUrl\tURL string that points to the new PR to develop for any release branch specific changes\tstring releaseHash\tString value of the commit hash on main that can point to the release changes as a single commit in GitHub\tstring "},{"title":"Steps/Source​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#stepssource-9","content":"See in repository  "},{"title":"slash_commands​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#slash_commands","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#description-10","content":"Workflow sets up any slash commands that have been created to run in a newly created issue. Uses the Slash Command Dispatch Action from GitHub Marketplace This can be used to add any more &quot;chat ops&quot;-type automations in the future by adding to the commands: option "},{"title":"Trigger​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#trigger-10","content":"Runs on every issue created comment and fires any slash commands installed if found. "},{"title":"Steps/Source​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#stepssource-10","content":"slashCommandDispatch: runs-on: ubuntu-latest steps: - name: Slash Command Dispatch uses: peter-evans/slash-command-dispatch@v2 with: token: ${{ secrets.GH_ACTIONS_PAT }} reaction-token: ${{ secrets.GH_ACTIONS_PAT }} permission: admin commands: | approve Copy  "},{"title":"start_test_rail_run​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#start_test_rail_run","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#description-11","content":"This workflow creates a new TestRail Test Run for QA when called from another Workflow. "},{"title":"Trigger​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#trigger-11","content":"Runs when called by another Workflow "},{"title":"Parameters​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#parameters-1","content":"Inputs​ Name\tDescription\ttype\trequired?version\tVersion Number (eg. v1.1.0)\tstring\tyes releaseDate\tGo-live date for release (eg. 06/21/2022)\tstring\tyes ticketNumber\tIssue number for release ticket (eg. 3333)\tstring\tyes milestoneId\tTestRail Milestone ID for the run to be associated with\tstring\tyes Secrets​ Name\tDescription\ttype\trequired?TEST_RAIL_USER\tTestrail robot userid. User and id received from the VA testing tools team. See Github Robot PAT for Testrail in VA Mobile 1Password\tstring\tyes TEST_RAIL_KEY\tTestRail API key. See Github Robot PAT for Testrail in VA Mobile 1Password\tstring\tyes Outputs​ Name\tDescription\ttypetestrailUrl\tURL String for the newly created TestRail run\tstring "},{"title":"Steps/Source​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#stepssource-11","content":"See in repository  "},{"title":"update_testrail_run​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#update_testrail_run","content":""},{"title":"Description​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#description-12","content":"This Workflow runs on a repository dispatch is received from automated TestRail webhooks. When the TestRail run is updated, it sends a webhook to the repository. This workflow is fired and then updated the mermaid diagram in the Release Ticket issue with the testing results so far in the run NOTE: Currently, TestRail does not fire a webhook when a test is completed in the run, only when top-level meta-data has been updated in the Run. We have requested an enhancement to TestRail to change this, but there is no documented tracking available for enhancement requests from the TestRail team. This will typically only fire and update once the QA team marks the Run as complete. "},{"title":"Trigger​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#trigger-12","content":"Runs when a webhook from TestRail is sent "},{"title":"Steps/Source​","type":1,"pageTitle":"Workflows","url":"docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows#stepssource-12","content":"See in repository  "},{"title":"Accessibility Information","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation","content":"","keywords":""},{"title":"IOS​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#ios","content":"IOS has a handful of ways to test a11y. Here are tools we can use to verify a11y on a real IOS device. "},{"title":"VoiceOver(Screen Reader)​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#voiceoverscreen-reader","content":"Enable VoiceOver via Settings -&gt; Accessibility -&gt; VoiceOver -&gt; toggle onAccessibilityHints are not turned on by default. To turn on Settings -&gt; Accessibility -&gt; Verbosity -&gt; toggle on Speak HintsGestures for traversing "},{"title":"Voice Control(Voice Navigation)​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#voice-controlvoice-navigation","content":"Enable Voice Control via Settings -&gt; Accessibility -&gt; Voice Control -&gt; toggle onVoice Commands Show names -&gt; Tap &lt;name&gt;Show numbers -&gt; Tap &lt;number&gt; "},{"title":"Wireless Keyboard​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#wireless-keyboard","content":"Use right and left arrows to traverse (tab is not supported)Hit up and down at the same time to activate an item "},{"title":"Accessibility Inspector(Simulator Only)​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#accessibility-inspectorsimulator-only","content":"Open Xcode -&gt; Play to start simulator -&gt; Xcode Menu Item -&gt; Open Developer Tool -&gt; Accessibility Inspector "},{"title":"Android​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#android","content":"Like IOS, Android provides tools to help verify a11y. A real device is needed to test a11y on Android. "},{"title":"TalkBack(Screen Reader)​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#talkbackscreen-reader","content":"Enable Talkback via Settings -&gt; Accessibility -&gt; TalkBack -&gt; toggle on Swipe right or left to move between itemsDouble-tap to activate an itemDrag 2 fingers to scroll "},{"title":"Voice Access(Voice Navigation)​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#voice-accessvoice-navigation","content":"Download/Install Voice Access from the Google Play Store Settings -&gt; Accessibility -&gt; Voice Access -&gt; toggle onStart Voice Access by swiping down from the top of your phone and tap to start Voice Commands Show numbers -&gt; Tap &lt;number&gt; "},{"title":"Wireless Keyboard​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#wireless-keyboard-1","content":"Use tab key to traverseHit enter to activate an itemSee React Navigation and Wireless Keyboard "},{"title":"Screen Reader Pronunciations​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#screen-reader-pronunciations","content":"Some screen readers(ex. Samsung phones) will not always pronounce words like &quot;VA&quot; correctly - will sometimes read it as &quot;VAAH&quot; instead of &quot;VA&quot;. To get round this, add in the unicode \\ufeff in between letters(ex. VA -&gt; V\\ufeffA) for your translations. Text is unchanged from the users pov and the screen reader will pronounce the word correctly.  "},{"title":"Touch Targets​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#touch-targets","content":"Most common components will have it setup so that the text or wrapper will use theme.dimensions.touchableMinHeight so pressable elements have a minimum of 44 height. We can add additional height without changing the font/styles by adding additional padding where it is needed. Work with QA or design if the default minimum height for touchable targets should be bigger. You can visually view the touch target size by going to debug menu -&gt; Show Inspector -&gt; Toggle on Touchable -&gt; select the element  "},{"title":"React Native Support​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#react-native-support","content":"React Native has a variety of properties that can be set to support a11y. Most common components will already support the a11y properties listed in the link. "},{"title":"Accessibility with Integration Tests​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#accessibility-with-integration-tests","content":"We originally used the following functions to set a11y properties to better support integration test since without them we were unable to query for certain elements on the screen. testIdProps for accessibilityLabels(when the literal text needs to sound different for TalkBack or VoiceOver). a11yHintProp for accessibilityHints(additional text read by TalkBack or VoiceOver ex. Button that opens a link outside the app -&gt; &quot;This page will open in your device's browser&quot;). a11yValueProp for accessibilityValue(additional text read by TalkBack or VoiceOver ex. The first item in a list of items -&gt; &quot;Item 1, 1 of 10&quot;). Note AccessibilityState can be used as normal without a special function. "},{"title":"Notable Quirks​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#notable-quirks","content":""},{"title":"React Navigation and Wireless Keyboard​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#react-navigation-and-wireless-keyboard","content":"There has been noticeable issues using wireless keyboard with react navigation that has been tracked here. "},{"title":"Copy and Paste and how it affects Accessibility​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#copy-and-paste-and-how-it-affects-accessibility","content":"We can make text-only elements(ex. TextView) have the ability to copy and paste by adding selectable to its property. We limit the areas(ex. Secure Messaging) where we want to do this because any selectable element gets read as pressable from voice navigation apps like Voice Access and Voice Control. See related ticket here. "},{"title":"useAttachments","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useAttachments","content":"useAttachments DescriptionParams and ReturnExample Hook to add and remove attachments from the attachment list","keywords":""},{"title":"useAutoScrollToElement","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useAutoScrollToElement","content":"useAutoScrollToElement DescriptionParams and ReturnExample Hook to autoscroll to an element","keywords":""},{"title":"useAccessibilityFocus","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useAccessibilityFocus","content":"useAccessibilityFocus DescriptionParams and ReturnExample On iOS, voiceover will focus on the element closest to what the user last interacted with on the previous screen rather than what is on the top left (https://github.com/react-navigation/react-navigation/issues/7056) This hook allows you to manually set the accessibility focus on the element we know will be in the correct place.","keywords":""},{"title":"useDestructiveAlert","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useDestructiveAlert","content":"useDestructiveAlert DescriptionParams and ReturnExample Hook to create appropriate alert for a destructive event (Actionsheet for iOS, standard alert for Android) TODO: consolidate this and useShowActionSheet into a single hook","keywords":""},{"title":"useBeforeNavBackListener","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useBeforeNavBackListener","content":"useBeforeNavBackListener DescriptionParams and ReturnExample Hook to catch IOS swipes and Android lower nav back events","keywords":""},{"title":"useExternalLink","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useExternalLink","content":"useExternalLink DescriptionParams and ReturnExample Hook to display a warning that the user is leaving the app when tapping an external link","keywords":""},{"title":"useError","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useError","content":"useError DescriptionParams and ReturnExample Hook to determine if an error should be shown for a given screen id","keywords":""},{"title":"useHasCernerFacilities","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useHasCernerFacilities","content":"useHasCernerFacilities DescriptionParams and ReturnExample Returns whether user has cerner facilities or not","keywords":""},{"title":"useFontScale","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useFontScale","content":"useFontScale DescriptionParams and ReturnExample Hook to calculate based on fontScale","keywords":""},{"title":"useHeaderStyles","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useHeaderStyles","content":"useHeaderStyles DescriptionParams and ReturnExample Hook to get the current header styles in a component","keywords":""},{"title":"useIsScreenReaderEnabled","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useIsScreenReaderEnabled","content":"useIsScreenReaderEnabled DescriptionParams and ReturnExample Hook to check if the screen reader is enabled withListener - True to add a listener to live update screen reader status, default false","keywords":""},{"title":"useMessageWithSignature","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useMessageWithSignature","content":"useMessageWithSignature DescriptionParams and ReturnExample Hook to add signature to a message","keywords":""},{"title":"useOnResumeForeground","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useOnResumeForeground","content":"useOnResumeForeground DescriptionParams and ReturnExample Hook that is called when app moves from the background to the foreground","keywords":""},{"title":"usePrevious","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/usePrevious","content":"usePrevious DescriptionParams and ReturnExample Tracks previous value passed in","keywords":""},{"title":"useRouteNavigation","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useRouteNavigation","content":"useRouteNavigation DescriptionParams and ReturnExample Navigation hook to use in onPress events.","keywords":""},{"title":"useTheme","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useTheme","content":"useTheme DescriptionParams and ReturnExample Hook to get the theme in a component","keywords":""},{"title":"useTopPaddingAsHeaderStyles","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useTopPaddingAsHeaderStyles","content":"useTopPaddingAsHeaderStyles DescriptionParams and ReturnExample Hook to recreate SafeArea top padding through header styles: This is for screens that are meant to look header-less (no headerTitle, or right/left buttons), since the SafeArea top padding is already included in useHeaderStyles above. We are recreating SafeArea top padding through the header rather than just wrapping the app in a SafeArea with top padding, because the latter method causes misalignment issues between the left/right header buttons and the center title for screens with headers.","keywords":""},{"title":"useValidateMessageWithSignature","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useValidateMessageWithSignature","content":"useValidateMessageWithSignature DescriptionParams and ReturnExample Hook to validate message that could have a signature","keywords":""},{"title":"Debugging Instructions","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/DebuggingTools/DebuggingToolsInstructions","content":"","keywords":""},{"title":"Launching The Debugger​","type":1,"pageTitle":"Debugging Instructions","url":"docs/Engineering/FrontEnd/DebuggingTools/DebuggingToolsInstructions#launching-the-debugger","content":"This section will apply to all the tools. More information on the react native debugging page "},{"title":"IOS​","type":1,"pageTitle":"Debugging Instructions","url":"docs/Engineering/FrontEnd/DebuggingTools/DebuggingToolsInstructions#ios","content":"If on physical device Shake your device. If using a simulator press the shortcut ⌘D or by selecting the Shake Gesture inside the hardware menu in the simulator. On the Action Sheet select Debug with Chrome "},{"title":"Android​","type":1,"pageTitle":"Debugging Instructions","url":"docs/Engineering/FrontEnd/DebuggingTools/DebuggingToolsInstructions#android","content":"Ff on physical device Shake your device. If using a emulator press the shortcut ⌘M. On the dialog select Debug "},{"title":"Debugging Tools​","type":1,"pageTitle":"Debugging Instructions","url":"docs/Engineering/FrontEnd/DebuggingTools/DebuggingToolsInstructions#debugging-tools","content":"This sections shows the different debugging tools you can use. By default the chrome developers tools will open if no other tool is already open. important You must have only the tool you want to use open so that the debugger connects to it. "},{"title":"Chrome Developers Tools​","type":1,"pageTitle":"Debugging Instructions","url":"docs/Engineering/FrontEnd/DebuggingTools/DebuggingToolsInstructions#chrome-developers-tools","content":"Launch the debugger from the device debug menu. The React Native Debugger page will open in Chrome on url http://localhost:8081/debugger-ui/. You will know if the device is connected in the Status section. Open the developers tools. From the developers tools you can see the elements, console outputs and source files. In the element you can see the html tree. In the console you can see the redux logout messages and other console outputs. In the source under debuggerWorker you can find the javascript files that you can put breakpoints. "},{"title":"React Native Developer Tools (standalone application)​","type":1,"pageTitle":"Debugging Instructions","url":"docs/Engineering/FrontEnd/DebuggingTools/DebuggingToolsInstructions#react-native-developer-tools-standalone-application","content":"If not installed yet follow the installation instructions in the react-devtools to install the react dev tools globally on your machine not in the project. And than install standalone react native debugger app If installed or after the installation launch the react native debugger standalone app. Launch the debugger from your device. With the standalone you can see the redux messages with the redux devtools, see the element tree and console logs in the console tab. In the source tab under RNDebuggerWorker you can find the javascripts to add breakpoints to. If you right click on the redux devtools section you will get a popup to enable network calls. This will allow you to see the calls and response done to the api. "},{"title":"VSCode React Native Tools Extension​","type":1,"pageTitle":"Debugging Instructions","url":"docs/Engineering/FrontEnd/DebuggingTools/DebuggingToolsInstructions#vscode-react-native-tools-extension","content":"This extension will allow you to add breakpoints on the actual code in VSCode. If not installed install the React Native Tools extension in VSCode and follow the setup instructions in the extensions document. After the extension is installed launch the debugger. Select the Run and Debug Icon on the left explorer and click the play button on the Attach tp packager dropdown. Launch the debugger from your device. The debugger should attach to the VSCode debugger and stop on any breakpoints "},{"title":"Downtime Messages","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Downtime Messages/DowntimeMessages","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Downtime Messages","url":"docs/Engineering/FrontEnd/Downtime Messages/DowntimeMessages#overview","content":"Downtime Messages are error pages that shown to users when a known maintenance window is actively occuring for a specific feature in the app. Downtime windows are determined by upstream service providers and compiled into a single list by the back-end. The front-end checks for active downtime windows once per session durin the sync stage after login and caches the data for the remainder of the session. Downtime messages use the same display pattern as errors in code, with additional checks in the useError utility to check if a downtime error exists for a specific screen ID. Multiple features can trigger a downtime message on a single screen, e.g. claims and appeals are two separate features but display on the same page. Whether a downtime message is displayed if a subset of features on the screen are down is a business decision that varies based on feature. "},{"title":"Maintenance Window Technical Description​","type":1,"pageTitle":"Downtime Messages","url":"docs/Engineering/FrontEnd/Downtime Messages/DowntimeMessages#maintenance-window-technical-description","content":"The data returned from the back-end for a maintenance window includes a service name, and start time, and an end time. The service name is determined by the back-end and is not directly equivalent to feature names used in the front-end, so a mapping from service name to feature name as well as service name to the affected screen ID is provided in the store/api/types/Errors.ts file. Anytime a new feature with downtime is added, this mapping needs to be updated and the rest of the logic will automatically piggyback off of error logic and the checks in store/slices/errorSlice.ts:checkForDowntimeErrors() Example return data from /v0/maintenance_windows endpoint: data: [ { attributes: { service: 'direct_deposit_benefits', startTime: '2021-06-01T12:00:00.000Z', endTime: '2021-06-01T18:00:00.000Z', }, id: '1', type: 'maintenance_window', }, { attributes: { service: 'military_service_history', startTime: '2021-06-01T12:00:00.000Z', endTime: '2021-06-01T18:00:00.000Z', }, id: '2', type: 'maintenance_window', }, ] Copy "},{"title":"Downtime Messages Display​","type":1,"pageTitle":"Downtime Messages","url":"docs/Engineering/FrontEnd/Downtime Messages/DowntimeMessages#downtime-messages-display","content":"The downtime message displays as a full page error with a warning border. The template and an example are show below   "},{"title":"Fonts and Colors","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Fonts and Colors/FontsAndColors","content":"","keywords":""},{"title":"Fonts​","type":1,"pageTitle":"Fonts and Colors","url":"docs/Engineering/FrontEnd/Fonts and Colors/FontsAndColors#fonts","content":"To support the common usage of colors for each font style, defaults colors have been set for each type of font under src/styles/themes/standardTheme.ts(See buildTypography function). Colors for each font style are based on these: Light Mode Text ColorsDark Mode Text Colors "},{"title":"Colors​","type":1,"pageTitle":"Fonts and Colors","url":"docs/Engineering/FrontEnd/Fonts and Colors/FontsAndColors#colors","content":"Colors in code can be found under src/styles/themes/VAColors.ts. Any new colors should be added src/styles/themes/VAColors.ts and then used in src/styles/themes/standardTheme.ts or src/styles/themescolorSchemes.ts Some text, components(ex. snackbar), or icons use different colors than the default color set for each font. You can find the general guidelines for what colors to use for most text, components, and icons here "},{"title":"icons","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Icons/","content":"icons Icons for the VA Mobile app.","keywords":""},{"title":"Development Setup Instructions","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#prerequisites","content":"Download and install the latest versions of the following IDEs and Native Hosts:​ XCode Android Studio CocoaPods Node.js Java JDK Depending on which IDE you are using install the following:​ VSCode IntelliJ IDEA "},{"title":"ENV Variables Setup​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#env-variables-setup","content":"info If you are using z on Mac you will need to create the .zprofile and .zshrc files if they do not exists. Copy On your bash_profile or .zprofile add the following:​ JAVA_HOME variable pointing to the java installed above example: export JAVA_HOME=$(/usr/libexec/java_home -v 15.0.2) make sure you use the version you installed. NODE_OPTIONS this is to manage the node memory space: export NODE_OPTIONS=--max_old_space_size=8192 On your bashrc or .zshrc add the following:​ Android specific vars for the ANDROID_HOME, platform-tools and cmdline-tools: export ANDROID_SDK=/Users/(your user folder)/Library/Android/sdk export ANDROID_HOME=$ANDROID_SDK export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin export PATH=$PATH:$ANDROID_HOME/platform-tools The build of the app relies on a scripted creation of the .env file to run correctly. You will need to add the APP_CLIENT_SECRET var to work correctly: export APP_CLIENT_SECRET='client secret ask for this client key' The app has a demo mode. To use demo mode the app reads the DEMO_PASSWORD var. You can set this to a blank password or assign any string to it: export DEMO_PASSWORD='' info After adding the variables if you have a terminal open run source .zprofile and source .zshrc. If you do not have a terminal open than open a brand new terminal and the variables should be activated. Run which adb to make sure the android vars are working. Copy "},{"title":"Github And Cloning Repo​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#github-and-cloning-repo","content":"Verify you have access to the VAMobile repo. Make sure you have the SSH Github setup on your machine if not follow these instruction Connect With SSH. Create a folder where you wish to clone the repo to. Example (/Users/(your user folder/Workspace). Using your prefer method or prefer IDE (example cmd line, Github Desktop, VSCode, or IntelliJ) clone the VAMobile repo to the folder created in the previouse step. Verify you see a folder structure like /Users/(your user folder/Workspace/va-mobile-app/VAMobile. "},{"title":"With VSCode or IntelliJ IDEA Project Setup​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#with-vscode-or-intellij-idea-project-setup","content":"With your prefer IDE Open the /Users/(your user folder/Workspace/va-mobile-app/VAMobile folder. In the android/app add a file named google-services.json. Please ask for the data that this file contains. Open a terminal in the IDE and type yarn or yarn install and press enter to install the projects dependencies. This will create the node_modules folder. After dependencies are installed type cd ios &amp;&amp; pod install &amp;&amp; cd .. and press enter to install pods on ios (This is done once unless you installed new dependencies that need pods created). After pods are installed type yarn env:staging and press enter to setup the staging environment and create the .env file. Verify the file has the client key and demo password that is in your .zshrc file. After the env file is created type yarn bundle:ios and press enter to create the IOS bundle. After the ios bundle is done tye yarn bundle:android and press enter to create the android bundle. After the android bundle is done type yarn start to start the metro development server. "},{"title":"Android Setup​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#android-setup","content":""},{"title":"Emulator Setup:​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#emulator-setup","content":"Open Android Studios and select to a open project. On the popup window browse to /Users/(your user folder/Workspace/va-mobile-app/VAMobile/android and select the android folder from the VAMobile project and press open. After opening the android project you will need to sync the project with gradle. Go to File -&gt; Sync Project With Gradle Files. Go to Android Studios -&gt; Preferences -&gt; Build, Execution, Deployment -&gt; Build Tools -&gt; Gradle and verify that the Gradle JDK is pointing to /Applications/Android Studio.app/Contents/jre/Contents/Home Add a test emulator in Android Studios Tools -&gt; AVD Manager. Follow the instructions on Android Emulator Setup to add a new virtual device. After adding the new virtual device select it from the top device menu. Build the project. Launch Virtual Device from Android studio. Verify the Virtual Device launches and Android Studios installs and opens the VAMobile app on the device. "},{"title":"Physical Device Setup:​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#physical-device-setup","content":"Open Android Studios and select to a open project. On the popup window browse to /Users/(your user folder/Workspace/va-mobile-app/VAMobile/android and select the android folder from the VAMobile project and press open. After opening the android project you will need to sync the project with gradle. Go to File -&gt; Sync Project With Gradle Files. Go to Android Studios -&gt; Preferences -&gt; Build, Execution, Deployment -&gt; Build Tools -&gt; Gradle and verify that the Gradle JDK is pointing to /Applications/Android Studio.app/Contents/jre/Contents/Home Turn on developer mode for the phone. See React Native Instructions Connect phone with a usb to the host machine. Open a Terminal and type adb devices. You should see an ouput like so. Type adb -s &lt;device name&gt; reverse tcp:8081 tcp:8081. Select the physical device from the top device menu. Build the project. Launch Virtual Device from Android studio. Verify Android Studios installs and opens the VAMobile app on the device. "},{"title":"iPhone Setup​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#iphone-setup","content":""},{"title":"Simulator Setup​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#simulator-setup","content":"Open Xcode and select to open project or file. On the popup window browse and select the ios folder on the VAMobile project. Go to Xcode -&gt; Preference and under account verify you are signed in with the apple id which has the US Department of Veterans Affairs (VA) developer account. Select the project icon on the left hand explorer and verify you have the right signing. Team should be US Department of Veterans Affairs (VA) Select a simulator from the list in Xcode. Build project on Xcode. Launch simulator by pressing the play button. "},{"title":"Physical Device​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#physical-device","content":"Open Xcode and select to open project or file. On the popup window browse and select the ios folder on the VAMobile project. Go to Xcode -&gt; Preference and under account verify you are signed in with the apple id which has the US Department of Veterans Affairs (VA) developer account. Select the project icon on the left hand explorer and verify you have the right signing. Team should be US Department of Veterans Affairs (VA). Connect the iPhone via USB to the host machine. See React Native Instructions Accept permissions on your iPhone from Xcode to allow the developers option. Select a device from the list in Xcode. Build project on Xcode. Launch device by pressing the play button. "},{"title":"Checkbox","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Icons/checkboxIcons","content":"Checkbox info These icons are located under VaMobile/src/components/VAIcon/svgs/checkBox Name\tIcon\tFile NameCheckbox Empty checkBoxEmpty.svg Checkbox Error checkBoxError.svg Checkbox Filled checkBoxFilled.svg Checkbox Intermediate checkBoxIntermediate.svg","keywords":""},{"title":"Common","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Icons/commonIcons","content":"Common info These icons are located under VaMobile/src/components/VAIcon/svgs Name\tIcon\tFile LocationAdd add.svg Building buildingSolid.svg Bullet bullet.svg Check Mark check-mark.svg Check Mark Circle checkmark-in-circle.svg Chevron Down svgs/chevron-down.svg Chevron Left svgs/chevron-left.svg Chevron Right chevron-right.svg Chevron Up svgs/chevron-up.svg Compose compose.svg Ellipsis ellipsisSolid.svg Exclamation Triangle exclamationTriangleSolid.svg Folder folder-solid.svg Inbox inbox-solid.svg Info info-circle.svg Medical Folder folder-medical-solid.svg Minus minus.svg Paper Clip paperClip.svg Phone Solid phoneSolid.svg Question Mark questionMark.svg Remove remove.svg Reply reply.svg Trash trash-solid.svg Truck truck.svg Unread unread_icon.svg Video Camera videoCamera.svg","keywords":""},{"title":"DOD Branch","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Icons/dodIcons","content":"DOD Branch info These icons are located under VaMobile/src/components/VAIcon/svgs/dodBranch Name\tIcon\tFile NameMarines marine.svg Air Force air-force.svg Navy navy.svg Army army.svg Coast Guard coast-guard.svg","keywords":""},{"title":"Links","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Icons/linksIcons","content":"Links info These icons are located under VaMobile/src/components/VAIcon/svgs/links Name\tIcon\tFile NameCalendar calendar.svg Chat chat.svg Directions directions.svg External Link circle_external_link.svg Phone phone.svg Phone TTY phone-tty.svg Right Arrow Blue Circle right-arrow-blue-circle.svg Text text.svg","keywords":""},{"title":"Logo","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Icons/logoIcons","content":"Logo info These icons are located under VaMobile/src/components/VAIcon/svgs/vaParentLogo Name\tIcon\tFile NameVA Logo logo.svg","keywords":""},{"title":"Navigation","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Icons/navIcons","content":"Navigation info These icons are located under VaMobile/src/components/VAIcon/svgs/navIcon Name\tIcon\tFile NameBenefits Selected benefitsSelected.svg Benefits Unselected benefitsUnselected.svg Health Selected healthSelected.svg Health Unselected healthUnselected.svg Home Selected homeSelected.svg Home Unselected homeUnselected.svg Payments Selected paymentsSelected.svg Payments Unselected paymentsUnselected.svg Profile Selected profileSelected.svg Profile Unselected profileUnselected.svg","keywords":""},{"title":"Radio Button","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Icons/radioBtnIcons","content":"Radio Button info These icons are located under VaMobile/src/components/VAIcon/svgs/radio Name\tIcon\tFile NameRadio Disabled radioDisabled.svg Radio Empty radioEmpty.svg Radio Filled radioFilled.svg","keywords":""},{"title":"Webview","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Icons/webviewIcons","content":"Webview info These icons are located under VaMobile/src/components/VAIcon/svgs/webView Name\tIcon\tFile NameChevron Left chevron-left-solid.svg Chevron Right chevron-right-solid.svg External Link external-link-alt-solid.svg Lock lock-solid.svg Redo redo-solid.svg","keywords":""},{"title":"Translations","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Internationalization/Translations","content":"","keywords":""},{"title":"Translation Files​","type":1,"pageTitle":"Translations","url":"docs/Engineering/FrontEnd/Internationalization/Translations#translation-files","content":"All visible copy in the app should be located in language specific translation files to support the ability of the app to decide client side which language it will display. Translations are stored in JSON files located under src/translations/&lt;language&gt; and split into separate files by namespace. "},{"title":"Files and Namespaces​","type":1,"pageTitle":"Translations","url":"docs/Engineering/FrontEnd/Internationalization/Translations#files-and-namespaces","content":"Within a language directory, the translation files are split into files for each namespace representing different sections of the app. There is also a common namespace used for strings used throughout the app like &quot;Save&quot; or &quot;Cancel&quot;. "},{"title":"Translation Keys​","type":1,"pageTitle":"Translations","url":"docs/Engineering/FrontEnd/Internationalization/Translations#translation-keys","content":"Strings are identified in the app through a key associated with the value in their language file. This key must be consistent across all language files for their respective values, the key itself is not translated. &quot;claimPhase.details.phaseFive&quot;: &quot;Complete&quot;, This is an example of a string in the claims namespace. The key is claimPhase.details.phaseFive and the translated value is Complete. "},{"title":"Adding a New String​","type":1,"pageTitle":"Translations","url":"docs/Engineering/FrontEnd/Internationalization/Translations#adding-a-new-string","content":"If it is specific to a screen or will only be used within certain parts of the app (for example, &quot;Take photos and upload to your claim&quot;) it should be placed in the file for the namespace associated with that copy.If it is used in a common component or will be used across the app in nonspecific contexts (for example &quot;confirm&quot; or &quot;refreshes the page&quot;) then it should go in the common namespace.Maintain keys in alphabetical order within the JSON file. "},{"title":"Using Translations​","type":1,"pageTitle":"Translations","url":"docs/Engineering/FrontEnd/Internationalization/Translations#using-translations","content":"Translation values are accessed via the useTranslation hook. This hook creates a translation function for a namespace or list of namespaces provided as an argument. const { t } = useTranslation(NAMESPACE.COMMON) Copy For basic usage, the translation function takes in the desired key as the only argument and will resolve to the display value associated with that key. t('claimDetails.needHelp') Copy This value can be used like any other string, either placed directly into a TextView component: &lt;TextView variant=&quot;MobileBodyBold&quot; &gt; {t('claimDetails.needHelp')} &lt;/TextView&gt; Copy Or passed in as a prop to a component that will decide where and how to display it: &lt;VAButton label={t('fileUpload.submit')} testID={t('fileUpload.submit')} buttonType={ButtonTypesConstants.buttonPrimary} a11yHint={t('fileUpload.uploadFileA11yHint')} /&gt; Copy "},{"title":"Strings With Parameters​","type":1,"pageTitle":"Translations","url":"docs/Engineering/FrontEnd/Internationalization/Translations#strings-with-parameters","content":"Sometimes text will not be static and includes values that are user, code, or API driven and cannot be added to the translation file itself. In the translated string in the translation files, the {{}} notation provides a spot in the string to place dynamic values. &quot;listPosition&quot;: &quot;{{position}} of {{total}}&quot;, Copy This allows this translation to take in two values, position and total that will be placed in the translated value. To use this with our translation function: t('listPosition', { position: myPosition, total: totalEntries }) Copy "},{"title":"Multiple Namespaces​","type":1,"pageTitle":"Translations","url":"docs/Engineering/FrontEnd/Internationalization/Translations#multiple-namespaces","content":"To use multiple namespaces, either create another function with the desired namespace const { t } = useTranslation(NAMESPACE.COMMON) const { t: tCommon } = useTranslation(NAMESPACE.COMMON) Copy or create one translation function for multiple namespaces where the usage will be prefixed with the desired namespace const { t } = useTranslation([NAMESPACE.COMMON, NAMESPACE.HEALTH]) const myCommonString = t('health:key.in.health') Copy "},{"title":"Redux Toolkit Overview","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ReduxToolkit/Overview/ReduxToolkitOverview","content":"","keywords":""},{"title":"Purpose​","type":1,"pageTitle":"Redux Toolkit Overview","url":"docs/Engineering/FrontEnd/ReduxToolkit/Overview/ReduxToolkitOverview#purpose","content":"The Redux Toolkit package was built with the intention on being the standard way of writing Redux logic. It was mainly created to help address the three common concerns of Redux. &quot;Configuring a Redux store is too complicated&quot;&quot;I have to add a lot of packages to get Redux to do anything useful&quot;&quot;Redux requires too much boilerplate code&quot; "},{"title":"Benefits​","type":1,"pageTitle":"Redux Toolkit Overview","url":"docs/Engineering/FrontEnd/ReduxToolkit/Overview/ReduxToolkitOverview#benefits","content":"Some benefits of using Redux Toolkit are: Simple : Includes utilities to simplify common use cases like store setup, creating reducers, immutable update logic, and more.Opinionated : Provides good defaults for store setup out of the box, and includes the most commonly used Redux addons built-in.Powerful : Takes inspiration from libraries like Immer and Autodux to let you write &quot;mutative&quot; immutable update logic, and even create entire &quot;slices&quot; of state automatically.Effective : Lets you focus on the core logic your app needs, so you can do more work with less code. More information on the purpose and installation of Redux Toolkit can be found on their page. "},{"title":"Add a New Feature State","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit","content":"","keywords":""},{"title":"Intro​","type":1,"pageTitle":"Add a New Feature State","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit#intro","content":"This tutorial will consists of adding a new Redux state for the military service feature. This will be the same steps for adding any new Redux state to the VA mobile app. "},{"title":"Creating the Slice File​","type":1,"pageTitle":"Add a New Feature State","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit#creating-the-slice-file","content":"Right click the slice folder (src/store/slice) and select new file. Enter the name of the file [your file name]Slice.ts. Example: (militaryServiceSlice.ts) Add the Redux toolkit import to the created slice file. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' Copy Add the Redux initial state. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } Copy Create the Redux slice and add the initial state created in the previouse step to the create slice function. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { }, }) Copy Add the reducers that will be updating the state. The name that you give to the reducer will be the same name the action creator and type is going to use typescript will infere that name. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { dispatchStartGetHistory: (state) =&gt; { state.loading = true }, dispatchFinishGetHistory: (state, action: PayloadAction&lt;{ serviceHistory?: api.ServiceHistoryData; error?: Error }&gt;) =&gt; { const { serviceHistory, error } = action.payload const history = serviceHistory || state.serviceHistory const latestHistory = max(history, (historyItem) =&gt; { return getDateFromString(historyItem.endDate) }) as ServiceData return { ...state, error, mostRecentBranch: latestHistory?.branchOfService, serviceHistory: history, loading: false, needsDataLoad: !!error, preloadComplete: true, } }, }, }) Copy info The PayloadAction param only takes one value if you need to pass more than one param use an object as above. Also the reducer functions created inside the slice uses the Immer package. Which allows you to write mutated code as the dispatchStartGetHistory reducer function above. You can also return an immutable object as the dispatchFinishGetHistory function above. Here is more information on what you can do with immer inside the reducer functions Redux Immer Page Export the reducer and actions to be used in other files or async Redux function. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { dispatchStartGetHistory: (state) =&gt; { state.loading = true }, dispatchFinishGetHistory: (state, action: PayloadAction&lt;{ serviceHistory?: api.ServiceHistoryData; error?: Error }&gt;) =&gt; { const { serviceHistory, error } = action.payload const history = serviceHistory || state.serviceHistory const latestHistory = max(history, (historyItem) =&gt; { return getDateFromString(historyItem.endDate) }) as ServiceData return { ...state, error, mostRecentBranch: latestHistory?.branchOfService, serviceHistory: history, loading: false, needsDataLoad: !!error, preloadComplete: true, } }, }, }) export const { dispatchFinishGetHistory, dispatchMilitaryHistoryLogout, dispatchStartGetHistory } = militaryServiceSlice.actions export default militaryServiceSlice.reducer Copy Add the async function that will fetch the data from the server and call the actions. Here we are adding the getServiceHistory async thunk function. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } /** * Redux action to get service history for user */ export const getServiceHistory = (screenID?: ScreenIDTypes): AppThunk =&gt; async (dispatch) =&gt; { dispatch(dispatchClearErrors(screenID)) dispatch(dispatchSetTryAgainFunction(() =&gt; dispatch(getServiceHistory(screenID)))) try { dispatch(dispatchStartGetHistory()) const mshData = await api.get&lt;api.MilitaryServiceHistoryData&gt;('/v0/military-service-history') dispatch(dispatchFinishGetHistory({ serviceHistory: mshData?.data.attributes.serviceHistory })) } catch (error) { if (isErrorObject(error)) { dispatch(dispatchFinishGetHistory({ error })) dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID })) } } } const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { dispatchStartGetHistory: (state) =&gt; { state.loading = true }, dispatchFinishGetHistory: (state, action: PayloadAction&lt;{ serviceHistory?: api.ServiceHistoryData; error?: Error }&gt;) =&gt; { const { serviceHistory, error } = action.payload const history = serviceHistory || state.serviceHistory const latestHistory = max(history, (historyItem) =&gt; { return getDateFromString(historyItem.endDate) }) as ServiceData return { ...state, error, mostRecentBranch: latestHistory?.branchOfService, serviceHistory: history, loading: false, needsDataLoad: !!error, preloadComplete: true, } }, }, }) export const { dispatchFinishGetHistory, dispatchMilitaryHistoryLogout, dispatchStartGetHistory } = militaryServiceSlice.actions export default militaryServiceSlice.reducer Copy info The getServiceHistory is a thunk async function which will give you two params (dispatch, getState). The dispatch is what will be use to call the actions. The getState is if you need to pull any value from the current Redux store state. "},{"title":"Adding the Exported Reducer to the Store​","type":1,"pageTitle":"Add a New Feature State","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit#adding-the-exported-reducer-to-the-store","content":"Open the store file (src/store/index.ts) and import the exported reducer from the created slice above. And add it to the reducer object in the configureStore function. /src/store/index.ts import { AnyAction, ThunkAction, configureStore } from '@reduxjs/toolkit' import accessabilityReducer from 'store/slices/accessibilitySlice' import militaryServiceReducer from 'store/slices/militaryServiceSlice' // Creates the store const store = configureStore({ reducer: { accessibility: accessabilityReducer, militaryService: militaryServiceReducer, }, middleware: (getDefaultMiddleWare) =&gt; getDefaultMiddleWare({ serializableCheck: false }).concat(logger), devTools: process.env.NODE_ENV !== 'production', }) //creates the typed dispatch to work with the thunk actions export type AppDispatch = typeof store.dispatch // creates the types root state export type RootState = ReturnType&lt;typeof store.getState&gt; // creates the types thunk action creator export type AppThunk&lt;ReturnType = Promise&lt;void&gt;&gt; = ThunkAction&lt;ReturnType, RootState, unknown, AnyAction&gt; export default store Copy "},{"title":"Adding to the Slices Folder Index.ts File.​","type":1,"pageTitle":"Add a New Feature State","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit#adding-to-the-slices-folder-indexts-file","content":"Open the slices folder index.ts file (src/store/slices/index.ts). Here you are going to add the initialState export and a export everything for the slice created above. /src/store/index.ts import { RootState } from 'store' import { initialAccessibilityState } from 'store/slices/accessibilitySlice' import { initialMilitaryServiceState } from 'store/slices/militaryServiceSlice' export * from './accessibilitySlice' export * from './militaryServiceSlice' export const InitialState: RootState = { militaryService: initialMilitaryServiceState, accessibility: initialAccessibilityState, } Copy "},{"title":"Using the Slice In a Component​","type":1,"pageTitle":"Add a New Feature State","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit#using-the-slice-in-a-component","content":"This section will show you how to retrieve the state and dispatch any thunk function in a component. src/screens/ProfileScreen/MilitaryInformationScreen/MilitaryInformationScreen.tsx import { MilitaryServiceState, getServiceHistory } from 'store/slices/militaryServiceSlice' import { RootState } from 'store' import { useAppDispatch } from 'utils/hooks' import { useSelector } from 'react-redux' const MilitaryInformationScreen: FC = () =&gt; { const dispatch = useAppDispatch() const { serviceHistory, loading, needsDataLoad } = useSelector&lt;RootState, MilitaryServiceState&gt;((s) =&gt; s.militaryService) useEffect(() =&gt; { if (needsDataLoad &amp;&amp; militaryInfoAuthorization &amp;&amp; mhNotInDowntime) { dispatch(getServiceHistory(ScreenIDTypesConstants.MILITARY_INFORMATION_SCREEN_ID)) } }, [dispatch, needsDataLoad, militaryInfoAuthorization, mhNotInDowntime]) const historyItems: Array&lt;DefaultListItemObj&gt; = map(serviceHistory, (service: ServiceData) =&gt; { const branch = t('militaryInformation.branch', { branch: service.branchOfService }) const textLines: Array&lt;TextLine&gt; = [ { text: branch, variant: 'MobileBodyBold', color: 'primaryTitle', }, { text: t('militaryInformation.history', { begin: service.formattedBeginDate, end: service.formattedEndDate }), }, ] return { textLines, testId: `${branch} ${t('militaryInformation.historyA11yLabel', { begin: service.formattedBeginDate, end: service.formattedEndDate, })}`, } }) return ( &lt;VAScrollView {...testIdProps('Military-Information-page')}&gt; &lt;Box mb={theme.dimensions.standardMarginBetween}&gt; &lt;DefaultList items={historyItems} title={t('militaryInformation.periodOfService')} /&gt; &lt;/Box&gt; &lt;TextView {...linkProps}&gt;{t('militaryInformation.incorrectServiceInfo')}&lt;/TextView&gt; &lt;/VAScrollView&gt; ) } export default MilitaryInformationScreen Copy info To dispatch an action in a component use the useAppDispatch hook from the src/utils/hook.tsx file. To get the current state value for the slice use useSelector function from Redux as shown above. "},{"title":"Updating or Adding to an Existing Feature State","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature","content":"","keywords":""},{"title":"Intro​","type":1,"pageTitle":"Updating or Adding to an Existing Feature State","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature#intro","content":"This tutorial will consists of adding state to an existing feature state. "},{"title":"Adding a New State​","type":1,"pageTitle":"Updating or Adding to an Existing Feature State","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature#adding-a-new-state","content":"Here we are going to add a new reducer to clear the data on logout to the existing militaryServiceSlice.ts. Current Slice Code /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' import * as api from 'store/api' import { AppThunk } from 'store' import { ScreenIDTypes, ServiceData } from '../api' import { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errorSlice' import { getCommonErrorFromAPIError } from 'utils/errors' import { getDateFromString } from 'utils/formattingUtils' import { isErrorObject } from 'utils/common' import { max } from 'underscore' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } /** * Redux action to get service history for user */ export const getServiceHistory = (screenID?: ScreenIDTypes): AppThunk =&gt; async (dispatch) =&gt; { dispatch(dispatchClearErrors(screenID)) dispatch(dispatchSetTryAgainFunction(() =&gt; dispatch(getServiceHistory(screenID)))) try { dispatch(dispatchStartGetHistory()) const mshData = await api.get&lt;api.MilitaryServiceHistoryData&gt;('/v0/military-service-history') dispatch(dispatchFinishGetHistory({ serviceHistory: mshData?.data.attributes.serviceHistory })) } catch (error) { if (isErrorObject(error)) { dispatch(dispatchFinishGetHistory({ error })) dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID })) } } } /** * Redux slice that will create the actions and reducers */ const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { dispatchStartGetHistory: (state) =&gt; { state.loading = true }, dispatchFinishGetHistory: (state, action: PayloadAction&lt;{ serviceHistory?: api.ServiceHistoryData; error?: Error }&gt;) =&gt; { const { serviceHistory, error } = action.payload const history = serviceHistory || state.serviceHistory const latestHistory = max(history, (historyItem) =&gt; { return getDateFromString(historyItem.endDate) }) as ServiceData return { ...state, error, mostRecentBranch: latestHistory?.branchOfService, serviceHistory: history, loading: false, needsDataLoad: !!error, preloadComplete: true, } }, }, }) export const { dispatchFinishGetHistory, dispatchStartGetHistory } = militaryServiceSlice.actions export default militaryServiceSlice.reducer Copy Code after adding the logout reducer Here we added the dispatchMilitaryHistoryLogout reducer function which we will extract an action to be dispatch on the logout Redux thunk. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' import * as api from 'store/api' import { AppThunk } from 'store' import { ScreenIDTypes, ServiceData } from '../api' import { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errorSlice' import { getCommonErrorFromAPIError } from 'utils/errors' import { getDateFromString } from 'utils/formattingUtils' import { isErrorObject } from 'utils/common' import { max } from 'underscore' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } /** * Redux action to get service history for user */ export const getServiceHistory = (screenID?: ScreenIDTypes): AppThunk =&gt; async (dispatch) =&gt; { dispatch(dispatchClearErrors(screenID)) dispatch(dispatchSetTryAgainFunction(() =&gt; dispatch(getServiceHistory(screenID)))) try { dispatch(dispatchStartGetHistory()) const mshData = await api.get&lt;api.MilitaryServiceHistoryData&gt;('/v0/military-service-history') dispatch(dispatchFinishGetHistory({ serviceHistory: mshData?.data.attributes.serviceHistory })) } catch (error) { if (isErrorObject(error)) { dispatch(dispatchFinishGetHistory({ error })) dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID })) } } } /** * Redux slice that will create the actions and reducers */ const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { dispatchStartGetHistory: (state) =&gt; { state.loading = true }, dispatchFinishGetHistory: (state, action: PayloadAction&lt;{ serviceHistory?: api.ServiceHistoryData; error?: Error }&gt;) =&gt; { const { serviceHistory, error } = action.payload const history = serviceHistory || state.serviceHistory const latestHistory = max(history, (historyItem) =&gt; { return getDateFromString(historyItem.endDate) }) as ServiceData return { ...state, error, mostRecentBranch: latestHistory?.branchOfService, serviceHistory: history, loading: false, needsDataLoad: !!error, preloadComplete: true, } }, dispatchMilitaryHistoryLogout: () =&gt; { return { ...initialMilitaryServiceState, } }, }, }) export const { dispatchFinishGetHistory, dispatchMilitaryHistoryLogout, dispatchStartGetHistory } = militaryServiceSlice.actions export default militaryServiceSlice.reducer Copy That is all it takes to add a new state to an existing slice file. Now the dispatchMilitaryHistoryLogout could be imported to any file and be dispatched. "},{"title":"VA App and Redux Toolkit","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ReduxToolkit/Overview/VAAppAndReduxToolkit","content":"","keywords":""},{"title":"Why Redux Toolkit​","type":1,"pageTitle":"VA App and Redux Toolkit","url":"docs/Engineering/FrontEnd/ReduxToolkit/Overview/VAAppAndReduxToolkit#why-redux-toolkit","content":"The reasons the VA mobile team decided to move to Redux toolkit from the regular Redux implementation are: Redux Toolkit is the new modern way of writing Redux and is the new standard which most Redux's guides and documentation are moving to or suggesting to use.The standard Redux has too much boiler plate and to add a new state you have to modify or add files in many different locations. With Redux Toolkit everything is in one file.With Redux Toolkit we have devtools for debugging and the thunk middleware out of the box without extra configurations. "},{"title":"VA App Redux Architectures​","type":1,"pageTitle":"VA App and Redux Toolkit","url":"docs/Engineering/FrontEnd/ReduxToolkit/Overview/VAAppAndReduxToolkit#va-app-redux-architectures","content":"This section will show the difference from using the standard Redux and Redux Toolkit in our VA App. We will be using the disability rating as an example. "},{"title":"With Standard Redux (older implementation)​","type":1,"pageTitle":"VA App and Redux Toolkit","url":"docs/Engineering/FrontEnd/ReduxToolkit/Overview/VAAppAndReduxToolkit#with-standard-redux-older-implementation","content":"Folder Structure: With the standard Redux you would need three folders actions, reducers, and types. To add a new state you would have to add a file in each of those different sections.  Actions Folder: Here is where the actions file would go. The action file would define the sync and async actions for a feature. Also the created file would need to be added to the actions index file.  &quot;/src/store/actions/disabilityRating.ts import * as api from 'store/api' import { AsyncReduxAction, ReduxAction } from 'store/types' import { RatingData, ScreenIDTypes } from '../api' import { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errors' import { getCommonErrorFromAPIError } from 'utils/errors' import { isErrorObject } from 'utils/common' /** * Redux action to start disability ratings fetch * * @returns ReduxAction */ const dispatchStartGetRating = (): ReduxAction =&gt; { return { type: 'DISABILITY_RATING_START_GET_RATING', payload: {}, } } /** * Redux action to set disability ratings data or error after fetch * * @returns ReduxAction */ const dispatchFinishGetRating = (ratingData?: RatingData, error?: Error): ReduxAction =&gt; { return { type: 'DISABILITY_RATING_FINISH_GET_RATING', payload: { ratingData, error, }, } } /** * Redux action to reset disability ratings on logout * * @returns ReduxAction */ export const dispatchDisabilityRatingLogout = (): ReduxAction =&gt; { return { type: 'DISABILITY_RATING_ON_LOGOUT', payload: {}, } } /** * Redux action to get the users disability ratings * * @returns AsyncReduxAction */ export const getDisabilityRating = (screenID?: ScreenIDTypes): AsyncReduxAction =&gt; { return async (dispatch, _getState): Promise&lt;void&gt; =&gt; { dispatch(dispatchClearErrors(screenID)) dispatch(dispatchSetTryAgainFunction(() =&gt; dispatch(getDisabilityRating(screenID)))) try { dispatch(dispatchStartGetRating()) const ratingData = await api.get&lt;api.DisabilityRatingData&gt;('/v0/disability-rating') dispatch(dispatchFinishGetRating(ratingData?.data.attributes)) } catch (err) { if (isErrorObject(err)) { dispatch(dispatchFinishGetRating(undefined, err)) dispatch(dispatchSetError(getCommonErrorFromAPIError(err), screenID)) } } } } Copy &quot;/src/store/actions/index.ts export * from './auth' export * from './directDeposit' export * from './disabilityRating' Copy Reducers Folder: Here is where the reducer file would go. The reducer file would define the initial state and reducer functions for a feature. Also the created file would need to be added to the reducers index file.  &quot;/src/store/reducers/disabilityRating.ts import { RatingData } from 'store/api' import createReducer from './createReducer' export type DisabilityRatingState = { ratingData?: RatingData error?: Error loading: boolean needsDataLoad: boolean preloadComplete: boolean } export const initialDisabilityRatingState: DisabilityRatingState = { loading: false, needsDataLoad: true, preloadComplete: false, } export default createReducer&lt;DisabilityRatingState&gt;(initialDisabilityRatingState, { DISABILITY_RATING_START_GET_RATING: (state, payload) =&gt; { return { ...state, ...payload, loading: true, } }, DISABILITY_RATING_FINISH_GET_RATING: (state, { ratingData, error }) =&gt; { return { ...state, error, ratingData, needsDataLoad: error ? true : false, preloadComplete: true, loading: false, } }, DISABILITY_RATING_ON_LOGOUT: (_state, _payload) =&gt; { return { ...initialDisabilityRatingState, } }, }) Copy &quot;/src/store/reducers/index.ts import { combineReducers } from 'redux' import { ReduxAction } from 'store/types' import auth, { AuthState, initialAuthState } from './auth' import directDeposit, { DirectDepositState, initialDirectDepositState } from './directDeposit' import disabilityRating, { DisabilityRatingState, initialDisabilityRatingState } from './disabilityRating' export * from './auth' export * from './directDeposit' export * from './disabilityRating' export interface StoreState { auth: AuthState directDeposit: DirectDepositState disabilityRating: DisabilityRatingState } export const InitialState: StoreState = { auth: initialAuthState, directDeposit: initialDirectDepositState, disabilityRating: initialDisabilityRatingState, } const allReducers = combineReducers&lt;StoreState, ReduxAction&gt;({ auth, directDeposit, disabilityRating, }) export default allReducers Copy Types Folder: Here is where the type file would go. The type file would define the action's payload type and action creators definitions. Also the created file would need to be added to the types index file.  &quot;/src/store/types/disabilityRating.ts import { ActionDef, EmptyPayload } from './index' import { RatingData } from 'store/api' /** * Redux payload for DISABILITY_RATING_START_GET_RATING action */ export type DisabilityRatingStartGetRatingPayload = Record&lt;string, unknown&gt; /** * Redux payload for DISABILITY_RATING_FINISH_GET_RATING action */ export type DisabilityRatingPayload = { ratingData?: RatingData error?: Error } /** * All disability rating actions */ export interface DisabilityRatingActions { /** Redux action to signify the initial start of getting the disablity rating*/ DISABILITY_RATING_START_GET_RATING: ActionDef&lt;'DISABILITY_RATING_START_GET_RATING', DisabilityRatingPayload&gt; /** Redux action to signify that the disability rating is being retrieved */ DISABILITY_RATING_FINISH_GET_RATING: ActionDef&lt;'DISABILITY_RATING_FINISH_GET_RATING', DisabilityRatingPayload&gt; /** Redux action to clear disability rating data on logout **/ DISABILITY_RATING_ON_LOGOUT: ActionDef&lt;'DISABILITY_RATING_ON_LOGOUT', EmptyPayload&gt; } Copy &quot;/src/store/types/index.ts import { ThunkAction } from 'redux-thunk' import { AuthActions } from './auth' import { DirectDepositActions } from './directDeposit' import { DisabilityRatingActions } from './disabilityRating' export * from './auth' export * from './directDeposit' export * from './disabilityRating' type ActObjs&lt;T extends keyof AllActionDefs&gt; = AllActionDefs[T] type ActObjsPayload&lt;T extends keyof AllActionDefs&gt; = AllActionDefs[T]['payload'] export interface ActionDef&lt;T extends string, P extends ActObjsPayload&lt;AllActionTypes&gt;&gt; { type: T payload: P } export type EmptyPayload = unknown export type StoreStateFn = () =&gt; StoreState export type AllActionDefs = AuthActions &amp; DirectDepositActions &amp; DisabilityRatingActions type AllActionTypes = keyof AllActionDefs export type ReduxAction = ActObjs&lt;AllActionTypes&gt; export type AsyncReduxAction = ThunkAction&lt;Promise&lt;void&gt;, StoreState, undefined, ReduxAction&gt; Copy Store File: Here is where the store would be configured. &quot;/src/store/index.tsx import { ReduxAction } from './types' import { Store, applyMiddleware, createStore } from 'redux' import logger from 'redux-logger' import rootReducer, { StoreState } from './reducers' import thunk from 'redux-thunk' export * from './reducers' export * from './actions' export * from './types' const configureStore = (state?: StoreState): Store&lt;StoreState, ReduxAction&gt; =&gt; { const middleware = applyMiddleware(thunk, logger) return createStore(rootReducer, state, middleware) as Store&lt;StoreState, ReduxAction&gt; } export default configureStore Copy "},{"title":"With Redux Toolkit (current implementation)​","type":1,"pageTitle":"VA App and Redux Toolkit","url":"docs/Engineering/FrontEnd/ReduxToolkit/Overview/VAAppAndReduxToolkit#with-redux-toolkit-current-implementation","content":"Folder Structure: With Redux Toolkit you would need one folder slices. To add a new state you would have to add one file to the slices folder.  Slices Folder: Here is where you will define your slice file. This file is where everything will be added. With redux toolkit actions creators, types and reducers are created for you in the slice. Also the creted file needs to be added to the slices index file.  &quot;/src/store/slices/disabilityRatingSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' import * as api from 'store/api' import { AppThunk } from 'store' import { RatingData, ScreenIDTypes } from 'store/api' import { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errorSlice' import { getCommonErrorFromAPIError } from 'utils/errors' import { isErrorObject } from 'utils/common' export type DisabilityRatingState = { ratingData?: RatingData error?: Error loading: boolean needsDataLoad: boolean preloadComplete: boolean } export const initialDisabilityRatingState: DisabilityRatingState = { loading: false, needsDataLoad: true, preloadComplete: false, } /** * Redux action to get the users disability ratings */ export const getDisabilityRating = (screenID?: ScreenIDTypes): AppThunk =&gt; async (dispatch) =&gt; { dispatch(dispatchClearErrors(screenID)) dispatch(dispatchSetTryAgainFunction(() =&gt; dispatch(getDisabilityRating(screenID)))) try { dispatch(dispatchStartGetRating()) const ratingData = await api.get&lt;api.DisabilityRatingData&gt;('/v0/disability-rating') dispatch(dispatchFinishGetRating({ ratingData: ratingData?.data.attributes })) } catch (error) { if (isErrorObject(error)) { dispatch(dispatchFinishGetRating({ error })) dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID })) } } } /** * Redux slice that will create the actions and reducers */ const disabilitRatingSlice = createSlice({ name: 'disabilityRating', initialState: initialDisabilityRatingState, reducers: { dispatchStartGetRating: (state) =&gt; { state.loading = true }, dispatchFinishGetRating: (state, action: PayloadAction&lt;{ ratingData?: RatingData; error?: Error }&gt;) =&gt; { const { ratingData, error } = action.payload state.ratingData = ratingData state.error = error state.needsDataLoad = error ? true : false state.preloadComplete = true state.loading = false }, dispatchDisabilityRatingLogout: () =&gt; { return { ...initialDisabilityRatingState } }, }, }) export const { dispatchDisabilityRatingLogout, dispatchFinishGetRating, dispatchStartGetRating } = disabilitRatingSlice.actions export default disabilitRatingSlice.reducer Copy &quot;/src/store/slices/index.tsx import { RootState } from 'store' import { initialAuthState } from 'store/slices/authSlice' import { initialDirectDepositState } from 'store/slices/directDepositSlice' import { initialDisabilityRatingState } from 'store/slices/disabilityRatingSlice' export * from './authSlice' export * from './directDepositSlice' export * from './disabilityRatingSlice' export const InitialState: RootState = { auth: initialAuthState, directDeposit: initialDirectDepositState, disabilityRating: initialDisabilityRatingState, } Copy Store File: Here is where the store would be configured. &quot;/src/store/index.tsx import { AnyAction, ThunkAction, configureStore } from '@reduxjs/toolkit' import authReducer from 'store/slices/authSlice' import directDepositReducer from 'store/slices/directDepositSlice' import disabilityRatingReducer from 'store/slices/disabilityRatingSlice' // Creates the store const store = configureStore({ reducer: { auth: authReducer, directDeposit: directDepositReducer, disabilityRating: disabilityRatingReducer, }, middleware: (getDefaultMiddleWare) =&gt; getDefaultMiddleWare({ serializableCheck: false }).concat(logger), devTools: process.env.NODE_ENV !== 'production', }) //creates the typed dispatch to work with the thunk actions export type AppDispatch = typeof store.dispatch // creates the types root state export type RootState = ReturnType&lt;typeof store.getState&gt; // creates the types thunk action creator export type AppThunk&lt;ReturnType = Promise&lt;void&gt;&gt; = ThunkAction&lt;ReturnType, RootState, unknown, AnyAction&gt; Copy "},{"title":"Unit Tests","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Testing/UnitTesting","content":"","keywords":""},{"title":"Frameworks​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#frameworks","content":"Our tests primarily use Jest and React Test Renderer "},{"title":"What to Test​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#what-to-test","content":"All React components including common components and screens should have an associated unit test. The test should cover the visible effects of logic within the component as well as any output from the component passed through events like buttons where possible. Examples of this include: Verifying expected results when pressing a button including showing/hiding elements or calling actionsVerifying props are having the expected effect within the componentError states displaying as expectedEdge cases that may not be noticed in day to day development or regular QA cyclesValidation on forms "},{"title":"What Not To Test​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#what-not-to-test","content":"Interactions with or effects within other components or screens that require pulling in those screens or components.The actions being called (such as API calls), it should only be testing that the actions are called with the correct parameters. These actions should be tested in their own set of unit tests.Functionality of third party libraries that the component is not directly responsible for. These should be mocked appropriately to isolate the test to logic within the component. "},{"title":"Test Files​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#test-files","content":"The test file should live in the same location as its associated component with the same file name with .test included after the component name. ClaimsScreen.tsx will have a test file named ClaimsScreen.test.tsx "},{"title":"Running Tests​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#running-tests","content":"Run unit tests with yarn testCoverage can be found under coverage/lcov-report/index.html "},{"title":"Test Structure​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#test-structure","content":"Unit tests are structured into context, describe, and it functions that provide context to the tests as they are run. These are presented as a readable heirarchy, making it easy to follow the output of the tests and identify where failing tests are and what they were testing. context('MyScreen', () =&gt; { describe('when loading is set to true', () =&gt; { it('should show loading screen', async () =&gt; { // testing }) it('should not show a menu', async () =&gt; { // testing }) }) }) Copy The context is typically the name of the component or screen, the primary identifier of what this file is testing. describe provides a specific circumstance or set of properties. it explains exactly what is being tested. A context can have as many describe or it functions as is necessary to describe the flow of the test. "},{"title":"Mocking​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#mocking","content":"Components often interact with other pieces of code that are not the responsibility of that unit test, but rely on them to function. To handle these cases, we use mocks to guarantee inputs and outputs of things like navigation actions, API calls, external libraries, hooks, or anything else the component might need but does not control the logic of. Mocking libraries and functions are done through jest mocks. Global mocks can be found at jest/testSetup.ts but can be overridden within the individual test files. "},{"title":"Mocking Hooks​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#mocking-hooks","content":"One of the most commonly mocked parts of the app are hooks related to things like navigation, theme, and alerts. This is done by creating a spy object at the top of the file that will then be set in the jest mocks to allow it to be used within the tests. let mockNavigationSpy = jest.fn() jest.mock('utils/hooks', () =&gt; { let original = jest.requireActual('utils/hooks') return { ...original, useRouteNavigation: () =&gt; { return mockNavigationSpy }, } }) Copy This block of code will mock the entirety of the hooks util file using the original implementations except for the useRouteNavigation hook, which is instead returning a spy object that the unit test can use to verify it was called with the correct arguments. navigateToPaymentMissingSpy = jest.fn() when(mockNavigationSpy) .mockReturnValue(() =&gt; {}) .calledWith('PaymentMissing') .mockReturnValue(navigateToPaymentMissingSpy) Copy This will create another object navigateToPaymentMissingSpy that will be returned if the hook is called with the parameters 'PaymentMissing' // Do something that will trigger a navigation to the PaymentMissing screen expect(navigateToPaymentMissingSpy).toHaveBeenCalled() Copy "},{"title":"Mocking API Calls​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#mocking-api-calls","content":"Components will often make API calls which can be mocked via the redux actions that call them. import { downloadLetter } from 'store/slices' jest.mock('store/slices', () =&gt; { let actual = jest.requireActual('store/slices') return { ...actual, downloadLetter: jest.fn(() =&gt; { return { type: '', payload: '', } }), } }) Copy This imports the downloadLetter action from the letters slice responsible for handling downloading letters and mocks it to do nothing. This will let the unit test validate it has been called without the test itself trying to actually download anything. // Do something that triggers downloading of a letter with some set of options const letterOptions = { chapter35Eligibility: true, militaryService: true, monthlyAward: true, serviceConnectedDisabilities: true, serviceConnectedEvaluation: true, } expect(downloadLetter).toBeCalledWith(LetterTypeConstants.benefitSummary, letterOptions) Copy This checks to see that the downloadLetter action was called with the expected parameters "},{"title":"Engineering Philosophy","type":0,"sectionRef":"#","url":"docs/Engineering/Philosphy","content":"","keywords":""},{"title":"How we work is as important as what we work on​","type":1,"pageTitle":"Engineering Philosophy","url":"docs/Engineering/Philosphy#how-we-work-is-as-important-as-what-we-work-on","content":"Engineering is not a solitary pursuit. We work together as a team to build something that we share into the world and that people will download and use. We strive to build things that make our end-users' lives better or are useful to them in some manner. How we build a thing has effects on how fast we build, how well the thing we are building works, and how straightforward it is to build on in the future. Often we can overlook the downstream effects of our work in order to complete our tasks in a defined timeline. We should take the time to consider how taking the easy or fastest route can complicate our team’s work in the future. Our team strives to create fast, good code that deploys to high-uptime applications and services. We work to make the codebase better every time we touch it and to make the final product better as a result. Our team’s philosophy is to build in ways that are smart, accurate, skillful, articulate, safe, and understandable–and as a result: faster. Here are our guiding principles that help us reach those objectives. "},{"title":"Slow is smooth; Smooth is fast​","type":1,"pageTitle":"Engineering Philosophy","url":"docs/Engineering/Philosphy#slow-is-smooth-smooth-is-fast","content":"This is one of our guiding principles on this team. We should endeavor to be slow and precise in our work. Precision leads to better and more accurate results, which leads to faster ship times. Taking time to do the right things makes the right things more repeatable, and will pay more dividends in the long run than cutting a corner now to meet a deadline. "},{"title":"Engineers should practice second-order thinking when approaching problems and tasks. (Think then Act, etc)​","type":1,"pageTitle":"Engineering Philosophy","url":"docs/Engineering/Philosphy#engineers-should-practice-second-order-thinking-when-approaching-problems-and-tasks-think-then-act-etc","content":"Engineering is more than just tickets and tasks and getting things out the door. Engineering is the implementation of a product, which means that there are higher levels of consideration that we need to be aware of and practice. Engineers should always take the time to think about where their work sits within the system of things and not as if it exists in a vacuum. Second-order thinking involves solving problems and asking ourselves “What is next?” Thinking about how our changes and work interact with the larger work is paramount to building good software and not making mistakes that we could have prevented. When removing something, we should first know why it was there in the first place in order to understand its reason for being there. Only after we understand this context can we be sure that removing it won’t cause more harm than good. Chesterton’s Fence is the most common metaphor for this, but any quick search about second order thinking provides a wealth of information if you would like to improve your ability to think in this way. "},{"title":"Do not accept technical debt in exchange for speed​","type":1,"pageTitle":"Engineering Philosophy","url":"docs/Engineering/Philosphy#do-not-accept-technical-debt-in-exchange-for-speed","content":"We should avoid doing things later in order to merge something now. It seems logical that we will eventually get back to fixing our small omissions or mistakes. This not only assumes that time will be allocated immediately to address this, but it also assumes that technical debt of this kind is value-neutral. Technical debt that is purposely accrued because you believe it can be addressed later is still technical debt. We should not accrue this debt without careful consideration, and getting work out the door is not a valid reason to accrue such debt. We should work to make sure we address the small issues and fix those inaccuracies the first time, rather than expect a teammate to come by later and clean up the debt we are creating in our code. Not only does this avoid work in the future, it is also being a good steward and teammate. "},{"title":"Communication is your primary concern​","type":1,"pageTitle":"Engineering Philosophy","url":"docs/Engineering/Philosphy#communication-is-your-primary-concern","content":"Our team works tirelessly to make the best product possible. In order to do that, we must maintain clear communication between ourselves and our cross-functional peers. Good communication is the bedrock of any good team. It engenders trust, accountability, understanding and fosters an environment of partnership, creativity and problem solving that is necessary for success in any field. We communicate our wins, as well as our sticking points and blockers. We communicate issues quickly and work to find solutions within the team. No engineer is alone, and you should trust in our team to help you find a way through any obstacle. "},{"title":"Document everything.​","type":1,"pageTitle":"Engineering Philosophy","url":"docs/Engineering/Philosphy#document-everything","content":"Better yet, OVER-document. If it is more complex than a tsdoc or API doc, add an .md file to the docs site. Assume you will never touch this again. Make everything abundantly clear as to how it works. If you are reviewing something and have a question about how something works, ask the person to add some quick comments to clarify. There are few things worse than looking at something complicated with no or almost no documentation. I have personally gone back to work from many years ago, not realizing it was mine and became extremely irritated with the code; it was not documented at all and was extremely abstract. Taking two hours to remember your own work is a sure-fire way to realize how hard it would be for people without your memories to grok a thing. Be kind to future-you and all your coworkers. "},{"title":"Our work should be as atomic as possible​","type":1,"pageTitle":"Engineering Philosophy","url":"docs/Engineering/Philosphy#our-work-should-be-as-atomic-as-possible","content":"Whatever we do, we should make sure that what we push onto develop can be pulled out. If we are building things in a fashion that is tightly coupled, we make reversing that change in case of emergency easier if we add it to the code base in multiple, decoupled pushes. Atomic-ness also creates smaller pull requests, which are then easier to review and update. This makes the review process faster, which helps overcome the “tediousness” we may feel. An easier review process should lead to faster merge times. "},{"title":"Global components and utilities are created or updated on the develop branch and pulled into other branches.​","type":1,"pageTitle":"Engineering Philosophy","url":"docs/Engineering/Philosphy#global-components-and-utilities-are-created-or-updated-on-the-develop-branch-and-pulled-into-other-branches","content":"One of the tenets of good software is reusability. When we create or update reusable components and utilities, we should be pushing that work on to develop first, then pulling those changes back into the branch we are using. This is an extension of the rule about work being as atomic as possible. If we are building a thing that everyone will use, we should add it to the code base by itself then add it to our branch and build the specific use. This allows us to roll back the implementation if it breaks without removing the component from the code. Having specific use decoupled from the implementation makes debugging, identifying and addressing issues faster and safer to manage. "},{"title":"Single-responsibility​","type":1,"pageTitle":"Engineering Philosophy","url":"docs/Engineering/Philosphy#single-responsibility","content":"This is another tenet of good software engineering I like to call out because it dovetails with other areas discussed above about working in small, atomic chunks and how we do it. Components in any app can start to morph and take on multiple responsibilities. We should always be reviewing the changes we make to ensure we follow this guideline in order to have a usable code base. If you come across changes that seem to be violating this, you should be comfortable calling this out, explaining your diagnosis and formulating a plan to uncouple the responsibilities. Making sure things are only doing one thing helps us reuse them in ways that make building larger applications faster and easier as a developer. "},{"title":"ALL THE TESTS​","type":1,"pageTitle":"Engineering Philosophy","url":"docs/Engineering/Philosphy#all-the-tests","content":"Cover all your code with tests (of course this is silly, you can’t cover it all with tests, but you should shoot for this and land in a really good place if you miss). Tests should be a part of the process that helps us make sure we don’t break other parts of the code with our additions and to make sure any down-stream dependencies are still operating within the correct bounds in our app. "},{"title":"Before using a 3rd party lib, first see if there is a way to adopt our own version of the needed functionality.​","type":1,"pageTitle":"Engineering Philosophy","url":"docs/Engineering/Philosphy#before-using-a-3rd-party-lib-first-see-if-there-is-a-way-to-adopt-our-own-version-of-the-needed-functionality","content":"Third-party libraries can be super useful, but can often come at costs to security and application file size. When we find a library we would like to use to create a thing, we should take the time to see if we need the whole thing or if we can take the parts we like from it and make our own implementation. This gives us greater control over the code, makes us less dependent on code we don’t control, and gives us much more flexibility if their implementation ever runs up against our business rules. "},{"title":"Always consider ALL of the accessibility services when building things​","type":1,"pageTitle":"Engineering Philosophy","url":"docs/Engineering/Philosphy#always-consider-all-of-the-accessibility-services-when-building-things","content":"Remember that accessibility is a set of services layered over the app by the operating system. Accessibility is not just Voice Over or TalkBack, but a large set of services that provide alternate feedback to users. Beyond system services, things like haptic feedback, font scaling and landscape orientation (the latter being an accessibility concern for wheelchair mounted devices). We should endeavor to think comprehensively about how our changes affect accessibility as a whole, to test against all these things when we are writing code, and to provide feedback if we see implementations that break these services for users. "},{"title":"Engineers should be able to defend their decisions to good-faithed questions​","type":1,"pageTitle":"Engineering Philosophy","url":"docs/Engineering/Philosphy#engineers-should-be-able-to-defend-their-decisions-to-good-faithed-questions","content":"Engineers are people, and people make mistakes or miss other avenues of approach. When confronted with good-faith questions of why we choose an approach or questions to consider other things, we should also show good faith and give a logical rationale for our decisions. We may have more insights than someone else and our logic can help them understand our thought process and can help them learn a new way to approach problems. The flip side is that our logic may be flawed and that someone else can help us correct that logic in order to find new ways for us to think. Good engineers know why they are doing something. The higher we are promoted in engineering, the more we will be asked to explain our rationale and to defend our architecture decisions. Practicing this at every level of our work not only makes the team better through collaboration, but improves the skills we need as our careers progress. "},{"title":"All of our work should have a ticket, be estimated and be planned into a sprint.​","type":1,"pageTitle":"Engineering Philosophy","url":"docs/Engineering/Philosphy#all-of-our-work-should-have-a-ticket-be-estimated-and-be-planned-into-a-sprint","content":"Working in sprints requires planning for work and executing against that plan. A plan is only as good as our ability to estimate the amount of work we can accomplish in a time period. Not accomplishing tasks because we didn’t estimate correctly, or we had “hidden” work that took up our time has downstream effects on our team’s ability to make commitments to deliver. We should make sure that we are taking credit for all of our work by insisting that we always have a ticket for anything that we are doing, including discovery work. Whether it’s coding a screen, a spike for feasibility, or just googling for possible libraries we should be accounting for this work. This protects us by showing how much work we are actually doing that may not have an obvious delivery purpose. It also makes sure that we have accurate target dates for the whole project and can show progress when there may not be explicit code to point to. Engineering is about 10% writing code and 90% other stuff (including just thinking and planning). Represent all the work you actually do to help other people understand everything that goes into engineering. "},{"title":"Tickets should always have an output​","type":1,"pageTitle":"Engineering Philosophy","url":"docs/Engineering/Philosphy#tickets-should-always-have-an-output","content":"Whether it's code, an artifact or a ticket comment, a ticket should indicate the required output and where it lives in order to provide an audit trail for another engineer later. If we are making sure there is always a task trail for our work, we should also make sure that we are providing an output for everything we do. Most often this is pull requests for the code we wrote. When this is not the case, we should make sure that the tickets are explicit about what the output is and that we create and document the correct output. Sometimes this will be a documentation page. Sometimes this might be a writeup of our discovery or spike findings and our proposed solution. A strong engineering team is capable of many things beyond coding and we should be creating artifacts that showcase our work on non-code problems. This allows us to be creative and collaborative with the team and creates a permanent record for anyone picking up our work later that doesn’t require us to personally rehash the entire work. "},{"title":"Engineers should feel empowered to provide feedback to Product and UX teams about what we are building.​","type":1,"pageTitle":"Engineering Philosophy","url":"docs/Engineering/Philosphy#engineers-should-feel-empowered-to-provide-feedback-to-product-and-ux-teams-about-what-we-are-building","content":"Engineers have valuable experience in how things work when we build them. We spend countless hours clicking through our apps and testing all the calls which gives us a first-row seat to the good and the bad parts of solutions. We should endeavor to provide constructive, effective feedback to the other teams. This feedback should not be limited to things where we see issues, but also where we appreciate the design and product solutions. The inverse of this is that we should trust that after we provide feedback that the other teams are evaluating our feedback and using it to inform their decisions. If their decisions go against what we as engineers suggested, we should accept that in all but the most limited situations. Software is a collaborative process, but is also a process that frequently requires compromise in order to avoid spinning in circles on features. "},{"title":"Engineers should have the power to suggest process and implementation changes​","type":1,"pageTitle":"Engineering Philosophy","url":"docs/Engineering/Philosphy#engineers-should-have-the-power-to-suggest-process-and-implementation-changes","content":"Developer experience is a real thing, I promise. How we work can be as important as what we work on. When engineers see an area for improvement, they should feel enabled to make process improvement suggestions. Remember that identifying the problem is only the beginning, we also need to have a plan on how to overcome the issue. Learning to create proposals and plans for implementing solutions is a very important skill for engineers as they progress in their careers, and we should be practicing those skills whenever we have the chance. We gain skills for thinking about a project above the code, we learn creative ways to solve problems and learn how to give and receive feedback from others, and then learn to incorporate that feedback into our own work to become better engineers and teammates. The idea of a player-led team starts with empowering the players to make suggestions and to learn from feedback in a safe space. While this is not a promise to implement all solutions that are offered up–sometimes ideas may not work for the project or for the context or may just not work yet. We promise to review all of the ideas and to communicate the why or why not so that we all can understand the context. There is still valuable insight and skill to be gained in the process and can help level-up our ability to influence people. "},{"title":"Releases","type":0,"sectionRef":"#","url":"docs/Engineering/Releases","content":"Releases","keywords":""},{"title":"Operations","type":0,"sectionRef":"#","url":"docs/Operations/","content":"Operations VA Mobile app Incident Response and Operations resources on github","keywords":""},{"title":"Intro to the VA: Health and Benefits App","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Background​","type":1,"pageTitle":"Intro to the VA: Health and Benefits App","url":"docs/intro#background","content":"Nearly 40% of all traffic to VA.gov comes from users on their mobile devices. This traffic is typically driven by users that want to complete quick transactions, such as viewing Claims Status or Facility Locator. The VA: Health and Benefits App team has a hypothesis, validated by user research, that native functionality in a mobile app will allow Veterans to more easily complete key transactions across VA Health and Benefits services. "},{"title":"Team​","type":1,"pageTitle":"Intro to the VA: Health and Benefits App","url":"docs/intro#team","content":"Information on the team can can be found in the team charter. "},{"title":"Release Cycle​","type":1,"pageTitle":"Intro to the VA: Health and Benefits App","url":"docs/intro#release-cycle","content":"Because VSP's Collaboration Cycle is designed for web features, the VA Mobile App team is going to leverage parts of the process that make sense for mobile and create other quality control processes where it doesn't. For example, the VA Mobile App team is creating its own Accessibility review that is tailored to mobile devices. These deviations will be documented here "},{"title":"Download the app​","type":1,"pageTitle":"Intro to the VA: Health and Benefits App","url":"docs/intro#download-the-app","content":" "},{"title":"Dashboard","type":0,"sectionRef":"#","url":"docs/Operations/Dashboard","content":"Dashboard","keywords":""},{"title":"Incident Response","type":0,"sectionRef":"#","url":"docs/Operations/Incident Response","content":"Incident Response","keywords":""},{"title":"Firebase","type":0,"sectionRef":"#","url":"docs/Operations/Firebase","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#overview","content":"Firebase is a Google Cloud system which can capture analytics, performance, and crash data from our deployed app. The Firebase Console offers an overview into the app If you are unable to access the console, request access from the team or project lead Further information available in each of the subcategories in the navigation menu  The important sections within the console are listed below. Anything not listed is likely not used or not intergrated into the app at this time Something to note about all the data presented in these sections, none of the data is attributed to individual users for purposes of anonymity and privacy. The tools here allow you to get data on events and see stack traces of crashes, but not directly debug the issues of a specific user. All analytics, crashlytics, and performance are turned off for non-production environments, with the only exception being DebugView. "},{"title":"Crashlytics​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#crashlytics","content":"Crashlytics provides metrics on app crashes that occur in production, and can be filtered by release and platform. You'll find the platform dropdown at the top of the page next to the Crashlytics title. The filter at the top left under the title allows you to select which release number to look at and the filter at the top right allows you to choose a different date range.  Crashlytics is added to the app through the @react-native-firebase/crashlytics package. The only code added to the repo which affects Crashlytics is for toggling DebugView and explained in that section. "},{"title":"Performance​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#performance","content":"Performance provides many default metrics on http requests and app runtime, and can be filtered by platform. You'll find the platform dropdown at the top of the page next to the Crashlytics title. The filter at the top right allows you to choose a different date range.  Performance is added to the app through the @react-native-firebase/perf package. The only code added to the repo which affects Performance is for toggling DebugView and explained in that section. Additional custom traces can be added to the code by following the examples in the package docs. "},{"title":"App Distribution​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#app-distribution","content":"App Distribution provides a dashboard for all the releases of the app. It lists previous releases, allows for creating a new release, provides invite links and group permissions for testers and other groups. Each release contains notes for its purpose, whether it is a QA build or one for UAT or a proper release build. Only people with permissions to use the distribution tools will be able to build new releases. The contact info for the person with top level permission will be listed on that page under Contant Email  "},{"title":"Analytics​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#analytics","content":"Analytics provides metrics on discrete events within the app. Most general events like accessing a screen are built into the package and provided in the dashboard without any additional coding, but all other actions like pressing a button or downloading a file are tracked as a custom analytic event. These events are collated and displayed in multiple ways in the Analytics subsections of the nav menu, as listed in the subsections below. "},{"title":"To Add a New Analytics Event​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#to-add-a-new-analytics-event","content":"Add an event name with optional parameters to the Events constant in constants/analytics.ts. "},{"title":"Naming Requirements​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#naming-requirements","content":"Snake casePrefixed with vama_Limited to 24 characters including the vama_ prefix See examples below or in our analytics constants file Additionally, if user properties need to be tracked, they can be added to the UserAnalytics object: export const Events = { ... , vama_new_event_name: (): Event =&gt; { return { name: 'vama_new_event_name', params: { paramName, }, } }, } export const UserAnalytics = { ... , vama_uses_property: (value: boolean): UserAnalytic =&gt; { return { name: 'vama_uses_property', value: value.toString(), } }, } Copy Then include the analytics utility functions in your screen or store slice and call the event name: import { getAnalyticsTimers, logAnalyticsEvent, setAnalyticsUserProperty } from 'utils/analytics' export const analyticsAction = (): AppThunk =&gt; async (dispatch, getState) =&gt; { await setAnalyticsUserProperty(UserAnalytics.vama_uses_property(true)) const [totalTime] = getAnalyticsTimers(getState()) await logAnalyticsEvent(Events.vama_new_event_name(totalTime)) ... } Copy Analytics is added to the app through the @react-native-firebase/analytics package. "},{"title":"Dashboard​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#dashboard","content":"The analytics dashboard provides a few common metrics that are important to the app, like current user engagement, active release versions, and user geolocation. You can drill down into the information on the dashboard by clicking on the All Users button, which will pop open a sidebar which allows you to create a custom query to test the data against, with up to 5 conditions. The time range of the query is in the top-right of the main dashboard, outside of the pop-up. Once a new query is created and Apply is pressed in the bottom right of the pop-up, the data shown will match all provided conditions only. Switching to the Realtime screen within Analytics will also apply these conditions. To clear a query, click on the X next to its name in the top-left where the All Users button used to be.  "},{"title":"Realtime​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#realtime","content":"Selecting the Realtime dashboard will show all events that occured within the indicated time range and which match the active query in the comparisons list at the top of the screen. This screen shows the geolocations of all these events grouped to the nearest city. Underneath the map, a breakdown of the event types and rankings of each is also provided.  "},{"title":"Events​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#events","content":"The Events page shows a list of all discrete events in the app, the count of each event firing, and the number of unique users who initiated that event. The events list can be filtered for a specific date range, but no other filters can be applied on this screen.  "},{"title":"DebugView​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#debugview","content":"DebugView allows developers to get a live stream of events in real-time, with up to a 60 second delay when first starting. An Enable Firebase Debug Mode button has been added to the developer screen to make debugging easier.  For developers building locally, follow the steps listed below to get started: iOS: Make sure the -FIRDebugEnabled flag is enabled in your XCode &gt; Product &gt; Scheme &gt; Edit Scheme, under the Test (Debug) schemeStart the emulator or build to deviceIn the app, go to Profile &gt; Settings &gt; Developer and click Enable Firebase Debug ModeGo the Firebase Debug dashboard and select your device from the top left Debug Devices list Android: Open Android Studio and run the emulator or build to deviceIn a terminal, execute the command adb shell setprop debug.firebase.analytics.ap gov.va.mobileappIn the app, go to Profile &gt; Settings &gt; Developer and click Enable Firebase Debug ModeGo the Firebase Debug dashboard and select your device from the top left Debug Devices listAfter debugging is complete, run the command adb shell setprop debug.firebase.analytics.app .none. For QA team members, DebugView does not work using a signed build. Either build locally using the steps above, or use the steps below, but be aware that the wait time is high and it doesn't always work due to the way events are batched and sent to the Dashboard: On either platform: In the app, go to Profile &gt; Settings &gt; Developer and click Enable Firebase Debug ModeGo to the Firebase Realtime dashboardClick on the All Users button at the top left. A Build Comparison menu will pop up.Set Audience Name to Environment and the Dimension Values to Staging if available. If not available, no staging events have been logged in the time periodClick Apply and any events in that time period that have been logged will be shown on the map and in the lists "},{"title":"Maintenance Windows","type":0,"sectionRef":"#","url":"docs/Operations/Maintenance Windows","content":"Maintenance Windows","keywords":""},{"title":"Mobile Plays and Postmortems","type":0,"sectionRef":"#","url":"docs/Operations/Mobile Plays and Postmortems","content":"Mobile Plays and Postmortems","keywords":""},{"title":"On-Call Procedures","type":0,"sectionRef":"#","url":"docs/Operations/On-Call Procedures","content":"On-Call Procedures","keywords":""},{"title":"How to use GitHub Desktop and Sublime text to make pull requests","type":0,"sectionRef":"#","url":"docs/Operations/Making Changes","content":"","keywords":""},{"title":"Install git​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#install-git","content":"Git - Installing Git "},{"title":"On Mac​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#on-mac","content":"Open terminal and run git —version If you do not already have it installed it will prompt you to install it. "},{"title":"On Windows​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#on-windows","content":"Git - Downloading Package "},{"title":"sublime text​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#sublime-text","content":"Sublime Text - Text Editing, Done Right "},{"title":"Install GitHub Desktop​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#install-github-desktop","content":"GitHub Desktop | Simple collaboration from your desktop Getting started with GitHub Desktop - GitHub Docs Open the zip file. When Finder comes up, you will want to drag the application into the Applications folder  You can then open the app from either the finder window or using quick search ⌘ + Space and type GitHub desktop You may see a warning the first time you open the app, click Open  When the app opens it may ask you to log into GitHub. Once you are logged in you should see a screen like this:  Wait until your repositories list loads on the right  Scroll or use search until you find department-of-veterans-affairs/va-mobile-app When you click on the repository name, you should get an option to clone the repository  Click the clone button to pop up a modal. Choose the local path on your machine where you want to save it and click the clone button   "},{"title":"Create a new branch​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#create-a-new-branch","content":"To create a branch, you first need to know what base you need. The base of the branch determines what code changes are available to your branch when you start it. If we think of develop as a trunk, then the two branches shown below will have slightly different code checked in because of where they are branched from. You can see that the yellow branch will have started and be missing two gray commits that the blue branch will have because of where it was based.  This means we need to pay attention the to base branch when we make new branches. In most cases, you will probably have two cases to choose from : I am making new changes that need to get added to the app or wherever, but NOT for the release ticket. For these you will likely need to base off of the develop branch.I am making change FOR a release ticket, such as what’s new or content changes that have to be in the next release. For these you will need to base it on the correct release branch and will need to do some extra work. "},{"title":"If your new branch is based on develop​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#if-your-new-branch-is-based-on-develop","content":"Click on the Current Branch tab at the top  There are a few ways to create a new branch. You can type in a branch name in the search, then click the New Branch or the Create New Branch button.  You can also press ⌘ + Shift + N to create a new branch from anywhere in the application. You will see this modal. Just enter your branch name and click Create Branch  Once you have created your branch, you should see this:  You can now start making your changes to the repository. There is no need to publish your branch at this time, we can make all of your changes first and then publish it. "},{"title":"If your changes are for a release​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#if-your-changes-are-for-a-release","content":"You will need to copy the release branch from the remote repository to start. This is called pulling a remote. To do is in GH desktop, you will simple search for the branch on the server and double click it. Click on the current branch tab, type release into the search and double click the release branch you want to update. It should pre prefixed with origin/ like you see below for origin/release/v1.12.0. Click the branch name and your GH Desktop will pull down that branch history and change to that branch for you.  Now that we have our starting place, we can then create a branch based on release/v1.12.0. Create a new branch any of the ways listed above, but when the create branch modal pops up, you will need to change the base branch from develop to the correct release branch.  Click the release/vx.y.x that is the correct version and click Create Branch You now have a branch that will update for only the release branch that you can now start making changes on. "},{"title":"Open the repository in Sublime text​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#open-the-repository-in-sublime-text","content":"Open Sublime Text from your applications folder or using quick search ⌘ + Space In GitHub Desktop, click on the Current Repository tab at the top and right click on va-mobile-app. Select Reveal in Finder  Click on the va-mobile-app text at the top of finder so that a folder icon pops up. Drag that icon onto the sublime text icon that should be visible in your dock area.  Sublime text should open a new window with your files in a sidebar on the left and a black text editor in the middle. You can now navigate the files in the repo in order to make your changes. "},{"title":"Making and saving changes​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#making-and-saving-changes","content":"Once you have made changes to the files you want to update, you will need to save the changes in sublime to make them show up in GH Desktop. You can Save All changes with Option(⌥) + ⌘ + S If you now look at GH Desktop, you should see a list of changes in the left-hand tab.  If you click on a file, you can see the set of changes for each file (called a diff). Green indicates a line was added. Red indicates the line was deleted.  "},{"title":"Committing Changes​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#committing-changes","content":"Once we have all the changes we want to make, we need to save the changes to our git history so that the repository is updated. We call this committing changes to git. To do so in GH Desktop, simple check the box to the left of each file that you want to save changes from. You can save all the changes at once or split up changes in a couple of commits if you want to add changes by some type of change grouping (i.e. all image updates in one commit, all text updates in a second). Its not necessary to do more than one commit, but if you make a lot of changes it can be helpful to break it up in case you make a mistake you need to undo(revert).  Once you have selected all the changes you want to commit, you will need to enter a summary message and commit the changes. Add a summary message that explains the changes in case someone needs to review the history and can easily tell what you were up to. In this case I am making my message “update what’s new text for iOS and android”. Click Commit to &lt;branch_name&gt; to save the changes to git.  GH Desktop should then show you a screen that says No local changes again. If you have more changes or more commits, go ahead and do those now. Once you have all the changes you want to make, you will need to publish your branch so that you can make a pull request. "},{"title":"Publish your branch​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#publish-your-branch","content":"In order to make a Pull Request and add your changes back onto the base branch, you will need to copy your local branch up onto the GitHub server. To do this, you just need to go to the GH Desktop app, and click either the Publish Branch tab at the top or the Publish Branch button in the Publish your branch area. The branch should get pushed up to the repository and you should then see an area to Create Pull Request\u0003\u0003   Now the only thing left to do is create a pull request so that others can review your changes before they are added to the repository. "},{"title":"Create a Pull Request​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#create-a-pull-request","content":"Click the Create Pull Request button. This should open a browser window that takes you to a Pull Request template in the repository.  Follow the template to add changes and explain to reviewers what is being added or subtracted from the code base. You should also connect the ticket to this PR request so that the two move through the ZenHub pipelines together. To do this, you will need the ZenHub Browser Extension for Chrome and Firefox installed. Once this is installed, there should be a button under the text input for you to search the issues in our repo.  Click Connect Issue and search for the ticket by title or number Once you have connected the issue, you should see something like this:  Next, you will need to add any specific reviewers you need. If you don’t know, you can leave it empty. Click the reviewers section on the right-hand side and search for folks you need to review.  Click on the user’s name to add them as a reviewer. You should see a check next to their name if you’re successful  Click outside the box when you are done adding people. You should now see a list of reviewers with orange dots next to their names to indicate that they have not yet started a review  Click the green Create pull request button to finish your work and send the PR for review. "},{"title":"Updating the Dashboard","type":0,"sectionRef":"#","url":"docs/Operations/UpdatingDashboard","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Updating the Dashboard","url":"docs/Operations/UpdatingDashboard#overview","content":"Links you will need: Dashboard in GAAnalytics Google SheetPlay Store Downloads ReportPlay Store RatingsApp Store Downloads ReportApp Store Rating "},{"title":"Manual data gathering steps​","type":1,"pageTitle":"Updating the Dashboard","url":"docs/Operations/UpdatingDashboard#manual-data-gathering-steps","content":""},{"title":"Google Downloads​","type":1,"pageTitle":"Updating the Dashboard","url":"docs/Operations/UpdatingDashboard#google-downloads","content":"Go to the Play Store Downloads ReportDownload the previous month's csv file for the Overview reportAdd the data to the bottom of the Google Installs Tab in the Analytics Google Sheet "},{"title":"Google Ratings Break Down and Play Store Rating​","type":1,"pageTitle":"Updating the Dashboard","url":"docs/Operations/UpdatingDashboard#google-ratings-break-down-and-play-store-rating","content":"Go to the Play Store Ratings pageNext to Performance over time, change the report time series to Last 90 DaysScroll down to the Ratings Distribution sectionClick the Download CSV option Copy the data from just the reporting month you need and add it to the Google Daily rating distribution TabTake the value at the top of the Play Store Ratings page, under Overview, for Default Google Play rating and copy it to the Play Store Rating Tab "},{"title":"Apple Downloads​","type":1,"pageTitle":"Updating the Dashboard","url":"docs/Operations/UpdatingDashboard#apple-downloads","content":"Go to the App Store Downloads Report pageChange the time period to be just the reporting month you wantClick the ... overflow menu on the right and select Export as CSVCopy the data into the ios installs Tab "},{"title":"Apple App Store Rating​","type":1,"pageTitle":"Updating the Dashboard","url":"docs/Operations/UpdatingDashboard#apple-app-store-rating","content":"Go to the App Store Rating pageGet the rating value at the top and copy it to the ios store rating Tab "},{"title":"Adding and updating a new month​","type":1,"pageTitle":"Updating the Dashboard","url":"docs/Operations/UpdatingDashboard#adding-and-updating-a-new-month","content":"Go to the Dashboard in GASelect the overflow menu in the top right and click the Refresh data optionSelect Page-&gt; Manage Pagesin the Report Pages sidebar, click the overflow menu on the latest monthly report and select DuplicateRename the new page to the reporting monthUpdate the page header to the reporting monthSelect all the charts except the Installs chart. Update the default date range to the reporting month start/end datesSelect all the report card charts except the Installs chart and update the comparison dates to the previous month start/end datesSelect the Installs chart and change the default ending date to the last date of the reporting month "},{"title":"Product Management","type":0,"sectionRef":"#","url":"docs/Product/","content":"Product Management VA Mobile app Product Management resources on github.","keywords":""},{"title":"QA","type":0,"sectionRef":"#","url":"docs/QA/","content":"QA VA Mobile app Test Plan resources on github.","keywords":""},{"title":"Resources","type":0,"sectionRef":"#","url":"docs/Product/Resources","content":"Resources Product management resources for the VA Mobile app.","keywords":""},{"title":"UI Automation Testing","type":0,"sectionRef":"#","url":"docs/QA/Automation","content":"","keywords":""},{"title":"Background​","type":1,"pageTitle":"UI Automation Testing","url":"docs/QA/Automation#background","content":"For folks looking for a basic primer on &quot;what is UI automation testing&quot;, reading one of the many articles available via quick google search is the recommended method. This section instead covers the background of automated UI testing for the mobile team. Implementing robust UI automation for the mobile team supports several team goals - more efficiently using QA Engineer time, finding bugs sooner/reducing regressions, and improving FE efficiency (reducing the number of flaky unit tests that are written to accomplish what UI automation is better positioned to test). Phases include: Tool assessment &amp; initial implementation: Completed Q3 2022Release candidate script automation: Slated for Q2 2023Key end-to-end test automation: Future "},{"title":"Detox: our UI automation tool​","type":1,"pageTitle":"UI Automation Testing","url":"docs/QA/Automation#detox-our-ui-automation-tool","content":"Our automated UI testing is done with Detox, which we picked over other tools because it slotted in nicely with existing tools/tech for the team (react native, javascript, jest) while also having more robust functionality with lighter lift than some other tools (write a single script that executes cross-platform; active development, support &amp; documentation updates from the detox team; etc). "},{"title":"Local setup for detox​","type":1,"pageTitle":"UI Automation Testing","url":"docs/QA/Automation#local-setup-for-detox","content":"Check that the emulators used by the script (listed in .detoxrc.json) are installed on your machine, and install them if not. Helpful instructions from detoxBuild the app. iOS is yarn e2e:ios-build and Android is yarn e2e:android-buildRun tests. iOS is yarn e2e:ios-test and Android is yarn e2e:android-test. "},{"title":"Meetings","type":0,"sectionRef":"#","url":"docs/QA/Meetings","content":"","keywords":""},{"title":"QA team meeting philosophy​","type":1,"pageTitle":"Meetings","url":"docs/QA/Meetings#qa-team-meeting-philosophy","content":"Time and brainpower are the most important resources we manage as a QA team, because they are fundamental and finite. Where we spend our time and mental energy will determine what outcomes we can achieve.It's important for the QA team to attend meetings. We add value. We receive value. We bond with other folks on the team.It's important for the QA team to not go to meetings. Heads-down independent work is the time when we find bugs, improve processes, come up with novel testing strategies, etc. "},{"title":"Meeting review​","type":1,"pageTitle":"Meetings","url":"docs/QA/Meetings#meeting-review","content":"Periodically re-evaluating which meetings we attend generally and who goes to each meeting specifically helps us to avoid over-spending time on meetings and to play to the strengths of individuals on the team. (Individuals can always talk with the team or their manager if they have changes they want to make to their own meeting workoad. The overall review process is meant as a backstop to look at everything holistically on a semi-regular basis.) The goals of review are: For each individual on the team to be happy about the meetings they're attending. Ideally, everyone feels like they're going to the meetings where they give or receive the most value, or that match the best with their goals and skills.For the team overall to be attending meetings efficiently. Ideally, we're spending just enough time in meetings to meet our individual and team objectives, but no more than that. This could involve sending a representative (instead of multiple members of the team), keeping a recurring meeting on our calendar but only going when certain conditions are met, etc. "},{"title":"Inhale and exhale​","type":1,"pageTitle":"Meetings","url":"docs/QA/Meetings#inhale-and-exhale","content":"To gain the same value out of meetings while each person attends fewer meetings requires a shared set of expectations for the sole QA representative attending any given meeting. Our expectations are that representatives will pay attention at the meeting (inhale) and share necessary information with the full team in our Slack channel (exhale). Examples of information we'd expect to share: Times you spoke up in a meeting “I had a lot of questions about how they’re going to implement the calendar feature for appointments, seems like there’s a lot of accessibility things to figure out there still.” Things the whole team needs to know to do our jobs “We're pausing all work on this feature. Hold off on writing test plans for the areas we assigned out last week, until further notice.&quot; When you’re sensing a problem, or if there’s something to keep an eye out for “My first round of testing for the migration turned up way more issues than we expected. I confirmed changes with the testing plan with Eng and Product at the feature check-in, and the rest of the team can expect a meeting invitation to get up to speed (so you can also start testing) sometime this week.&quot; "},{"title":"Resources","type":0,"sectionRef":"#","url":"docs/QA/Resources","content":"","keywords":""},{"title":"QA-specific​","type":1,"pageTitle":"Resources","url":"docs/QA/Resources#qa-specific","content":""},{"title":"TestRail​","type":1,"pageTitle":"Resources","url":"docs/QA/Resources#testrail","content":"A single project in the shared VA account contains the VA mobile app test cases and runs. Folks who need access should use the help workflow in the #vfs-platform-support channel in the DVSA Slack instance. Key subset of test cases to be familiar with: the regression test suite run on each release candidate. "},{"title":"TestFlight & AppTester​","type":1,"pageTitle":"Resources","url":"docs/QA/Resources#testflight--apptester","content":"We distribute builds through TestFlight for iOS, and AppTester for Android. You'll need to first ping Narin or Patrick to grant you permissions, then you can download the relevant app on your testing device, sign in, and get started. (Heads up, the App Tester setup is not necessarily intuitive.) "},{"title":"Charles Proxy​","type":1,"pageTitle":"Resources","url":"docs/QA/Resources#charles-proxy","content":"We use Charles Proxy as a key tool for things like error state testing, mocking data we don't have access to, and downtime window testing. We've got guides for setting up Charles Proxy, and how to mock response data or set exclusions. "},{"title":"Mobile team tools (as they relate to QA)​","type":1,"pageTitle":"Resources","url":"docs/QA/Resources#mobile-team-tools-as-they-relate-to-qa","content":""},{"title":"1Password​","type":1,"pageTitle":"Resources","url":"docs/QA/Resources#1password","content":"The VAMobile and VA.gov vaults contain usernames and passwords for staging test users. "},{"title":"Github​","type":1,"pageTitle":"Resources","url":"docs/QA/Resources#github","content":"Most commonly used: writing a bug ticket with the new bug report template. "},{"title":"Zenhub​","type":1,"pageTitle":"Resources","url":"docs/QA/Resources#zenhub","content":"Most commonly used: the shared FE/QA Zenhub board and the cumulative flow report to track ticket (or bug!) trends over several sprints. "},{"title":"Components","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/","content":"Components Components are interactive and non-interactive UI elements that can be grouped together or presented individually. They are independent, reusable chunks of a user interface that define a visual style and/or micro-interaction. A component is the smallest unit of measure within a design system. They can be considered concrete, a finite list: Button, accordion, table, etc. The VA Mobile app is designed using components to help to ensure consistency across the app's features. This section includes component descriptions, examples and resources (UX and ENG). VA Mobile app components can also be found in Figma in the VA Mobile app Design Library. See also https://design.va.gov/components/","keywords":""},{"title":"User Experience","type":0,"sectionRef":"#","url":"docs/UX/","content":"User Experience The User Experience team for the VA mobile app includes interaction design, content design, accessibility and research practices.","keywords":""},{"title":"Alerts and Progress","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Alerts and Progress/","content":"Alerts and Progress","keywords":""},{"title":"AccordionCollapsible","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Alerts and Progress/AccordionCollapsible","content":"AccordionCollapsible A common component to show content inside of a collapsible accordion. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionheader\tReactNode Yes\tcomponent to display as header of accordion expandedContent\tReactNode Yes\tcomponent to display only when the accordion is expanded testID\tstring No\ttestID for the header a11yHint\tstring No\ta11yHint for the header collapsedContent\tReactNode No\tcomponent to display on when the accordion is collapsed hideArrow\tboolean No\tif true hides the accordion arrow and only displays header &amp; collapsed content customOnPress\t(expandedValue?: boolean) =&gt; void No\tcustom on press call if more action is needed when expanding/collapsing the accordion expandedInitialValue\tboolean No\tsets the initial value of expanded if an accordion should already be expanded on render noBorder\tboolean No\tgets rid of border of TextArea so the top and bottom borders don't double up in message threads when accordion is opened headerRef\tRef&lt;View&gt; No\tRef for the header section","keywords":""},{"title":"AlertBox","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Alerts and Progress/AlertBox","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"AlertBox","url":"docs/UX/ComponentsSection/Alerts and Progress/AlertBox#usage","content":"[body text] "},{"title":"Example in practice​","type":1,"pageTitle":"AlertBox","url":"docs/UX/ComponentsSection/Alerts and Progress/AlertBox#example-in-practice","content":"[Example screenshot goes here - use public embed code in Figma Share modal if possible] [body text] "},{"title":"Best practices​","type":1,"pageTitle":"AlertBox","url":"docs/UX/ComponentsSection/Alerts and Progress/AlertBox#best-practices","content":"[body text] "},{"title":"Content guidelines​","type":1,"pageTitle":"AlertBox","url":"docs/UX/ComponentsSection/Alerts and Progress/AlertBox#content-guidelines","content":"[body text] "},{"title":"A11y​","type":1,"pageTitle":"AlertBox","url":"docs/UX/ComponentsSection/Alerts and Progress/AlertBox#a11y","content":"[body text] "},{"title":"Related components​","type":1,"pageTitle":"AlertBox","url":"docs/UX/ComponentsSection/Alerts and Progress/AlertBox#related-components","content":"[body text] "},{"title":"Engineering resources​","type":1,"pageTitle":"AlertBox","url":"docs/UX/ComponentsSection/Alerts and Progress/AlertBox#engineering-resources","content":" Displays content in a box styled as an alert   PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionborder\tstring | number | symbol Yes\tcolor of the border focusOnError\tboolean\ttrue\tNo\tOptional boolean for determining when to focus on error alert boxes (e.g. onSaveClicked). scrollViewRef\tRefObject&lt;ScrollView&gt; No\tOptional ref for the parent scroll view. Used for scrolling to error alert boxes. text\tstring No\tbody of the alert title\tstring No\toptional bolded title text textA11yLabel\tstring No\toptional accessibility label for the text titleA11yLabel\tstring No\toptional accessibility label for the title titleRole\tAccessibilityRole No\toptional accessibility role for the title "},{"title":"LoadingComponent","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Alerts and Progress/LoadingComponent","content":"LoadingComponent A common component to show a loading spinner PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontext\tstring No\tText to be shown under the spinner a11yLabel\tstring No\tAccessibilityLabel for the text justTheSpinnerIcon\tboolean No\tParam to show the spinner icon only and not the full page with text spinnerHeight\tnumber No\tspinner height spinnerWidth\tnumber No\tspinner width spinnerColor\tstring No\tHex string to set the spinner color","keywords":""},{"title":"Buttons and Links","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Buttons and Links/","content":"Buttons and Links","keywords":""},{"title":"MessageAlert","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Alerts and Progress/MessageAlert","content":"MessageAlert Common component to show a message alert when saving or sending a secure message PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionfocusOnError\tboolean No\tOptional boolean for determining when to focus on error alert boxes. hasValidationError\tboolean No\tsets if there is validation errors saveDraftAttempted\tboolean No\tsets if attempted to save a draft scrollViewRef\tRefObject&lt;ScrollView&gt; No\toptional ref for parent scroll view","keywords":""},{"title":"AttachmentLink","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Buttons and Links/AttachmentLink","content":"AttachmentLink A common component for an attachment link display. Can be used to show file attachments in a message thread. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionname\tstring Yes\tName of link/attachment formattedSize\tstring No\tSize of file attachment and size unit wrapped in parentheses formattedSizeA11y\tstring No\tSize of file attachment and size unit wrapped in parentheses with pronounciation onPress\t() =&gt; void No\tonPress function a11yHint\tstring No\toptional a11y Hint a11yValue\tstring No\toptional a11y value","keywords":""},{"title":"BackButton","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Buttons and Links/BackButton","content":"BackButton Button used by the stack navigation to go back to the previous screen PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononPress\t() =&gt; void Yes\tthe onPress function for the back button canGoBack\tboolean Yes\ta boolean indicating if the user has a screen to go back to; if false, the back button will be hidden label\tBackButtonLabel Yes\ttranslation key to use for the display text, as well as the testID for the component showCarat\tboolean No\twhether to show the carat left of the text a11yHint\tstring No\toptional param to add accessibility hint to back button focusOnButton\tboolean\ttrue\tNo\tboolean to specify if we want accesibility to focus on the back button webview\tboolean No\t","keywords":""},{"title":"ClickToCallPhoneNumber","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Buttons and Links/ClickToCallPhoneNumber","content":"ClickToCallPhoneNumber A common component for a blue underlined phone number with a phone icon beside it - clicking brings up phone app - automatically renders TTY info PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionphone\tany No\tsets the phone information displayedText\tstring No\tsets the text that will be displayed center\tboolean No\tboolean to align items to the center a11yLabel\tstring No\taccessibility label - otherwise; defaults to the actual phone number","keywords":""},{"title":"ClickForActionLink","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Buttons and Links/ClickForActionLink","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"ClickForActionLink","url":"docs/UX/ComponentsSection/Buttons and Links/ClickForActionLink#usage","content":"Use a ClickForActionLink when you want to: Open an external web page in users default browserTrigger a download such as a PDF?Trigger a phone callOpen calendar Do not use a ClickForActionLink to: Open a web view in the app (use a link without an icon)Access some kind of instructional or helper text (use a link without an icon). "},{"title":"Example in practice​","type":1,"pageTitle":"ClickForActionLink","url":"docs/UX/ComponentsSection/Buttons and Links/ClickForActionLink#example-in-practice","content":" "},{"title":"Best practices​","type":1,"pageTitle":"ClickForActionLink","url":"docs/UX/ComponentsSection/Buttons and Links/ClickForActionLink#best-practices","content":"Needs description: When to use a link vs a ClickForActionLink "},{"title":"Content guidelines​","type":1,"pageTitle":"ClickForActionLink","url":"docs/UX/ComponentsSection/Buttons and Links/ClickForActionLink#content-guidelines","content":"Links should tell people what action to take, where to go next, or what information to expect when they select the link.Use natural and descriptive language.Hyperlink the most relevant word or phrase that describes the purpose and target (destination) of the link.Avoid “Click here” as the CTA text.Avoid generic CTA links like “Learn more,” “See more,” and “Read more” by themselves.Don’t punctuate standalone CTA links. Exception: When the link text is a question.If the embedded link text comes at the end of a sentence, don’t hyperlink the ending punctuation.When a link opens a PDF, YouTube video, XLS or other file format, use the appropriate link variation. "},{"title":"Accessibility​","type":1,"pageTitle":"ClickForActionLink","url":"docs/UX/ComponentsSection/Buttons and Links/ClickForActionLink#accessibility","content":"Links must be underlined.Keyboard navigation: The user must be able to navigate to links using the Tab key and activate links using the Enter key.Purpose and target: Without a purpose and target, everyone– but especially screen reader users– will struggle to understand where they may be routed off to. "},{"title":"Related components​","type":1,"pageTitle":"ClickForActionLink","url":"docs/UX/ComponentsSection/Buttons and Links/ClickForActionLink#related-components","content":"Design.va.gov: LinksCLicktoCallPhoneNUmberAttachmentLink[Buttons] "},{"title":"Engineering resources​","type":1,"pageTitle":"ClickForActionLink","url":"docs/UX/ComponentsSection/Buttons and Links/ClickForActionLink#engineering-resources","content":"Reusable component used for opening native calling app, texting app, or opening a url in the browser   PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiondisplayedText\tstring Yes\tphone number or text for url that is displayed to the user, may be different than actual number or url used linkType\tLinkTypeOptions Yes\tstring signifying the type of link it is (click to call/text/go to website/add to calendar) numberOrUrlLink\tstring No\tsignifies actual link or number used for link, may be different than text displayed linkUrlIconType\tLinkUrlIconType No\tsignifies icon type of link metaData\tCalendarMetaData No\tobject with additional data needed to perform the given action a11yLabel\tstring Yes\tAccessibility label for the link, mandatory for every element with a link role fireAnalytic\t() =&gt; void No\toptional function to fire analytic events when the link is clicked "},{"title":"CrisisLineCta","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Buttons and Links/CrisisLineCta","content":"CrisisLineCta Reusable Crisis Line component that shows up as a 'sticky' on the Home screen PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononPress\t() =&gt; void Yes\tfunction called when the banner is pressed","keywords":""},{"title":"CtaButton","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Buttons and Links/CtaButton","content":"CtaButton CtaButton that shows up on the HomeScreen' and 'Contact VA' option on HomeScreen PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptioniconColor\tstring | number | symbol No\tOptional param to set icon color onPress\t() =&gt; void No\tFunction to run on press m\tNumOrStrPx No\tset margin of this component mt\tNumOrStrPx No\tset margin top of this component mr\tNumOrStrPx No\tset margin right of this component mb\tNumOrStrPx No\tset margin bottom of this component ml\tNumOrStrPx No\tset margin left of this component mx\tNumOrStrPx No\tset margin right and left of this component my\tNumOrStrPx No\tset margin top and bottom of this component p\tNumOrStrPx No\tset padding of this component pt\tNumOrStrPx No\tset padding top of this component pr\tNumOrStrPx No\tset padding right of this component pb\tNumOrStrPx No\tset padding bottom of this component pl\tNumOrStrPx No\tset padding left of this component px\tNumOrStrPx No\tset padding right and left of this component py\tNumOrStrPx No\tset padding top and bottom of this component top\tstring | number No\tsets the number of logical pixels to offset the top edge of this component left\tstring | number No\tsets the number of logical pixels to offset the left edge of this component right\tstring | number No\tsets the number of logical pixels to offset the right edge of this component bottom\tstring | number No\tsets the number of logical pixels to offset the bottom edge of this component position\t&quot;relative&quot; | &quot;absolute&quot; No\tsets the positioning to relative or absolute of this component display\t&quot;none&quot; | &quot;flex&quot; No\tsets the display type of this component flex\tnumber No\tsets the flex property of this component flexGrow\tnumber No\tdescribes how any space within a container should be distributed among its children along the main axis flexShrink\tnumber No\tflexShrink describes how to shrink children along the main axis in the case in which the total size of the children overflows the size of the container on the main axis flexWrap\t&quot;wrap&quot; | &quot;nowrap&quot; | &quot;wrap-reverse&quot; No\tcontrols whether children can wrap around after they hit the end of a flex container flexDirection\t&quot;column&quot; | &quot;row&quot; No\tcontrols which directions children of a container go overflow\t&quot;hidden&quot; | &quot;visible&quot; | &quot;scroll&quot; No\tcontrols how children are measured and displayed justifyContent\t&quot;center&quot; | &quot;flex-start&quot; | &quot;flex-end&quot; | &quot;space-between&quot; No\taligns children in the main direction alignItems\t&quot;center&quot; | &quot;flex-start&quot; | &quot;flex-end&quot; No\taligns children in the cross direction alignSelf\t&quot;auto&quot; | FlexAlignType No\tcontrols how a child aligns in the cross direction, overriding the alignItems of the parent width\tstring | number No\tsets the width of this component minWidth\tstring | number No\tsets the min width of this component height\tstring | number No\tsets the height of this component minHeight\tstring | number No\tsets the min height of this component textAlign\t&quot;left&quot; | &quot;right&quot; | &quot;center&quot; No\talings the text of this component backgroundColor\tBackgroundVariant No\tsets the background color of this component opacity\tnumber No\tsets the opacity of this component borderWidth\tBorderWidths No\tsets the border width of this component borderColor\tBorderColorVariant No\tsets the border color of this component borderStyle\tBorderStyles No\tsets the border style of this component borderBottomWidth\tBorderWidths No\tsets the bottom border's width of this component borderBottomColor\tBorderColorVariant No\tsets the bottom border's color of this component borderTopWidth\tBorderWidths No\tsets the top border's width of this component borderTopColor\tBorderColorVariant No\tsets the top border's color of this component borderRightWidth\tBorderWidths No\tsets the right border's width of this component borderRightColor\tBorderColorVariant No\tsets the right border's color of this component borderLeftWidth\tBorderWidths No\tsets the left border's width of this component borderLeftColor\tBorderColorVariant No\tsets the left border's color of this component borderRadius\tstring | number No\tsets the border's radius of this component borderRadiusTop\tstring | number No\tsets the border radius just for the top of the component borderRadiusBottom\tstring | number No\tsets the border radius just for the bottom of the component","keywords":""},{"title":"SaveButton","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Buttons and Links/SaveButton","content":"SaveButton A common component for the save button located at the header. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononSave\t() =&gt; void Yes\tfunction to run on save pressed disabled\tboolean Yes\tdisables this component a11yHint\tstring No\ta11y hint for this component","keywords":""},{"title":"FooterButton","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Buttons and Links/FooterButton","content":"FooterButton A common component to show a button at the bottom of the screen that takes the full width of the display. Optional Icon can be passed in to render next to text PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontext\tstring Yes\ttext that will display on the button textColor\tkeyof VATextColors | keyof VAButtonTextColors No\ttext color iconProps\tany No\tprops for icon onPress\t() =&gt; void No\tfunction called when pressed backGroundColor\tBackgroundVariant No\tbackground color testID\tstring No\ttest id a11yHint\tstring No\toptional accessibility hint","keywords":""},{"title":"SignoutButton","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Buttons and Links/SignoutButton","content":"SignoutButton Common component for the sign out button PropertiesExampleSource CodeAccessibility This component does not have props defined","keywords":""},{"title":"Errors","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Errors/","content":"Errors","keywords":""},{"title":"BasicError","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Errors/BasicError","content":"BasicError A common component to show an error PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononTryAgain\t() =&gt; void Yes\tfunction called when the Try again button is pressed messageText\tstring Yes\tmessage to display headerText\tstring No\ttext to appear in bold headerA11yLabel\tstring No\taccessibility hint for the header buttonA11yHint\tstring No\thint for the try again button label\tstring No\tlabel for button and accessibility title","keywords":""},{"title":"VAButton","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Buttons and Links/VAButton","content":"VAButton A common component to show a button that takes the full width of the view with gutters PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononPress\t() =&gt; void Yes\tfunction called when button is pressed label\tstring Yes\ttext appearing in the button buttonType\tButtonTypes Yes\tspecifies how the button will look - buttonPrimary has non white background, buttonSecondary has white background w/ colored border testID\tstring No\ta string value used to set the buttons testID/accessibility label a11yHint\tstring No\ttext to use as the accessibility hint disabled\tboolean No\toptional prop that disables the button when set to true disabledText\tstring No\toptional prop for text to display under the button if it is disabled * hideBorder\tboolean No\thides the border if set to true accessibilityState\tAccessibilityState No\toptional accessibility state iconProps\tany No\tprops for optional icon to display before text minHeight\tnumber No\tprops for optional min height","keywords":""},{"title":"CallHelpCenter","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Errors/CallHelpCenter","content":"CallHelpCenter A common component to show the help center contact info for when an error happens PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononTryAgain\t() =&gt; void No\toptional function called when the Try again button is pressed titleText\tstring No\toptional text for the title titleA11yHint\tstring No\toptional title a11y hint errorText\tstring No\toptional text for the error errorA11y\tstring No\toptional a11y hint for the error callPhone\tstring No\toptional phone number","keywords":""},{"title":"DowntimeError","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Errors/DowntimeError","content":"DowntimeError Common component to show an alert when the service is down PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionscreenID\tScreenIDTypes Yes\tThe screen id for the screen that has the errors","keywords":""},{"title":"NetworkConnectionError","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Errors/NetworkConnectionError","content":"NetworkConnectionError A common component to show an alert for when it is a network error PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononTryAgain\t() =&gt; void Yes\tfunction called when the Try again button is pressed","keywords":""},{"title":"ErrorComponent","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Errors/ErrorComponent","content":"ErrorComponent Main error handling component. This component will show the proper screen according to the type of error. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionscreenID\tScreenIDTypes Yes\tThe screen id for the screen that has the errors onTryAgain\t() =&gt; void No\toptional function called when the Try again button is pressed","keywords":""},{"title":"Layout and Organization","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Layout and Organization/","content":"Layout and Organization","keywords":""},{"title":"CollapsibleView","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Layout and Organization/CollapsibleView","content":"CollapsibleView CollapsibleView that on click reveals content, which is hidden again on another click PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontext\tstring Yes\ttext displayed on the touchable textColor\tColorVariant No\toptional color for the touchable text contentInTextArea\tboolean\ttrue\tNo\toptional param that renders the child content outside text area when set to false (defaults to true) a11yHint\tstring No\toptional a11y hint showInTextArea\tboolean\ttrue\tNo\tWhether to display any of the collapsible view in a text area. If false, contentInTextArea will have no effect. *","keywords":""},{"title":"LargeNavButton","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Layout and Organization/LargeNavButton","content":"LargeNavButton Reusable large navigation button PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontitle\tstring Yes\tstring for header and used to create testID for accessibility subText\tstring No\tstring secondary text that seats on the second row subTextA11yLabel\tstring No\ta11y string secondary text that seats on the second row a11yHint\tstring No\tstring for accessibility hint onPress\t() =&gt; void Yes\tfunction to be called when press occurs backgroundColor\tBackgroundVariant No\tBackgroundVariant color for background backgroundColorActive\tBackgroundVariant No\tBackgroundVariant color for active state textColor\tstring | number | symbol No\tVATextColors color for text iconColor\tstring | number | symbol No\tVAIconColors icon color borderWidth\tBorderWidths No\tBorderWidths possible widths for HomeNavButton borderColor\tBorderColorVariant No\tBorderColorVariant color for the borders borderColorActive\tBorderColorVariant No\tBorderColorVariant color for active state for the borders borderStyle\tBorderStyles No\tBorderStyles denotes the styling of the borders tagCount\tnumber No\tnumber for the tag tagCountA11y\tstring No\ta11y for the tag","keywords":""},{"title":"List","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Layout and Organization/List/","content":"List A common component for showing a list of &lt;ListItem&gt;. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionitems\tListItemObj[] Yes\tlist of items of which a button will be rendered per item title\tstring No\toptional title to use for the list titleA11yLabel\tstring No\toptional a11y hint for the title","keywords":""},{"title":"DefaultList","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Layout and Organization/List/DefaultList","content":"DefaultList Component to show a list composed of lines of display text built using TextLines PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionitems\tDefaultListItemObj[] &amp; ListItemObj[] Yes\tlist of items of which a button will be rendered per item selectable\tboolean No\tif true the text will be selectable title\tstring No\toptional title to use for the list titleA11yLabel\tstring No\toptional a11y hint for the title","keywords":""},{"title":"MessageList","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Layout and Organization/List/MessageList","content":"MessageList Display a list of buttons with text and optional actions PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionitems\tMessageListItemObj[] &amp; ListItemObj[] Yes\tlist of items of which a button will be rendered per item title\tstring No\toptional title to use for the list titleA11yLabel\tstring No\toptional a11y hint for the title","keywords":""},{"title":"BaseListItem","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Layout and Organization/List/BaseListItem","content":"BaseListItem Reusable component for menu items that take up the full width of the screen that is touchable. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontestId\tstring No\ttest id string also used for the accessibility label a11yHint\tstring Yes\tThe a11y hint text a11yValue\tstring No\toptional a11y text value a11yRole\tAccessibilityRole No\toptional accessibility role. By default it will be button a11yState\tAccessibilityState No\toptional accessibility state onPress\t() =&gt; void No\tonPress callback decorator\tButtonDecoratorType No\tDecorator Type to use decoratorProps\tListItemDecoratorProps No\tOptional props to be passed to the decorator children\tany No\tOptional child elements to use instead of listOfText if you need to do special styling backgroundColor\tBackgroundVariant No\tOptional background color for an individual item activeBackgroundColor\tBackgroundVariant No\tOptional active background color for an individual item claimsRequestNumber\tnumber No\tOptional file request number for the number indicator fileUploaded\tboolean No\tOptional file request if file was loaded to show check mark minHeight\tnumber No\tOptional min height","keywords":""},{"title":"SelectionList","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Layout and Organization/List/SelectionList","content":"SelectionList PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionitems\tSelectionListItemObj[] Yes\tlist of items to show onSelectionChange\t(totalSelected: Record&lt;string, boolean&gt;) =&gt; void No\tmethod to be triggered when the selected value change","keywords":""},{"title":"SimpleList","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Layout and Organization/List/SimpleList","content":"SimpleList Component to show a list with one line of text per item PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionitems\tSimpleListItemObj[] &amp; ListItemObj[] Yes\tlist of items of which a button will be rendered per item title\tstring No\toptional title to use for the list titleA11yLabel\tstring No\toptional a11y hint for the title","keywords":""},{"title":"MultiTouchCard","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Layout and Organization/MultiTouchCard","content":"MultiTouchCard PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionorderIdentifier\tstring No\tread by screen readers to identify the cards place in a list mainA11yLabel\tstring No\taccessibility label for the main section mainContent\tReactElement&lt;any, string | JSXElementConstructor&lt;any&gt;&gt; Yes\tcontent to display in the main section bottomOnPress\t() =&gt; void No\tcalled when the bottom button is pressed bottomContent\tReactElement&lt;any, string | JSXElementConstructor&lt;any&gt;&gt; No\tcontent to display in the bottom button bottomA11yHint\tstring No\thint for the bottom button action bottomA11yLabel\tstring No\taccessibility label for the bottom section","keywords":""},{"title":"Navigation","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Navigation/","content":"Navigation The VA Mobile app uses primary and secondary navigation components.","keywords":""},{"title":"Primary Navigation","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Navigation/Primary/","content":"Primary Navigation The primary navigation pattern for the VA mobile app is a standard tab/navigation bar. For a detailed description, see Navigation model templates. Also included in this section are engineering components that make up the navigation model templates.","keywords":""},{"title":"FocusedNavHeaderText","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Navigation/Primary/FocusedNavHeaderText","content":"FocusedNavHeaderText Component to use as a navigation header where accessibility focus is needed on the header in iOS on screen load PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionheaderTitle\tstring Yes\tsets the title's text","keywords":""},{"title":"HeaderTitle","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Navigation/Primary/HeaderTitle","content":"HeaderTitle Common component used for the navigation header title PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionfocusRef\tRef&lt;View&gt; No\tref for this component headerTitle\tstring No\tsets the header title accessible\tboolean\ttrue\tNo\tsets if it is accessible testID\tstring No\tsets the test id accessabilityLabel\tstring No\tsets the accessibility label","keywords":""},{"title":"Secondary Navigation","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Navigation/Secondary/","content":"Secondary Navigation Secondary navigation components are the navigation elements that allow the user to explore data presented by the app's features (within the categories provided by the primary navigation pattern).","keywords":""},{"title":"Carousel","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Navigation/Secondary/Carousel","content":"Carousel A common component to set up a carousel of screens and display a carousel tab at the bottom of the screen, which displays a skip button, continue button, and a progress bar PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionscreenList\tCarouselScreen[] Yes\tlist of screens with the screen name and the component in each item onCarouselEnd\t() =&gt; void Yes\tcalled when the skip button is clicked or the user has gone through all the carousel components translation\tTFunction Yes\tuseTranslations t function to translate the labels","keywords":""},{"title":"NavigationTabBar","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Navigation/Primary/NavigationTabBar","content":"NavigationTabBar Component for the bottom tab navigation PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionstate\tTabNavigationState&lt;ParamListBase&gt; Yes\tthe tab navigators current state navigation\t{ dispatch(action: Readonly&lt;{ type: string; payload?: object; source?: string; target?: string; }&gt; | ((state: Readonly&lt;{ key: string; index: number; routeNames: string[]; history?: unknown[]; routes: NavigationRoute&lt;ParamListBase, string&gt;[]; type: string; stale: false; }&gt;) =&gt; Readonly&lt;...&gt;)): void; ... 6 more ...; g... Yes\tthe tab navigators navigation helpers translation\tTFunction Yes\tuseTranslations t function to translate the labels","keywords":""},{"title":"CarouselTabBar","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Navigation/Secondary/CarouselTabBar","content":"CarouselTabBar A common component with the carousel tab bar content. Displays skip button, continue button, and a progress bar PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionnavigation\t{ dispatch(action: Readonly&lt;{ type: string; payload?: object; source?: string; target?: string; }&gt; | ((state: Readonly&lt;{ key: string; index: number; routeNames: string[]; history?: unknown[]; routes: NavigationRoute&lt;ParamListBase, string&gt;[]; type: string; stale: false; }&gt;) =&gt; Readonly&lt;...&gt;)): void; ... 6 more ...; g... Yes\tthe tab navigators navigation helpers onCarouselEnd\t() =&gt; void Yes\tcalled when the skip button is clicked or the user has gone through all the carousel components translation\tTFunction Yes\tuseTranslations t function to translate the labels screenList\tCarouselScreen[] Yes\tlist of screens with the screen name and the component in each item","keywords":""},{"title":"Pagination","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Navigation/Secondary/Pagination","content":"Pagination A common component for showing pagination on the page. Displays previous arrow, next arrow, and copy message based on current page and item. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionpage\tnumber Yes\tpage number totalEntries\tnumber Yes\ttotal number of items pageSize\tnumber Yes\tpageSize onPrev\t() =&gt; void Yes\tfunction to be called when previous is selected onNext\t() =&gt; void Yes\tfunction to be called when next is selected","keywords":""},{"title":"Selection and Input","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Selection and Input/","content":"Selection and Input","keywords":""},{"title":"SegmentedControl","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Navigation/Secondary/SegmentedControl","content":"SegmentedControl A common component for filtering UI views by segments or lanes. Used for things like toggling between Active/Completed claims and Future/Past Appointments PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononChange\t(selection: string) =&gt; void Yes\tfunction to call when the selected value has changed values\tstring[] Yes\tThe values to signify selection options titles\tstring[] Yes\tthe text to display in the selection option UI selected\tnumber Yes\tthe index of the currently selected item. used to set initial state accessibilityHints\tstring[] No\toptional list of accessibility hints, ordering dependent on values/titles ordering","keywords":""},{"title":"Form Elements","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Selection and Input/Form Elements/","content":"Form Elements","keywords":""},{"title":"FormAttachments","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Selection and Input/Form Elements/FormAttachments","content":"FormAttachments A common component for form attachments, displays Attachments heading with helper link, already attached items with remove option, and an optional large button. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionoriginHeader\tstring Yes\theader for page title display removeOnPress\t(attachment: any) =&gt; void No\tcallback called on click of remove link for an attachment largeButtonProps\tOmit&lt;VAButtonProps, &quot;iconProps&quot; | &quot;buttonType&quot;&gt; No\toptional props for large button attachmentsList\tany[] No\tlist of current attachments a11yHint\tstring No\toptional a11y Hint","keywords":""},{"title":"RadioGroup","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Selection and Input/Form Elements/RadioGroup","content":"RadioGroup A common component to display radio button selectors for a list of selectable items PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionoptions\tradioOption&lt;T&gt;[] Yes\tZero based array of options. An option is an object with both a value which is the relevant data, and a label which is displayed as a string to represent the value. value\tT No\tCurrently selected option. An initial value can be used or this can be left undefined which will have nothing initially selected. onChange\t(val: T) =&gt; void Yes\tCall back function that passes the newly selected option's value as an argument to. disabled\tboolean\tfalse\tNo\toptional boolean that disables the radio group when set to true error\tstring No\toptional error to display isRadioList\tboolean No\toptional boolean to indicate to use the radio buttons in a list radioListTitle\tstring No\toptional text to show as the radio list title","keywords":""},{"title":"FormWrapper","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Selection and Input/Form Elements/FormWrapper","content":"FormWrapper A common component to wrap forms in that handles error states of each field PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionfieldsList\tFormFieldType&lt;T&gt;[] Yes\tlist of form field objects to display onSave\t() =&gt; void Yes\tcallback called when onSaveClicked is true and there are no field errors onSaveClicked\tboolean Yes\tboolean that when set to true calls the form validation and set field errors if they exist, otherwise it calls onSave setOnSaveClicked\t(value: boolean) =&gt; void Yes\tcallback that updates the onSaveClicked prop setFormContainsError\t(containsError: boolean) =&gt; void No\toptional callback that sets to true if the form currently has an error resetErrors\tboolean No\toptional boolean that resets all field errors when set to true setResetErrors\t(value: boolean) =&gt; void No\toptional callback to set the resetErrors prop. must be set when resetErrors is set.","keywords":""},{"title":"Switch","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Selection and Input/Form Elements/Switch","content":"Switch A common component for the react native switch component PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononPress\t(value: boolean) =&gt; void Yes\tcallback called on value change of the switch on\tboolean No\toptional value of switch, updated with onPress testID\tstring No\toptional testID of switch a11yHint\tstring No\toptional accessibilityHint","keywords":""},{"title":"VASelector","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Selection and Input/Form Elements/VASelector","content":"VASelector A common component to display a checkbox with text PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionselectorType\tSelectorType\tSelectorType.Checkbox\tNo\trender checkbox or radio button selected\tboolean Yes\twhen true displays the filled checkbox/radio , when false displays the empty checkbox/radio onSelectionChange\t(selected: boolean) =&gt; void Yes\tsets the value of selected on click of the checkbox/radio labelKey\tstring Yes\ttranslated labelKey displayed next to the checkbox/radio labelArgs\t{ [key: string]: string; } No\toptional arguments to pass in with the labelKey during translation disabled\tboolean No\toptional boolean that disables the VASelector/radio when set to true a11yLabel\tstring No\toptional accessibilityLabel a11yHint\tstring No\toptional accessibilityHint error\tstring No\toptional error to display for the checkbox setError\t(value?: string) =&gt; void No\toptional callback to set the error message isRequiredField\tboolean No\toptional boolean that marks the component as required","keywords":""},{"title":"Pickers","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Selection and Input/Pickers/","content":"Pickers","keywords":""},{"title":"VATextInput","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Selection and Input/Form Elements/VATextInput","content":"VATextInput Text input with a label PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptioninputType\tVATextInputTypes Yes\tType of the input. Will determine the keyboard used value\tstring No\tInitial value of the input. If blank it will show the placeholder labelKey\tstring No\ti18n key for the label onChange\t(val: string) =&gt; void Yes\tHandle the change in input value maxLength\tnumber No\tMaximum length of the input onEndEditing\t() =&gt; void No\tHandle input once the user is done typing testID\tstring No\toptional testID for the overall component inputRef\tRefObject&lt;TextInput&gt; No\toptional ref value isRequiredField\tboolean No\toptional boolean that displays required text next to label if set to true helperTextKey\tstring No\toptional key for string to display underneath label setError\t(error?: string) =&gt; void No\toptional callback to update the error message if there is an error error\tstring No\tif this exists updates input styles to error state validationList\tValidationFunctionItems[] No\toptional list of validation functions to check against isTextArea\tboolean No\toptional boolean that when true displays a text area rather than a single line text input setInputCursorToBeginning\tboolean No\toptional boolean to set the cursor to the beginning of a string value","keywords":""},{"title":"PickerList","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Selection and Input/Pickers/PickerList","content":"PickerList Display a list of buttons with text and optional actions PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionitems\tany[] Yes\tlist of items of which a button will be rendered per item title\tstring No\toptional title to use for the list titleA11yLabel\tstring No\toptional a11y hint for the title","keywords":""},{"title":"VADatePicker","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Selection and Input/Pickers/VADatePicker","content":"VADatePicker Common component for selecting a date. (This can be updated to a date/time picker later if we need it) PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiondefaultString\tstring Yes\tWhat should the picker show if no value is selected? onChange\t(date?: Date) =&gt; void Yes\tfunction to run on date selected","keywords":""},{"title":"Tags","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Tags/","content":"Tags","keywords":""},{"title":"LabelTag","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Tags/LabelTag","content":"LabelTag Common component to show a text inside a tag PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontext\tstring Yes\tMessage to be shown on the tag labelType\tLabelTagTypes Yes\tDefines the color and look of the tag a11yLabel\tstring No\tOptional accessibility label onPress\t() =&gt; void No\tOptional method called when tag is pressed a11yHint\tstring No\tOptional accessibility hint if there is an on press","keywords":""},{"title":"MessagesCountTag","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Tags/MessagesCountTag","content":"MessagesCountTag A common component to show a count of a particular item within a page before clicking to enter that page. For example, this tag would be used to display the number of unread messages in one's inbox. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionunread\tnumber Yes\tnumber to be shown on the tag","keywords":""},{"title":"Text Views","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/TextViews/","content":"Text Views","keywords":""},{"title":"TextArea","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/TextViews/TextArea","content":"TextArea Text area block for content PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononPress\t() =&gt; void No\tonPress callback noBorder\tboolean No\tprop to remove border","keywords":""},{"title":"VAModalPicker","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Selection and Input/Pickers/VAModalPicker","content":"VAModalPicker A common component to display a picker for the device with an optional label PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionselectedValue\tstring Yes\tCurrently selected item from list of options onSelectionChange\t(selectValue: string) =&gt; void Yes\tCalled when the selected value is changed onClose\t() =&gt; void No\tCalled when the cancel button is pressed pickerOptions\tPickerItem[] Yes\tlist of items of containing types label and value for each option in the picker labelKey\tstring No\ti18n key for the text label next the picker field disabled\tboolean No\toptional boolean that disables the picker when set to true testID\tstring No\toptional testID for the overall component isRequiredField\tboolean No\toptional boolean that displays required text next to label if set to true helperTextKey\tstring No\toptional key for string to display underneath label setError\t(error?: string) =&gt; void No\toptional callback to update the error message if there is an error error\tstring No\tif this exists updated picker styles to error state validationList\tValidationFunctionItems[] No\toptional list of validation functions to check against includeBlankPlaceholder\tboolean No\tIf true, will include a blank option at the top of the list with a blank value displayButton\tboolean\tfalse\tNo\trenders a button instead of form field buttonText\tstring No\ti18n key text for the name of the button confirmBtnText\tstring No\ti18n key text for the picker confirm button showModalByDefault\tboolean No\tshows the modal by default","keywords":""},{"title":"TextLines","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/TextViews/TextLines","content":"TextLines Component to render individual lines of text. Each text line will wrap as needed and subsequent lines will be on the next line PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionlistOfText\t(TextLine | TextLineWithIconProps)[] No\tList of text for the button selectable\tboolean No\tif true the text will be selectable","keywords":""},{"title":"TextLineWithIcon","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/TextViews/TextLineWithIcon","content":"TextLineWithIcon Common component to show an icon with a line of text PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptioniconProps\tany No\tProps for icon you want to display in this line of text text\tstring Yes\tstring to display variant\tstring | number | symbol No\tsets the variant of the text, if not set defaults to MobileBody color\tstring | number | symbol No\tsets the text to the specified color, if not specified defaults to primary textAlign\t&quot;left&quot; | &quot;right&quot; | &quot;center&quot; No\talignment of the text textTag\t{ labelType: LabelTagTypes; } No\tsets the text to be a tag a11yLabel\tstring No mt\tstring | number No\tset margin top of this component mb\tstring | number No\tset margin bottom of this component","keywords":""},{"title":"VABulletList","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/TextViews/VABulletList","content":"VABulletList Displays the list of text as a bulleted list PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionlistOfText\t(string | VABulletListText)[] Yes\tlist of text to display in a bulleted list","keywords":""},{"title":"TextView","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/TextViews/TextView","content":"TextView A common component for styling text in the application. It also conforms to the Box properties so you don't need to wrap it with a Box view for margins / paddings PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionm\tNumOrStrPx No\tset margin of this component mt\tNumOrStrPx No\tset margin top of this component mr\tNumOrStrPx No\tset margin right of this component mb\tNumOrStrPx No\tset margin bottom of this component ml\tNumOrStrPx No\tset margin left of this component mx\tNumOrStrPx No\tset margin right and left of this component my\tNumOrStrPx No\tset margin top and bottom of this component p\tNumOrStrPx No\tset padding of this component pt\tNumOrStrPx No\tset padding top of this component pr\tNumOrStrPx No\tset padding right of this component pb\tNumOrStrPx No\tset padding bottom of this component pl\tNumOrStrPx No\tset padding left of this component px\tNumOrStrPx No\tset padding right and left of this component py\tNumOrStrPx No\tset padding top and bottom of this component top\tstring | number No\tsets the number of logical pixels to offset the top edge of this component left\tstring | number No\tsets the number of logical pixels to offset the left edge of this component right\tstring | number No\tsets the number of logical pixels to offset the right edge of this component bottom\tstring | number No\tsets the number of logical pixels to offset the bottom edge of this component position\t&quot;relative&quot; | &quot;absolute&quot; No\tsets the positioning to relative or absolute of this component display\t&quot;none&quot; | &quot;flex&quot; No\tsets the display type of this component flex\tnumber No\tsets the flex property of this component flexGrow\tnumber No\tdescribes how any space within a container should be distributed among its children along the main axis flexShrink\tnumber No\tflexShrink describes how to shrink children along the main axis in the case in which the total size of the children overflows the size of the container on the main axis flexWrap\t&quot;wrap&quot; | &quot;nowrap&quot; | &quot;wrap-reverse&quot; No\tcontrols whether children can wrap around after they hit the end of a flex container flexDirection\t&quot;column&quot; | &quot;row&quot; No\tcontrols which directions children of a container go overflow\t&quot;hidden&quot; | &quot;visible&quot; | &quot;scroll&quot; No\tcontrols how children are measured and displayed justifyContent\t&quot;center&quot; | &quot;flex-start&quot; | &quot;flex-end&quot; | &quot;space-between&quot; No\taligns children in the main direction alignItems\t&quot;center&quot; | &quot;flex-start&quot; | &quot;flex-end&quot; No\taligns children in the cross direction alignSelf\t&quot;auto&quot; | FlexAlignType No\tcontrols how a child aligns in the cross direction, overriding the alignItems of the parent width\tstring | number No\tsets the width of this component minWidth\tstring | number No\tsets the min width of this component height\tstring | number No\tsets the height of this component minHeight\tstring | number No\tsets the min height of this component textAlign\t&quot;left&quot; | &quot;right&quot; | &quot;center&quot; No\talings the text of this component backgroundColor\tBackgroundVariant No\tsets the background color of this component opacity\tnumber No\tsets the opacity of this component borderWidth\tBorderWidths No\tsets the border width of this component borderColor\tBorderColorVariant No\tsets the border color of this component borderStyle\tBorderStyles No\tsets the border style of this component borderBottomWidth\tBorderWidths No\tsets the bottom border's width of this component borderBottomColor\tBorderColorVariant No\tsets the bottom border's color of this component borderTopWidth\tBorderWidths No\tsets the top border's width of this component borderTopColor\tBorderColorVariant No\tsets the top border's color of this component borderRightWidth\tBorderWidths No\tsets the right border's width of this component borderRightColor\tBorderColorVariant No\tsets the right border's color of this component borderLeftWidth\tBorderWidths No\tsets the left border's width of this component borderLeftColor\tBorderColorVariant No\tsets the left border's color of this component borderRadius\tstring | number No\tsets the border's radius of this component borderRadiusTop\tstring | number No\tsets the border radius just for the top of the component borderRadiusBottom\tstring | number No\tsets the border radius just for the bottom of the component color\tColorVariant No\tDefaults to primary text variant\tstring | number | symbol No\tDefaults to regular textTransform\t&quot;none&quot; | &quot;uppercase&quot; | &quot;lowercase&quot; | &quot;capitalize&quot; No\tThe text transformation textDecoration\t&quot;none&quot; | &quot;underline&quot; | &quot;line-through&quot; | &quot;underline line-through&quot; No\ttext decoration textDecorationColor\tColorVariant No\ttext decoration color onPress\t() =&gt; void No\tonPress callback allowFontScaling\tboolean No\tif false font won't scale if screen font size changes selectable\tboolean\tfalse\tNo\tif true the text will be selectable numberOfLines\tnumber No\tif set, sets the number of lines the text will render on. if the text exceeds the line amount, it will ellipsis maxFontSizeMultiplier\tnumber No\tMax size for font when user adjusts their font scaling","keywords":""},{"title":"Uncategorized","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Uncategorized/","content":"Uncategorized","keywords":""},{"title":"AppVersionAndBuild","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Uncategorized/AppVersionAndBuild","content":"AppVersionAndBuild Common component to display the apps version and build number PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontextColor\tstring | number | symbol\tbodyText\tNo\tcolor of the text textWeight\tstring | number | symbol\tMobileBody\tNo\tfont weight of the text","keywords":""},{"title":"NotificationManager","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Uncategorized/NotificationManager","content":"NotificationManager notification manager component to handle all push logic PropertiesExampleSource CodeAccessibility This component does not have props defined","keywords":""},{"title":"VAImage","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Uncategorized/VAImage","content":"VAImage A common component to display static images. New images need to be placed in VAImge/image and in Xcode under VAMobile/Images.xcassets. Examples/details can be found in VAImage component. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionname\t&quot;PaperCheck&quot; Yes\tenum name of the image a11yLabel\tstring Yes\taccessibilityLabel for the overall component marginX\tnumber Yes\tmargins for the image","keywords":""},{"title":"VAIcon","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Uncategorized/VAIcon","content":"VAIcon A common component to display assets(svgs). Svgs need to place in VAIcon/svgs folder. Set fill to #000 and stroke to #00F in the svg so VAIcon component can set the fill/stroke color. Examples/details can be found in VAIcon component. PropertiesExampleSource CodeAccessibility This component does not have props defined","keywords":""},{"title":"VAScrollView","type":0,"sectionRef":"#","url":"docs/UX/ComponentsSection/Uncategorized/VAScrollView","content":"VAScrollView A common component that provides a scrollable view. Use this instead of ScrollView. This component is a wrapper for react-native ScrollView that has a scrollbar styling fix PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionscrollViewRef\tRef&lt;ScrollView&gt; No\tOptional reference prop to determine scroll position backgroundColor\tstring | number | symbol No\toptional background color to override the main background removeInsets\tboolean No\tremove insets","keywords":""},{"title":"Foundations","type":0,"sectionRef":"#","url":"docs/UX/Foundations/","content":"","keywords":""},{"title":"Our approach​","type":1,"pageTitle":"Foundations","url":"docs/UX/Foundations/#our-approach","content":"As outlined in our project mission, the VA: Health and Benefits app should be a trusted source for Veterans to quickly and easily check the status of their VA services and complete simple, transactional tasks across their health and benefits. "},{"title":"Values​","type":1,"pageTitle":"Foundations","url":"docs/UX/Foundations/#values","content":"In order to accomplish this we approach our design work by the following values: Accessibility first The VA Mobile App is an application that supports all users and their needs. This means we design all aspects of the application to be inclusive and accessible. Human centered In all aspects of the design process, we must understand and connect with Veterans on a human level.  "},{"title":"Process​","type":1,"pageTitle":"Foundations","url":"docs/UX/Foundations/#process","content":"Our values are embodied in our design process: Discovery &amp; research In order to understand a new feature or problem we interview users, go through research done by other VA teams, and/or look at other companies or applications for inspiration. Iteration cycles In most cases, we go through several iterations of a design before it is handed off to engineering. Most designs begin with sketches or low-fidelity mockups in Balsamiq. Accessibility &amp; technical feasibility reviews These reviews are conducted when appropriate and are used to clarify designs from an accessibility and engineering perspective. Incorporation of standard mobile conventions In an effort to utilize components and functionality that user’s are most familiar with. "},{"title":"Principles​","type":1,"pageTitle":"Foundations","url":"docs/UX/Foundations/#principles","content":"Principles help in establishing a foundation for a system or application. They allow teams to have a unifying vision and objective standard of measurement. VA Design Principles "},{"title":"Content","type":0,"sectionRef":"#","url":"docs/UX/Foundations/Content","content":"","keywords":""},{"title":"Voice and tone​","type":1,"pageTitle":"Content","url":"docs/UX/Foundations/Content#voice-and-tone","content":"We follow the VA design system content principles. In following these principles, we create consistent, clear, and customer-centered content that is based on Veteran feedback. In addition, we follow VA plain language standards to help Veterans and their families find and understand the information they need. Since we create content for health-related features, we also follow the VA content guidelines for health content. "},{"title":"Accessible and inclusive language​","type":1,"pageTitle":"Content","url":"docs/UX/Foundations/Content#accessible-and-inclusive-language","content":"We write for all Veterans and those who care for them. Therefore, we use people-first language that is inclusive of the wide range of abilities and experiences of our users. We avoid words that are insensitive to the disabilities faced by our users. For example, we don’t use “view” or “see,” since a number of our users are blind or low-vision. We also avoid idioms, such as “at your fingertips” or “give an arm or a leg.” Not only are idioms often insensitive to Veterans’ experience but also idioms don’t follow plain language standards. Resources to consider: Gov UK inclusive communicationsGeorgetown University best practices guideMicrosoft guideline "},{"title":"Grammar​","type":1,"pageTitle":"Content","url":"docs/UX/Foundations/Content#grammar","content":"We follow VA.gov content style guide rules regarding grammar with the following adjustments: "},{"title":"Capitalization​","type":1,"pageTitle":"Content","url":"docs/UX/Foundations/Content#capitalization","content":"Screen names are title case. With the new navigation design, we will change to sentence case for screen titles.All other headings in the app are sentence case.ButtonsFor native actions, we use title case for iOS and all caps for Android.For interface buttons, we use sentence case. "},{"title":"Times and time zones​","type":1,"pageTitle":"Content","url":"docs/UX/Foundations/Content#times-and-time-zones","content":"We currently use AM and PM (both letters capitalized and no punctuation) since this is default formatting in React Native. "},{"title":"Word choice, spelling, and naming conventions​","type":1,"pageTitle":"Content","url":"docs/UX/Foundations/Content#word-choice-spelling-and-naming-conventions","content":""},{"title":"Content briefs​","type":1,"pageTitle":"Content","url":"docs/UX/Foundations/Content#content-briefs","content":"We use content briefs to ensure consistent word choice and usage with other VA teams. VA Sitewide Content and IA team creates content briefs, sometimes in collaboration with the VA Mobile App content designer. "},{"title":"Word List​","type":1,"pageTitle":"Content","url":"docs/UX/Foundations/Content#word-list","content":"We use standard American English spelling in Merriam-Webster Dictionary. The words on the VA.gov word list are exceptions or need clarification. "},{"title":"Naming conventions​","type":1,"pageTitle":"Content","url":"docs/UX/Foundations/Content#naming-conventions","content":"We follow VA.gov content style guide’s rules for naming and labels for tools, products, benefits, offices, and programs. In most cases, VA.gov will have already established a name for a tool, benefit, etc. For cases in which we would like to suggest a different name or need help with naming an app-specific feature, we work closely with VA Sitewide Content team to ensure alignment. "},{"title":"Error messages​","type":1,"pageTitle":"Content","url":"docs/UX/Foundations/Content#error-messages","content":"VA.gov’s design system includes a section on how to help users recover from errors. It details the structure, style, and tone for error and informational messages. When writing an error message, we use clear, direct, and actionable language. The VA.gov content style guide includes an error message dictionary/reference tool for different scenarios. "},{"title":"New content​","type":1,"pageTitle":"Content","url":"docs/UX/Foundations/Content#new-content","content":"VA Mobile App team has a dedicated content designer. This person works with VA Sitewide Content team to implement their overall strategy and ensure alignment between the app and VA.gov. In some cases, the content design may request support from the Sitewide Content team by submitting an issue ticket on Github. "},{"title":"Accessibility","type":0,"sectionRef":"#","url":"docs/UX/Foundations/Accessibility","content":"","keywords":""},{"title":"Accessibility principles​","type":1,"pageTitle":"Accessibility","url":"docs/UX/Foundations/Accessibility#accessibility-principles","content":""},{"title":"Based on VA standards​","type":1,"pageTitle":"Accessibility","url":"docs/UX/Foundations/Accessibility#based-on-va-standards","content":"The VA design system does not have comprehensive accessibility guidelines. However, it does provide accessibility samples and guidelines when it comes to design, content, and components. We base our design system on this existing system with modifications for native mobile apps. "},{"title":"Content takes center stage​","type":1,"pageTitle":"Accessibility","url":"docs/UX/Foundations/Accessibility#content-takes-center-stage","content":"All content throughout the app is clear and direct to ensure that users understand the information presented to them. A more thorough explanation of our best practices for accessible content can be found on the content documentation page. "},{"title":"Go beyond guideline standards​","type":1,"pageTitle":"Accessibility","url":"docs/UX/Foundations/Accessibility#go-beyond-guideline-standards","content":"The VA Mobile app targets WCAG 2.2 Level AA and Level AAA success criteria, and section 508 guidelines. For more information, see the following resources: WCAG 2.1WCAG 2.2 (draft)508 guidelines "},{"title":"Comprehensive disability support​","type":1,"pageTitle":"Accessibility","url":"docs/UX/Foundations/Accessibility#comprehensive-disability-support","content":"We aim to provide a usable experience for all Veterans and include disability support for: Individuals who use assistive technologyIndividuals with physical disabilitiesIndividuals with visual impairmentsIndividuals with hearing impairmentsIndividuals with mental or cognitive disabilities "},{"title":"Assistive technology support​","type":1,"pageTitle":"Accessibility","url":"docs/UX/Foundations/Accessibility#assistive-technology-support","content":"Our app and components are tested for accessibility with automated and manual techniques. Users should expect to be able to access our app using modern assistive technologies. These include native and third-party tools like: Screen readersSpeech recognition programsSupport for low vision and color blindnessBluetooth mouse and keyboardTools for readability "},{"title":"Beyond disabilities​","type":1,"pageTitle":"Accessibility","url":"docs/UX/Foundations/Accessibility#beyond-disabilities","content":"We believe that accessibility also goes beyond disabilities and we strive to provide access to our app for users with limited connectivity and device performance. "},{"title":"The Section 508 law​","type":1,"pageTitle":"Accessibility","url":"docs/UX/Foundations/Accessibility#the-section-508-law","content":"Section 508 is a federal law that requires all U.S. government agencies to make their electronic and information technology and data accessible to everyone. By law, agencies must provide people with disabilities the same level of access as those without disabilities. "},{"title":"Resources​","type":1,"pageTitle":"Accessibility","url":"docs/UX/Foundations/Accessibility#resources","content":"Accessibility Checklist for UX DesignersAccessibility Checklist for Content DesignersVA.gov Mobile Accessibility Testing Plan on GithubDraft Native Mobile Accessibility (A11y) Resources &amp; Articles on Google Docs "},{"title":"Design elements","type":0,"sectionRef":"#","url":"docs/UX/Foundations/DesignElements","content":"","keywords":""},{"title":"Elements​​","type":1,"pageTitle":"Design elements","url":"docs/UX/Foundations/DesignElements#elements","content":""},{"title":"Color​","type":1,"pageTitle":"Design elements","url":"docs/UX/Foundations/DesignElements#color","content":"The VA mobile app has two color themes: Light and Dark. The VA mobile app themes use colors from the VA style guide, and only deviate if necessary for accessibility purposes.  Themes Light theme in FigmaDark theme in Figma See also FrontEnd: Fonts and Colors "},{"title":"Typography​","type":1,"pageTitle":"Design elements","url":"docs/UX/Foundations/DesignElements#typography","content":"Typography in the VA mobile app generally follows typography used by VA.gov with some adjustments. With native and OS specific components we utilize OS defined typography.  Typography in FigmaSee also FrontEnd: Fonts and Colors "},{"title":"Icons​","type":1,"pageTitle":"Design elements","url":"docs/UX/Foundations/DesignElements#icons","content":"Icons are used sparingly throughout the VA mobile app as a way to enhance user understanding and wayfinding.  Icons in FigmaSee also FrontEnd: Icons "},{"title":"Grid​","type":1,"pageTitle":"Design elements","url":"docs/UX/Foundations/DesignElements#grid","content":" Grid in Figma "},{"title":"Resources​","type":1,"pageTitle":"Design elements","url":"docs/UX/Foundations/DesignElements#resources","content":"VA Mobile App Design Library in FigmaNeeds to be updated: MVP Mobile App UI Styles on Google Docs "},{"title":"Information Architecture","type":0,"sectionRef":"#","url":"docs/UX/Foundations/Information-Architecture","content":"","keywords":""},{"title":"Defining information architecture​","type":1,"pageTitle":"Information Architecture","url":"docs/UX/Foundations/Information-Architecture#defining-information-architecture","content":"Information architecture (IA) is the practice of organizing, structuring, and labeling content in an effective and sustainable way. This guide is intended to help designers and content maintainers make content within the VA mobile app usable and findable to Veterans. "},{"title":"Information Architecture principles​","type":1,"pageTitle":"Information Architecture","url":"docs/UX/Foundations/Information-Architecture#information-architecture-principles","content":"The following guiding principles are used to help Veterans find information and complete tasks within the VA Health and Benefits app: Considers the larger VA system: The app’s IA and navigational language consider VA touchpoints, properties and programs outside of the mobile app (digital and physical), with each thing working together as an omnichannel system.Consistent sense of place: The app uses multiple wayfinding approaches to communicate where users are now in the app and where they can go from there. Examples of this are displaying global navigation on every screen in the hierarchy, screen names that are unique and descriptive, using common screen transitions to communicate a screen's position in the hierarchy, and including descriptive back labels on each screen.Delivers value at every level: Each screen in the app should contain valuable and/or actionable content—no screens that are just lists of links. Extensible: The app’s IA and navigation model leave room to expand its feature set by considering and anticipating future organizational needs.Informed by Veterans: IA decisions are based on user research conducted with Veterans, examining their mental models around the organization of common tasks and undertanding of labels, as well as getting feedback on proposed solutions. Keeps it simple: Content is prioiritized and includes only what’s absolutely necessary—the fewer elements (number of levels in the hierarchy, number of screens, number of links on a screen) the better. References:VA.gov Information Architecture (IA) teamBest Practices for IA on VA.govVA.gov Design principles "},{"title":"When to think about IA​","type":1,"pageTitle":"Information Architecture","url":"docs/UX/Foundations/Information-Architecture#when-to-think-about-ia","content":"Launching a new feature in the VA Health and Benefits appAdding a new category or subsection to the VA Health and Benefits appRewriting content and needing to split or merge an existing screenLooking to improve the findability of an existing feature and/or screenRemoving a feature and/or screenChanging the UX of global navigational elements (i.e. tab bar/bottom navigation, top bar, including treatments for back buttons, contextual actions and screen titles) "},{"title":"IA documentation​","type":1,"pageTitle":"Information Architecture","url":"docs/UX/Foundations/Information-Architecture#ia-documentation","content":"Understanding what’s guiding the app’s current information architecture and make future decisions that are in line with the existing organization, navigation, labeling, and indexing systems. "},{"title":"Background​","type":1,"pageTitle":"Information Architecture","url":"docs/UX/Foundations/Information-Architecture#background","content":"The VA Health and Benefits app’s Information Architecture and navigation model are based on the findings and output from a multi-stage, collaborative and cross-functional design and research process: Information Architecture and Navigation - High Level Project Summary Phase I: Two rounds of card sorting (open and closed) with VeteransPhase II: Navigation model design exploration, audit and comparative analysisPhase III: Evaluative testing with Veterans, including a usability study of the proposed navigation model and sitemap reflected through a low-fidelity prototype "},{"title":"Taxonomy description​","type":1,"pageTitle":"Information Architecture","url":"docs/UX/Foundations/Information-Architecture#taxonomy-description","content":"The VA Health and Benefits app’s IA contains four top level categories: Home, Benefits, Health and [Payments]. Each category contains at least two features and/or subcategories. Features within each category should be grouped into subsections if the number of features in a category exceeds six. Top level categories and contents​ Home: The app’s default screen—displays a combined, personalized view of the information (and tasks) most relevant to the individual Veteran from across the VA, plus persistent access to general VA info (ex: contact and location finder) and lesser used features like Profile and Settings. Profile (Subcategory): Infrequently updated items like personal information (such as contact information, military information, DOB) that isn’t specific to a single category and app settings. Health: All health-related features and statuses. Features: Appointments, Pharmacy, Medical records, Messaging, COVID-19 updates. Benefits: All benefit-related features and statuses that are not health-related. Features: Disability rating, Claims, Education, VA Letters [Payments]: A unified section for managing financial information from across the VA. Features: Benefit payments, medical copays, bills, travel reimbursements, direct deposit information. "},{"title":"Sitemap/flow diagram​","type":1,"pageTitle":"Information Architecture","url":"docs/UX/Foundations/Information-Architecture#sitemapflow-diagram","content":"A sitemap is a planning tool that visually shows how information will be grouped and labeled, where content will be located, and how a user will move through the app. This adaptation of a standard sitemap includes the system display logic for screens that have variants, key actions (buttons, links), common processes and points where it makes use of native mobile integrations. This is the source of truth for the app’s IA. Pre-redesign: VA Mobile App: Detailed Sitemap/flow diagram (Feb 2022)Post redesign: VA Mobile App: Detailed Sitemap/flow diagram (June 2022)png | mural  "},{"title":"Adding new items to the app’s Information Architecture​","type":1,"pageTitle":"Information Architecture","url":"docs/UX/Foundations/Information-Architecture#adding-new-items-to-the-apps-information-architecture","content":"A feature’s placement within the app’s navigation and taxonomy should take user mental models, business goals, and the feature type into account. Determining Navigation and Information Architecture Placement for New VA Mobile App Features is a guide intended to help teams decide where a new feature belongs in this app’s sitemap and navigation model. Always try to find a placement in an existing category first before proposing a new top-level category for a feature. Confirm new category names and contents with card sort research before adding to the app.Within a category, keep the hierarchy as flat as possible in terms of screens (limit the levels it’s possible to drill down through in order to get to child screens), but without inlcuding too many options on a single screen. If there are many features within a category, group the features and label the groups at category level before introducing additional levels into the screen hierarchy—this helps avoid cognitive overload.All features in the VA mobile app should have a primary placement within the app’s taxonomy, even if there are multiple entry points for it at different locations within the app (example of secondary entry points: personalized home screen content, cross-references within other sections).When content outgrows the current category structure, conduct card sort research to determine new category names and contents (Avoid using “hamburger” and “more” menus as primary navigation). "},{"title":"How We Work","type":0,"sectionRef":"#","url":"docs/UX/How-We-Work/","content":"How We Work Where we workWorking with othersDesigning the UIDesign LibrarianBranching in Figma","keywords":""},{"title":"Design librarian","type":0,"sectionRef":"#","url":"docs/UX/How-We-Work/design-librarian","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Design librarian","url":"docs/UX/How-We-Work/design-librarian#overview","content":"What is a design librarian? Design librarians are a rotating designer who maintains and improves how we work in Figma and serves as a resource within the mobile team, VA, and Ad Hoc.How long does a design librarian serve? Design librarians serve for a full quarter. During the first month, they shadow the previous librarian. During the second month, they work independently. And during the third month, they onboard the next librarian.How much time is expected per week? Design librarians are expected to spend less than X hours per week, but this can fluctuate depending on their current workload. "},{"title":"Responsibilities​","type":1,"pageTitle":"Design librarian","url":"docs/UX/How-We-Work/design-librarian#responsibilities","content":""},{"title":"Maintenance​","type":1,"pageTitle":"Design librarian","url":"docs/UX/How-We-Work/design-librarian#maintenance","content":"Add/update components in the library Designer creates branch within Experimental Library section of Design Library and works on component updates. See how to branch in Figma.Designer submits branch to Librarian for reviewSlack notifies Librarian of new branch for review in #va-mobile-app-design channelLibrarian reviews branch and works with the Designer to resolve any issues within 24 hours (?) Librarian reviews components against the criteria in this doc. For new and/or significant updates, Librarian and Designer submit component updates to Component Committee for reviewLibrarian merges branch in the Design Library and Slack notifies Design Team of new componentLibrarian finalizes documentation with Designer and updates doc site Ensure feature files are consistent Librarian is responsible for creating new files to ensure that files are set up consistentlyLibrarian will review files before front-end handoff Are design tokens being used properly?Are components being used properly?Are templates being used properly?Are any components detached from the library? Maintain and update app store images "},{"title":"Improvement​","type":1,"pageTitle":"Design librarian","url":"docs/UX/How-We-Work/design-librarian#improvement","content":"Review Figma files for any inconsistencies or areas of improvement. Share findings with the UX team and work with UX lead to make any improvements. Improve how we work in Figma. Select a topic to learn about. Share findings with the UX team and work with UX lead to make any improvements. Suggested topics include:Figma Refine how design tokens are set upRefine how existing components are set upUpdate component metadataStandardize how we annotate filesSet up content management system (CMS)Research experimental design libraryResearch new plugins Documentation Create design librarian documentation for doc siteExplain how we work in Figma on doc site "},{"title":"Collaboration​","type":1,"pageTitle":"Design librarian","url":"docs/UX/How-We-Work/design-librarian#collaboration","content":"Collaborates with mobile team. Answers any Figma-related questions and provides quarterly recap to the team.Represents mobile team. Attends Ad Hoc’s Design System Huddle and collaborates with VA’s platform-design-system team. "},{"title":"Onboarding / Offboarding​","type":1,"pageTitle":"Design librarian","url":"docs/UX/How-We-Work/design-librarian#onboarding--offboarding","content":"Update permissions in Figma Open the 01 Design Libraries projectIn the top right corner, select “Share”In the modal… Remove previous design libraries by opening the dropdown that says “can edit” and selecting “Remove”Add new design librarians by searching their name, selecting “can edit,” and sending an inviteNote: The file “Navigation 2.0 Screen templates for designers” is currently available for anyone to edit. Once finalized, the permissions should be updated to restrict editing. "},{"title":"Designing the UI","type":0,"sectionRef":"#","url":"docs/UX/How-We-Work/designing-ui","content":"","keywords":""},{"title":"UI Best Practices​","type":1,"pageTitle":"Designing the UI","url":"docs/UX/How-We-Work/designing-ui#ui-best-practices","content":"Use components already available in the system.Use Balsamiq or another lower fidelity tool to ideateIf you are working on an existing feature, take a look in the app using demo mode to see how it’s currently working. Figma’s shipped screens are our best examples of how it should look, but there may be some inconsistencies.Consider which screen type to use.Lean on the Design Librarian for support if you aren’t sure where or how to work. "},{"title":"Designing in Figma​","type":1,"pageTitle":"Designing the UI","url":"docs/UX/How-We-Work/designing-ui#designing-in-figma","content":"There are a few paths that can be taken when updating existing features or creating new features. Most common: Using existing component(s) with no updates Ideally, we’re using the building blocks we already have when adding new features to the app. If there is an existing component in the library that can be used and does not need to be changed, team members should add the component from the VA Mobile App Design Library and avoid detaching it in your working file. Rare: Using existing component(s) with some updates If you believe the existing component needs to be changed, add the component from the VA Mobile App Design Library and detach it for ideation. If components have been changed, have them reviewed by the Component Committee before finalizing your design.Once approved, work with the Design Librarian to add it to the library. Caution: Making a new component If a design requires a new component, try using Balsamiq, pen and paper, or your favorite low fidelity tool to ideate on ideas.When you’re ready, prep documentation for the component by following how to document components.You will be invited to a meeting and will review the component and the documentation with the Component Committee. Note: These do not have to be high fidelity designs.Once approved, work with the Design Librarian to add it to the library. "},{"title":"Best Practices in Figma​","type":1,"pageTitle":"Designing the UI","url":"docs/UX/How-We-Work/designing-ui#best-practices-in-figma","content":"Follow the rules around where we work in Figma. Generally, most of your work will be done in the working file for the category your feature is in. When starting a new feature, work with the Design Librarian to create a new working file.Every working file should include a Cover and Readme page in your file. Readme page orients people to your file and the work in general. It should contain project info, important links, team members, etc. In your working file, avoid creating local components.Tagging folks in comments can be a good way to communicate and work async. Try to have longer discussions outside of comments. "},{"title":"Documenting your work​","type":1,"pageTitle":"Designing the UI","url":"docs/UX/How-We-Work/designing-ui#documenting-your-work","content":"[TK] - coming up with standards around a11y, design decisions, etc. "},{"title":"Prepping your work for handoff​","type":1,"pageTitle":"Designing the UI","url":"docs/UX/How-We-Work/designing-ui#prepping-your-work-for-handoff","content":"Once designs are ready to be handed off to the engineering team, you can review this checklist before handoff to make sure you’ve covered everything the FE team will need. "},{"title":"Variations​","type":1,"pageTitle":"Designing the UI","url":"docs/UX/How-We-Work/designing-ui#variations","content":"Determine data organization (e.g. how is a list sorted, does it need filtering, etc)Create designs with data variations (e.g. examples for lots of data, not much data)Document and create designs of error states and unhappy pathsDocument and create designs of empty statesConsider your design with fonts enlarged or varying screen sizesConsider dark mode versions of designs "},{"title":"IA/Flows​","type":1,"pageTitle":"Designing the UI","url":"docs/UX/How-We-Work/designing-ui#iaflows","content":"Document the IA of your feature &amp; where it lives in the app See: Determining Navigation &amp; Information Architecture Placement for New VA Mobile App Features, VA Mobile app: Detailed sitemap (future state 9-30-22 Update category screens, if neededDocument intended flowDefined back labels and screen title "},{"title":"Reviews​","type":1,"pageTitle":"Designing the UI","url":"docs/UX/How-We-Work/designing-ui#reviews","content":"Present at Show and Tell or have a peer review your workComplete an accessibility review, if neededReceive sign-off from content designer on all copyReview components with Design Librarian "},{"title":"Prepping for handoff​","type":1,"pageTitle":"Designing the UI","url":"docs/UX/How-We-Work/designing-ui#prepping-for-handoff","content":"Add Figma links and screenshots of designs (light and dark mode) to appropriate tickets Create pages for each FE implementation ticket in the working file as outlined in the Figma file workflow Check with Product about when work will be handed offPlan to attend FE handoff meeting to answer any questions "},{"title":"Handing off and following along​","type":1,"pageTitle":"Designing the UI","url":"docs/UX/How-We-Work/designing-ui#handing-off-and-following-along","content":""},{"title":"Development Handoff​","type":1,"pageTitle":"Designing the UI","url":"docs/UX/How-We-Work/designing-ui#development-handoff","content":"Team members should expect to do a design walkthrough with engineering as part of the handoff process. In the design walkthrough, team members should be prepared to answer questions related to flow, error/empty states, and design decisions. See prepping your work for handoff above.After the design walkthrough, team members should make any updates to designs, and ensure that appropriate tickets are updated with the intended flow, Figma links, and screenshots.As designs are being implemented by the engineering team, team members should respond to questions (in Slack and Zenhub) in a timely manner and communicate with the front-end team (engineers and product manager) to collaborate on refinements. "},{"title":"QA​","type":1,"pageTitle":"Designing the UI","url":"docs/UX/How-We-Work/designing-ui#qa","content":"QA will be QAing AC in tickets throughout the entire development process for a project/feature.Before release, QA will let you know when you can do a visual, interaction, and content QA. Use the FE handoff pages in the working file to compare the work. For using real test users/data, see this Slack thread on logging in as a test user.)On your testing device, complete a QA of the feature’s happy path.If you need a testing user to reach a particular screen or edge case, you can message a QA engineer in Slack for help.If bugs/issues are found, log a ticket. Here are examples of a UX bug (4009) and a content bug (4121). If you notice that QA engineering is not finding bugs that should have been caught in earlier tickets, let QA know, so they can improve their work. "},{"title":"Launching​","type":1,"pageTitle":"Designing the UI","url":"docs/UX/How-We-Work/designing-ui#launching","content":"For major features, team members should expect to work with the Design Librarian and the Product team to prepare app store content. "},{"title":"Moving/Publishing Work​","type":1,"pageTitle":"Designing the UI","url":"docs/UX/How-We-Work/designing-ui#movingpublishing-work","content":""},{"title":"Move work to shipped file​","type":1,"pageTitle":"Designing the UI","url":"docs/UX/How-We-Work/designing-ui#move-work-to-shipped-file","content":"When the design is live in the app, the Design Librarian will work with you to create a shipped file as outlined in the Figma file workflow. "},{"title":"Branching in Figma","type":0,"sectionRef":"#","url":"docs/UX/How-We-Work/figma-branching","content":"","keywords":""},{"title":"What is branching?​","type":1,"pageTitle":"Branching in Figma","url":"docs/UX/How-We-Work/figma-branching#what-is-branching","content":"Branching is a form of version control commonly used in software development in which you make a copy of something, make changes, and then merge those changes back into the main file/codebase. "},{"title":"Why are we branching?​","type":1,"pageTitle":"Branching in Figma","url":"docs/UX/How-We-Work/figma-branching#why-are-we-branching","content":"Branching allows you to create a separate space to experiment without impacting your main file. It also allows you to submit changes to a reviewer (ie Design Librarian) before merging your changes to the main file. "},{"title":"When should we create a branch?​","type":1,"pageTitle":"Branching in Figma","url":"docs/UX/How-We-Work/figma-branching#when-should-we-create-a-branch","content":"For now, we’ll be testing branching in our design library for: Adding a new component to our libraryUpdating an existing component in our libraryExperimental changes we don’t want to commit to yet In the future, we may consider branching for: Evaluative research such as user testingLarge scale reorganization or restructuresDevelopment handoff of specific components or feature work "},{"title":"Who will be able to do what in the design library?​","type":1,"pageTitle":"Branching in Figma","url":"docs/UX/How-We-Work/figma-branching#who-will-be-able-to-do-what-in-the-design-library","content":"We’ll be updating permissions for the design library as follows: Owner (UX lead) Able to adjust file and project permissionsAlways has editing and publishing rightsAlso has Editor and Viewer permissions Editors (design librarians) Temporarily have editing and publishing rightsAble to review and approve branchesAlso have Viewer permissions Viewers (everyone else) Able to create and edit branchesAble to submit branches for review "},{"title":"How do I create a branch in Figma?​","type":1,"pageTitle":"Branching in Figma","url":"docs/UX/How-We-Work/figma-branching#how-do-i-create-a-branch-in-figma","content":"Open the file you want to branch. Next to the file name, there is a dropdown where you can select Create branch. Note: When working in a branch, keep track of if/when you move components from one section to another in the library. This may cause conflicts and/or duplicate components when a Reviewer merges your branch into the main file. Be sure to include this information when you submit your branch for review.  Name your branch and select Create.  Now, you have a branch (aka a copy) of the file. You can tell when you’re working in a branch by the arrow symbol next to the file name.  "},{"title":"How do I view branches in Figma?​","type":1,"pageTitle":"Branching in Figma","url":"docs/UX/How-We-Work/figma-branching#how-do-i-view-branches-in-figma","content":"Open the dropdown menu next to the branch name. Then, select See all branches.  If you switch branches, Figma automatically saves your changes in the branch you were previously working on, so you don’t need to worry about losing your work.  "},{"title":"How do I submit a branch for review in Figma?​","type":1,"pageTitle":"Branching in Figma","url":"docs/UX/How-We-Work/figma-branching#how-do-i-submit-a-branch-for-review-in-figma","content":"Open the dropdown menu next to the branch name. Then, select Review and merge changes.  In the modal, you’ll see a list of available reviewers. Add the current design librarians as Reviewers. Then, select Request review.  Before sending a branch for review, be sure to include: Description of what changes were madeJustification for why changes were made (ticket number, Slack message, etc)In the future, we may ask for documentation to be included "},{"title":"How do I review and merge changes from a branch in Figma?​","type":1,"pageTitle":"Branching in Figma","url":"docs/UX/How-We-Work/figma-branching#how-do-i-review-and-merge-changes-from-a-branch-in-figma","content":"Only the Owner and Editors can review and merge changes. When you request a review of your branch, the Reviewers (design librarians) will receive a notification in Figma, Slack, and/or email.  Next, a Reviewer will review your changes.  Reviewers can view before and after versions of your changes as side-by-side or overlay comparisons.  Next, a Reviewer can approve or suggest changes to your branch. Changes can be suggested in the modal or through comments on the individual designs.   If approved, a Reviewer will merge your changes to the main file. As a reviewer, it’s recommended to add a Name and Description to the merge.  After the review, you’ll receive a notification in Figma and/or email that your branch was either approved and merged or has changes suggested. You’ll be able to view the suggestions in the review modal or through comments. Then, you’ll need to repeat this process to submit your branch for another review.  "},{"title":"Resources​","type":1,"pageTitle":"Branching in Figma","url":"docs/UX/How-We-Work/figma-branching#resources","content":"Branching in FigmaFAQs about branching in FigmaComplete guide to Figma branching "},{"title":"Where we work","type":0,"sectionRef":"#","url":"docs/UX/How-We-Work/where-we-work","content":"","keywords":""},{"title":"Whiteboarding​","type":1,"pageTitle":"Where we work","url":"docs/UX/How-We-Work/where-we-work#whiteboarding","content":""},{"title":"Mural​","type":1,"pageTitle":"Where we work","url":"docs/UX/How-We-Work/where-we-work#mural","content":"Main whiteboarding software where we brainstorm, do group work, and research synthesis. "},{"title":"Figjam​","type":1,"pageTitle":"Where we work","url":"docs/UX/How-We-Work/where-we-work#figjam","content":"Optional software that comes with Figma. We’ve used this to do group work, map out user flows, and brainstorm. Might eventually replace Mural but for now when in doubt use Mural. "},{"title":"Wireframing​","type":1,"pageTitle":"Where we work","url":"docs/UX/How-We-Work/where-we-work#wireframing","content":""},{"title":"Pen and paper​","type":1,"pageTitle":"Where we work","url":"docs/UX/How-We-Work/where-we-work#pen-and-paper","content":"Feel free to go old school when drafting up ideas. Photos of low fidelity drawings can be inserted in Mural, Google docs, Figma, Zenhub tickets, etc. "},{"title":"Balsamiq​","type":1,"pageTitle":"Where we work","url":"docs/UX/How-We-Work/where-we-work#balsamiq","content":"Where designers are encouraged to work on wireframes and low-fidelity designs. We have two workspaces: UX Brainstorm and Working for ideation and work in progress.UX Ready to Handoff where we move finished work we want to talk to with the larger team. "},{"title":"Prototyping​","type":1,"pageTitle":"Where we work","url":"docs/UX/How-We-Work/where-we-work#prototyping","content":"Both Balsamiq and Figma can be used to develop prototypes, although we typically develop them in Figma. "},{"title":"UI Library and Feature Designs - Figma​","type":1,"pageTitle":"Where we work","url":"docs/UX/How-We-Work/where-we-work#ui-library-and-feature-designs---figma","content":"Where we keep our UI library and work on high-fidelity designs, prototypes, and content. Each Project within the VA Mobile team has a specific purpose: "},{"title":"00 Start here 🧰​","type":1,"pageTitle":"Where we work","url":"docs/UX/How-We-Work/where-we-work#00-start-here-","content":"Meant to orient folks to Figma organization and how to work. Figma folder structure 🧰 How we organize projects in Figma Figma file workflow 🧰 How we work on (and communicate the status of) projects in Figma Figma file thumbnail + file naming convention 🧰 How to use thumbnails and name files "},{"title":"01 Design Libraries​","type":1,"pageTitle":"Where we work","url":"docs/UX/How-We-Work/where-we-work#01-design-libraries","content":"1.0 = App MVP, 2.0 = App with new navigation &amp; beyond 📐Design Tokens 1.0 The Design Tokens file includes colors and text styles. In the future, this file may include additional tokens such as spacing and sizing.Design tokens are set up to be used within the Design Library components by using the Tokens Studio plugin. This is currently a work in progress. If you have questions, ask the Design Librarian. Light and dark mode are currently managed by the Light Theme 1.0 and Dark Theme 1.0 files. This is currently a work in progress. If you have questions, ask the Design Librarian. Only the owner (UX lead) and current Design Librarians have permission to edit this file.Who uses this file: Designers on our team 📐Design Library 1.0 The Design Library file includes finalized components. Components are added to this file after they’ve been vetted in production and approved by QA.Components are set up to be used within feature files.Only the owner (UX lead) and current Design Librarians have permission to edit this file directly. Everyone else is listed as a viewer. Regardless of permissions, we should never edit the main file. Instead, we should create a branch and ask the Design Librarian to review our edits before merging them into the main file. More about branching in Figma. Who uses this file: Designers on our team "},{"title":"[CategoryName]​","type":1,"pageTitle":"Where we work","url":"docs/UX/How-We-Work/where-we-work#categoryname","content":"🔍[FeatureName] - Working - VAMobile Where designers are making features, handing off to ENG &amp; QAAlso includes explorations for existing features that we aren’t moving forward with but want to keep a record of.If you are designing using existing components please use the ones from the Design Library.If you are building new components you can create them here. If adopted they will eventually move to the Design library. Who uses this: UX, PM, QA, ENG 🚢[FeatureName] - Shipped - VAMobile Example screens from the app that are live in the app, comparable to Demo mode as a resource for folks.Good for using as a reference but not the source of truth (the app is the source of truth)Who uses this: UX, Product, outside Stakeholders/colleagues. 🧪[FeatureName] - Prototype - VAMobile Prototypes we’ve built for research studies (one prototype per file).Files should be read-only, so that we maintain quality for the usability studyWho uses this: UX, UR "},{"title":"Resources 🧰​","type":1,"pageTitle":"Where we work","url":"docs/UX/How-We-Work/where-we-work#resources-","content":"🧰 Toolbox Includes files that might be helpful like Material and iOS kit to grab native components.Also includes a thumbnail template you can use.Who uses this: UX 🧰 App store images (Apple &amp; Google) This file is where we create and manage the app store images.App images inside the phone/tablet wrappers ideally come from screenshots of demo mode.Who uses this: UX and Product "},{"title":"Sandbox 🏖​","type":1,"pageTitle":"Where we work","url":"docs/UX/How-We-Work/where-we-work#sandbox-","content":"[EachDesigner’s name] 🏖 This is your own area where you can explore and iterate.Each team member has their own sandbox file.If you are working on something together consider working or moving Sandbox work to a Working file.Who uses this: UX folks. You might decide to share files with product and engineering for collaboration and early feasibility discussions, but how you use your Sandbox is up to you. "},{"title":"XX Graveyard 💀​","type":1,"pageTitle":"Where we work","url":"docs/UX/How-We-Work/where-we-work#xx-graveyard-","content":"A place to put features we aren’t going forward with. Who uses this: UX "},{"title":"Working with others","type":0,"sectionRef":"#","url":"docs/UX/How-We-Work/working-with-others","content":"","keywords":""},{"title":"How UX and Content collaborate​","type":1,"pageTitle":"Working with others","url":"docs/UX/How-We-Work/working-with-others#how-ux-and-content-collaborate","content":"As a way of scaling the content designer’s work across a team that is working on multiple features and projects simultaneously, the content designer may take on different levels of involvement in projects depending on their scope, size, and complexity. Content designer leads content work: The content designer is heavily involved in features or projects that are complex, have a large scope, or require extensive collaboration between VA stakeholders, including Sitewide Content team. The content designer should be included in all meetings (stakeholder, engineering, product, etc.). For these types of projects, the content designer is already aware of complexity, scope, and requirements as they will be involved in leadership-level meetings in which upcoming work is discussed by POs, PMs, and delivery leads.Content designer completes discovery work (either in direct collaboration with or separate from UX designer), which could include the following tasks: Completing a content-focused comparative analysis (if needed)Identifying copy to be repurposed from VA.gov or other VA productsReviewing relevant VA content briefs (if available)Reviewing prior research results Content designer and UX designer directly collaborate on low-fidelity wireframes and user flowsIf research is within scope, content designer works with UX designer and researcher to ensure research plans encompass copy-related questions and also to ensure conversation guides are accurately wordedContent designer and UX designer continue to work closely on changes to designs, iterations, and edge cases.Copy is delivered directly in Figma design files. Content designer and UX designer can use copy status tags in Figma to note where copy is in the process (i.e., copy needs approval, copy in progress, copy ready, etc.). Content designer owns final sign-off on copy and will likely pass copy through the Sitewide Content team for approval given the complexity of the project. Content designer supports content work: The content designer takes a supportive role for less or smaller projects. Examples include features in which we can easily pull content from VA.gov or smaller projects. Content designer doesn’t need to be included in all meetings. Content designer meets with UX designer and product manager to understand problem space, possible solutions, and technical constraints. Content designer raises possible risks or issues that might affect the copy.UX designer completes content-specific discovery tasks. This may include completing a comparative analysis, reviewing VA style guide/plain language standards, accessing VA content briefs, etc.UX designer meets with content designer to review first pass at copy. Content designer will provide feedback and/or suggestions.Content designer owns final sign-off on copy and may pass copy through the Sitewide Content team for approval if determined necessary. "},{"title":"Design Librarian​","type":1,"pageTitle":"Working with others","url":"docs/UX/How-We-Work/working-with-others#design-librarian","content":"Design Librarianis a rotating designer who maintains and improves how we work in Figma and serves as a resource within the mobile team, VA, and Ad Hoc. "},{"title":"Research","type":0,"sectionRef":"#","url":"docs/UX/research","content":"","keywords":""},{"title":"Our approach​","type":1,"pageTitle":"Research","url":"docs/UX/research#our-approach","content":"TBD "},{"title":"VA Mobile app research​","type":1,"pageTitle":"Research","url":"docs/UX/research#va-mobile-app-research","content":"VA mobile app UX research on GithubResearch plans and findings for VA mobile app features and research efforts, 2020 to present. "},{"title":"VA Research resources​","type":1,"pageTitle":"Research","url":"docs/UX/research#va-research-resources","content":"VA Platform: Research at VALearn about how VA does research for VA digital services. Includes templates and guidelines to help plan, facilitate, and synthesize research.Resources for mobile research sessionsIncludes scripts to help guide participants through sharing screens and other technical issues during sessions. VA.gov Research RepositoryAll research at VA (including mobile research) is stored in a searchable repository UX research on Github "},{"title":"Resources","type":0,"sectionRef":"#","url":"docs/UX/Resources","content":"","keywords":""},{"title":"Design: Working files​","type":1,"pageTitle":"Resources","url":"docs/UX/Resources#design-working-files","content":""},{"title":"Figma​","type":1,"pageTitle":"Resources","url":"docs/UX/Resources#figma","content":"VA Mobile Team Current features, resources, libraries, and design explorations. Design Library Finalized components, text styles, and color styles. "},{"title":"Balsamiq​","type":1,"pageTitle":"Resources","url":"docs/UX/Resources#balsamiq","content":"UX brainstorm &amp; work Brainstorming and low-fi designs. UX ready to handoff Designs for hand-off or review with engineers. "},{"title":"Information Architecture​","type":1,"pageTitle":"Resources","url":"docs/UX/Resources#information-architecture","content":"Sitemap and IA Living artifact documenting the mobile app's structure. "},{"title":"Research​","type":1,"pageTitle":"Resources","url":"docs/UX/Resources#research","content":"UX research on Github Research folders for all VA Mobile app studies. "},{"title":"VA Design System​","type":1,"pageTitle":"Resources","url":"docs/UX/Resources#va-design-system","content":"design.va.gov Content style guide, components, and patterns include guidance, standards, and tools to help teams build a consistent, intuitive, and Veteran-centered experience across VA.gov. "},{"title":"Design: Archived files​","type":1,"pageTitle":"Resources","url":"docs/UX/Resources#design-archived-files","content":""},{"title":"Sketch files​","type":1,"pageTitle":"Resources","url":"docs/UX/Resources#sketch-files","content":"Mobile App Design Library The design library is for finalized components, text styles, and color styles. Mobile App Screens This where we work day to day. This file is for finalized app screen designs as well as sandbox designs. Mobile App Graveyard The graveyard is for work we aren’t going forward with or past iterations VA Mobile App store images This file is where we create the app store images "},{"title":"InVision​","type":1,"pageTitle":"Resources","url":"docs/UX/Resources#invision","content":"MVP prototype (deprecated) This prototype is a good representation of most MVP features (minus Secure Messaging), but is not up to date or being maintained as of Winter 2021.* Sketch library - in Invision (deprecated) This shows all the MVP components laid out as a library visible and inspectable in Invision. Deprecated July 2021. Library style sheets (deprecated)Shows the components from the design library. Deprecated July 2021. "},{"title":"Componenets​","type":1,"pageTitle":"Resources","url":"docs/UX/Resources#componenets","content":"MVP Mobile App UI Styles on Google Docs (deprecated) "},{"title":"Templates","type":0,"sectionRef":"#","url":"docs/UX/Templates/","content":"Templates Templates, or page layouts, compose components within a single page. A layout can contain multiple variations of a component depending on the context and may include display logic. Templates help to ensure consistent behavior across the VA mobile app's features. The following templates are used in the VA mobile app: Navigation modelScreen types See also https://design.va.gov/templates/","keywords":""},{"title":"Screen types","type":0,"sectionRef":"#","url":"docs/UX/Templates/ScreenTypes","content":"","keywords":""},{"title":"Hierarchical screens​","type":1,"pageTitle":"Screen types","url":"docs/UX/Templates/ScreenTypes#hierarchical-screens","content":""},{"title":"Category landing screen​​","type":1,"pageTitle":"Screen types","url":"docs/UX/Templates/ScreenTypes#category-landing-screen","content":" Definition: The “home” screen of a category. Categories are the top level of hierarchical navigation (each category appears in tab bar/bottom navigation bar), grouping features of a similar type. It contains links to features and relevant summary content. Features are listed alphabetically, and grouped into subsections if the number of features in a category exceeds 6. Displays the tab bar. Does not display back button.Screen transition: Screen transition between categories is top-level peer (fade through).Scroll behavior: Content scrolls if it exceeds the panel height Screen title scroll behavior Upon load: &quot;VA&quot; header text visible in top bar, screen title appears in bodyWhen scrolled: &quot;VA&quot; header disappears from top bar, screen title disappears from body and moves to top bar Examples: Home, Health, Benefits, PaymentsResources: Figma file: Category landing screen templateGithub ticket: Category landing screen template "},{"title":"Feature landing screen​​","type":1,"pageTitle":"Screen types","url":"docs/UX/Templates/ScreenTypes#feature-landing-screen","content":" Definition: The “home” screen of a feature. Features are parent sections with multiple children that generally live within a category. A complex feature (like pharmacy or secure messaging) can also have subsections. Displays the tab bar and a descriptive back button.Screen transition: Horizontal (pushing on &amp; off from right).Scroll behavior: Content scrolls if it exceeds the panel height Screen title scroll behavior Upon load: &quot;VA&quot; header text visible in top bar, screen title appears in bodyWhen scrolled: &quot;VA&quot; header disappears from top bar, screen title disappears from body and moves to top bar Examples: Appointments, Pharmacy, ProfileResources: Figma file: Feature landing/child screen templateFigma: header scroll behaviorGithub ticket: Feature landing/child screen template "},{"title":"Child screen​​","type":1,"pageTitle":"Screen types","url":"docs/UX/Templates/ScreenTypes#child-screen","content":" Definition: Child screens live within a feature, generally an item in a list. It’s often the end point of a hierarchy. Displays the tab bar and a descriptive back button.Screen transition: Horizontal (pushing on &amp; off from right).Scroll behavior: Content scrolls if it exceeds the panel height Screen title scroll behavior Upon load: &quot;VA&quot; header text visible in top bar, screen title appears in bodyWhen scrolled: &quot;VA&quot; header disappears from top bar, screen title disappears from body and moves to top bar Examples: Appointment details, Prescription detailsResources: Figma file: Feature landing/child screen templateFigma: header scroll behaviorGithub ticket: Feature landing/child screen template "},{"title":"Modal screens​","type":1,"pageTitle":"Screen types","url":"docs/UX/Templates/ScreenTypes#modal-screens","content":""},{"title":"Fullscreen task/subtask​​","type":1,"pageTitle":"Screen types","url":"docs/UX/Templates/ScreenTypes#fullscreen-tasksubtask","content":" Definition: A contained, linear flow that is presented modally at any level of the app’s hierarchy, opening on a layer over the current screen and taking up the whole screen. A fullscreen task/subtask can be one or multiple steps, and it requires an explicit close or cancel button to exit. Use a task/subtask to enable something complex in order to lock in focus. Because it covers the entire screen, it is the only modally appearing screen over which other dialogs or panels can appear. Does not display the tab bar.Behaviors &amp; Logic: Screen Transition: Screen transition is vertical (pushing on &amp; off from the bottom) to open the subtask, then horizontal between sequential steps (if applicable).Scroll behavior: Content (including primary &amp; secondary action buttons) scrolls if it exceeds the panel height.Button behavior &amp; display logic Top bar action button behavior &amp; display logic Left button: Cancel only, must be accompanied by primary action button. Closes editable view without saving changes and/or closes entire multi-strep flow without saving changes (Display &quot;Are you sure?&quot; confirmation modal).Right button: Done or Close. Does not appear with a primary action button. Closes non-editable view. Bottom action button behavior &amp; display logic Locked to bottom of screenPrimary action button: May appear alone or with a secondary action button. If task is a single step, tap to save/submit and close view. If task is multi-step, tap to advance to next step (mid-task) or save/submit and close view (end of task) Always accompanied by Cancel.Secondary action button: Appears in a multi-step task, accompanied by a primary action button. Tap to go back one step. Example: Create an appointment, Refill a prescriptionResources: Figma file: Fullscreen subtaskGithub ticket: Fullscreen subtask template "},{"title":"Large panel​​","type":1,"pageTitle":"Screen types","url":"docs/UX/Templates/ScreenTypes#large-panel","content":" Definition: A contained (single step) task that is presented modally at any level of the app’s hierarchy and appears as a card that covers most of the underlying content. It displays a close button to exit, but can also swipe down or tap on background to close. Use a large panel to display more in depth detail (multiple paragraphs) or a small (quick) task, when you need to lock in focus and limit the possibility of abandoning. Cannot appear over another panel. Does not display the tab bar.Behaviors &amp; Logic: Screen transition: Screen transition is vertical (pushing on &amp; off from the bottom) to open &amp; close, then horizontal between sequential steps (if applicable).Scroll behavior: Top bar title and actions are fixed &amp; do not scroll.Content (including primary &amp; secondary action buttons) scrolls if it exceeds the panel height. Button behavior &amp; display logic Top bar action buttons: Left button: Cancel only, must be accompanied by primary embedded action button in content. Closes editable view without saving changes (Display &quot;Are you sure?&quot; confirmation modal).Right button: Done or Close. Does not appear with a primary action button. Closes non-editable view. Embedded action buttons: Primary action button: May appear alone or with a secondary action button. If task is a single step, tap to save/submit and close view. Always accompanied by Cancel. Secondary close/dismiss actions (Save/close action depends on top bar action button label) : Swipe down from header to close the panelAndroid hardware back also results in closing the panel Example: Help text, composing a secure messageResources: Figma file: Large panel templateGithub ticket: Large panel template "},{"title":"Web view​","type":1,"pageTitle":"Screen types","url":"docs/UX/Templates/ScreenTypes#web-view","content":" Definition: A screen that displays content from an outside website without requiring the user to leave the app. Requires an explicit close or cancel button to exit. Does not display tab bar due to required web toolbar.Transition: Horizontal (pushing on &amp; off from right).Example: Contact VAResources: Figma file: Webview "},{"title":"Adding new screen types​","type":1,"pageTitle":"Screen types","url":"docs/UX/Templates/ScreenTypes#adding-new-screen-types","content":"-Always try to use an existing screen type first before proposing a new (or modifying an existing) screen type. New screen types should apply to multiple features/locations in the app rather than stand as one-offs, and need to be approved by the Component Committee. "},{"title":"Navigation model","type":0,"sectionRef":"#","url":"docs/UX/Templates/NavigationModel","content":"Navigation model The VA Health &amp; Benefits mobile app's navigation model is the same on both iOS and Android. Primary navigation: The app uses a standard tab navigation for its primary navigation. The tab bar/bottom navigation bar is located at the bottom of the screen and is persistent—it appears on every screen in the hierarchy (except those that are modally presented) so that the user has a clear sense of all the main sections of the app and quick access to switch between them.The tab bar must contain at least 3 but no more than 5 items, and is reserved for the default/Home screen, top level categories and if applicable, global features that require direct access from anywhere in the app. Secondary navigation: The right side of the app’s top navigation bar is reserved for global contextual features that relate to the content on that screen (Example: Profile, Help). For ENG components that make up the primary navigation, see Primary Navigation in the UX Components section.","keywords":""}]