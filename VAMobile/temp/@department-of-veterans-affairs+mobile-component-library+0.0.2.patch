diff --git a/node_modules/@department-of-veterans-affairs/mobile-component-library/.env b/node_modules/@department-of-veterans-affairs/mobile-component-library/.env
index c334833..7953ebe 100644
--- a/node_modules/@department-of-veterans-affairs/mobile-component-library/.env
+++ b/node_modules/@department-of-veterans-affairs/mobile-component-library/.env
@@ -1 +1 @@
-EXPO_PUBLIC_STORYBOOK_ENABLED=true
+EXPO_PUBLIC_STORYBOOK_ENABLED=false
diff --git a/node_modules/@department-of-veterans-affairs/mobile-component-library/src/App.tsx b/node_modules/@department-of-veterans-affairs/mobile-component-library/src/App.tsx
index 6a6ee8f..89d3ca3 100644
--- a/node_modules/@department-of-veterans-affairs/mobile-component-library/src/App.tsx
+++ b/node_modules/@department-of-veterans-affairs/mobile-component-library/src/App.tsx
@@ -1,10 +1,10 @@
-import React, { useCallback } from 'react'
+import { useCallback } from 'react'
 import { View } from 'react-native'
 import { I18nextProvider } from 'react-i18next'
 import { useFonts } from 'expo-font'
 import * as SplashScreen from 'expo-splash-screen';
 
-import i18n from 'utils/translation/i18n'
+import i18n from './utils/translation/i18n'
 
 SplashScreen.preventAutoHideAsync()
 
diff --git a/node_modules/@department-of-veterans-affairs/mobile-component-library/src/components/SegmentedControl/SegmentedControl.tsx b/node_modules/@department-of-veterans-affairs/mobile-component-library/src/components/SegmentedControl/SegmentedControl.tsx
index 5ee39f2..c347307 100644
--- a/node_modules/@department-of-veterans-affairs/mobile-component-library/src/components/SegmentedControl/SegmentedControl.tsx
+++ b/node_modules/@department-of-veterans-affairs/mobile-component-library/src/components/SegmentedControl/SegmentedControl.tsx
@@ -1,5 +1,5 @@
 import { useTranslation } from 'react-i18next'
-import React, { FC, useEffect } from 'react'
+import { FC, useEffect } from 'react'
 import styled from 'styled-components'
 import {
   Text,
@@ -47,9 +47,13 @@ export const SegmentedControl: FC<SegmentedControlProps> = ({
   selected,
   labelsA11yHints: accessibilityHints,
 }) => {
-  const { t } = useTranslation()
+  // const { t } = useTranslation()
   const colorScheme = useColorScheme()
 
+  useEffect(() => {
+    onChange(labels[selected])
+  }, [selected, onChange, labels])
+
   // Copied from DSVA color tokens in css-library
   const colorTokens = {
     white: '#FFFFFF',
@@ -73,10 +77,6 @@ export const SegmentedControl: FC<SegmentedControlProps> = ({
     inactiveBgColor = colorTokens.gray.dark
   }
 
-  useEffect(() => {
-    onChange(labels[selected])
-  }, [selected, onChange, labels])
-
   const viewStyle: ViewStyle = {
     alignSelf: 'baseline',
     backgroundColor: inactiveBgColor,
@@ -117,10 +117,7 @@ export const SegmentedControl: FC<SegmentedControlProps> = ({
               accessibilityHints ? accessibilityHints[index] : ''
             }
             accessibilityValue={{
-              text: t('listPosition', {
-                position: index + 1,
-                total: labels.length,
-              }),
+              text: 'no translation',
             }}
             accessibilityRole={'tab'}
             accessibilityState={{ selected: isSelected }}>
diff --git a/node_modules/@department-of-veterans-affairs/mobile-component-library/src/index.tsx b/node_modules/@department-of-veterans-affairs/mobile-component-library/src/index.tsx
index 374d2f0..3e0bbbf 100644
--- a/node_modules/@department-of-veterans-affairs/mobile-component-library/src/index.tsx
+++ b/node_modules/@department-of-veterans-affairs/mobile-component-library/src/index.tsx
@@ -3,15 +3,15 @@ import { registerRootComponent } from 'expo'
 
 import App from './App'
 
-const storybookEnabled = process.env.EXPO_PUBLIC_STORYBOOK_ENABLED === 'true'
+// const storybookEnabled = process.env.EXPO_PUBLIC_STORYBOOK_ENABLED === 'true'
 
-if (storybookEnabled) {
-  // registerRootComponent calls AppRegistry.registerComponent('main', () => App);
-  // It also ensures that whether you load the app in Expo Go or in a native build,
-  // the environment is set up appropriately
-  registerRootComponent(App)
-}
+// if (storybookEnabled) {
+//   // registerRootComponent calls AppRegistry.registerComponent('main', () => App);
+//   // It also ensures that whether you load the app in Expo Go or in a native build,
+//   // the environment is set up appropriately
+//   registerRootComponent(App)
+// }
 
 
-export { MyButton } from 'components/Button/Button'
-export { SegmentedControl } from 'components/SegmentedControl/SegmentedControl'
+// export { MyButton } from 'components/Button/Button'
+export { SegmentedControl } from './components/SegmentedControl/SegmentedControl'
