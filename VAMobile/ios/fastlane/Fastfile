# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# update fastlane automatically (use this on a personal box, leave off for circle because it installs fresh every build)
# update_fastlane

default_platform(:ios)
platform :ios do

  before_all do |lane, options|
    ENV['MATCH_GIT_BASIC_AUTHORIZATION'] = ENV['FASTLANE_TOKEN']
    version = options[:version]
    puts('deploying to ' + lane.to_s + ' with version: ' + version.to_s)

    # any non-daily builds should update the version in some way with the version option
    # Daily builds will have a special name identifier
    if version=='major'
      increment_version_number_in_xcodeproj(bump_type: "major", scheme: "VAMobile", xcodeproj: "VAMobile.xcodeproj")
    elsif version=='minor'
      increment_version_number_in_xcodeproj(bump_type: "minor", scheme: "VAMobile", xcodeproj: "VAMobile.xcodeproj")
    elsif version=='patch'
      increment_version_number_in_xcodeproj(bump_type: "patch", scheme: "VAMobile", xcodeproj: "VAMobile.xcodeproj")
    elsif version == 'daily'
      update_info_plist(xcodeproj: "VAMobile.xcodeproj", plist_path: "VAMobile/Info.plist", display_name: "VAMobile-Daily Build")
    end
  end

  desc "Push a new internal alpha build to TestFlight"
  lane :alpha do |options|
    match(type: "appstore")
    increment_build_number_in_xcodeproj
    begin
      build_app(workspace: "VAMobile.xcworkspace", scheme: "VAMobile", export_method: "app-store")
      api_key = app_store_connect_api_key(
          key_id: ENV['APPLE_API_KEY_ID'],
          issuer_id: ENV['APPLE_API_KEY_ISSUER_ID'],
          key_filepath: "./AuthKey.p8",
          in_house: false
        )
      upload_to_testflight(
          api_key: api_key,
          distribute_external: false
      )
      name = get_version_number_from_xcodeproj(xcodeproj: "VAMobile.xcodeproj", scheme: "VAMobile")
      build = get_build_number_from_xcodeproj(xcodeproj: "VAMobile.xcodeproj", scheme: "VAMobile")
      slack_build_success(build, name, options[:version])
    rescue => e
      slack_build_error(e, options[:version])
    end
  end

  desc "Push a new demo beta build to TestFlight"
    lane :demo do |options|
      match(type: "appstore")
      increment_build_number_in_xcodeproj
      begin
        build_app(workspace: "VAMobile.xcworkspace", scheme: "VAMobile", export_method: "app-store")
        api_key = app_store_connect_api_key(
            key_id: ENV['APPLE_API_KEY_ID'],
            issuer_id: ENV['APPLE_API_KEY_ISSUER_ID'],
            key_filepath: "./AuthKey.p8",
            in_house: false
          )
        upload_to_testflight(
          api_key: api_key,
          beta_app_review_info: {
              contact_email: ENV['TEST_FLIGHT_CONTACT_EMAIL'],
              contact_first_name: ENV['TEST_FLIGHT_CONTACT_FIRST_NAME'],
              contact_last_name: ENV['TEST_FLIGHT_CONTACT_LAST_NAME'],
              contact_phone: ENV['TEST_FLIGHT_CONTACT_PHONE'],
              demo_account_name: ENV['TEST_FLIGHT_DEMO_ACCT_NAME'],
              demo_account_password: ENV['TEST_FLIGHT_DEMO_ACCT_PW'],
              notes: "New version for reviewers"
            },
            distribute_external: true,
            notify_external_testers: true
        )
        name = get_version_number_from_xcodeproj(xcodeproj: "VAMobile.xcodeproj", scheme: "VAMobile")
        build = get_build_number_from_xcodeproj(xcodeproj: "VAMobile.xcodeproj", scheme: "VAMobile")
        slack_build_success(build, name, options[:version])
      rescue => e
        slack_build_error(e, options[:version])
      end
    end

  after_all do |lane, options|
    # This block is called, only if the executed lane was successful
#     name = get_version_number_from_xcodeproj(xcodeproj: "VAMobile.xcodeproj", scheme: "VAMobile")
#     build = get_build_number_from_xcodeproj(xcodeproj: "VAMobile.xcodeproj", scheme: "VAMobile")
#     message = 'iOS version bump to ' + name + ' (' + build + ')'
#     puts message
#     desc message
#     desc "Committing version changes to git"
    begin
#         commit_version_update(message)
      if options[:version] != 'daily'
        action = 'merge_release_to_master'
#         merge_release_to_master
        action = 'pr_changes_to_develop'
#         pr_changes_to_develop
      else
#         push_to_git_remote
      end
    rescue => e
      slack_github_error(e, action)
    end
  end

  ######## UTILITIES ########

  # sends a success message to the build slack
  def slack_build_success (buildNum, version, buildType)
   puts "Send slack success message"
   slack(
     message: "App successfully uploaded to TestFlight",
     success: true,
     default_payloads: [:git_branch, :last_git_commit_message, :git_author, :last_git_commit_hash],
     attachment_properties: {
       fields: [
         {title: "Build Type", value: buildType},
         {title: "Build Number", value: buildNum.to_s},
         {title: "Build Version", value: version}
       ]
     }
   )
  end

  def slack_build_error (e, buildType)
    puts "Send slack build error message"
    slack(
      message: "Build failed with exception!",
      success: false,
      default_payloads: [:git_branch, :last_git_commit_message, :git_author, :last_git_commit_hash],
      attachment_properties: {
        fields: [
          {title: "Build Type", value: buildType},
          {title: "Exception", value: e}
        ]
      }
    )
  end

  def slack_github_error(e, action)
    puts "Send slack GitHub error message"
    slack(
      message: "GitHub scripts failed with exception!",
      success: false,
      default_payloads: [:git_branch, :last_git_commit_message, :git_author, :last_git_commit_hash],
      attachment_properties: {
        fields: [
          {title: "Exception", value: e}
        ]
      }
    )
  end

  def pr_changes_to_develop()
    create_pull_request(
      api_token: ENV['FASTLANE_TOKEN'],
      repo: "department-of-veterans-affairs/va-mobile-app",
      title: "Merge release changes to develop",
      base: "develop",
      reviewers: ["lexicalninja", "jjulian"]
    )
  end

  def commit_version_update(message)
    git_commit(path:"VAMobile.xcodeproj/project.pbxproj", message:message)
  end

  def merge_release_to_master
      git_commit(path:"fastlane/Fastfile", message: "fastlane test")
#     add tags here?
      base = git_branch
      sh("git", "checkout", "master")
      sh("git", "merge", base)
      push_to_git_remote
#       delete release branch here
  end
end




