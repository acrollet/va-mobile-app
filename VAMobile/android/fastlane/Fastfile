# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
update_fastlane

default_platform(:android)

platform :android do

  before_all do |lane, options|
    version = options[:version]
    puts('deploying to ' + lane.to_s + ' with version: ' + version.to_s)

    if version=='major'
      gradle(task: 'doNewMajorVersion')
    elsif version=='minor'
      gradle(task: 'doNewMinorVersion')
    elsif version=='patch'
      gradle(task: 'doNewPatchVersion')
    elsif version=='daily'
      gradle(task: 'doNewDailyVersion')
    end
  end


#   desc "Build the App - Android Release"
#   lane :buildDebug do
#     gradle(task: "clean :app:assembleDebug")
#   end

  desc "Build the App - Android Release"
  lane :build do
    begin
      gradle(task: "clean")
      gradle(task: "bundle", build_type: "Release")
      slack_build_success(build, name, options[:version])
    rescue => err
      slack_build_success(build, name, options[:version])
    end
  end

  desc "Submit a new Android Alpha Build"
  lane :alpha do
    begin
      gradle(task: "clean")
      gradle(task: "bundle", build_type: "Release")
      supply(track: "alpha")
      slack_build_success(build, name, options[:version])
    rescue => err
      slack_build_success(build, name, options[:version])
    end
  end

  desc "Submit a new Android Beta Build"
  lane :beta do
    begin
      gradle(task: "clean")
      gradle(task: "bundle", build_type: "Release")
      supply(track: "beta")
      slack_build_success(build, name, options[:version])
    rescue => err
      slack_build_success(build, name, options[:version])
    end
  end

  desc 'Deploy a new internal version to the Google Play Store'
  lane :internal do
    begin
      gradle(task: "clean")
      gradle(task: "bundle", build_type: "Release")
      supply(track: "internal")
      slack_build_success(build, name, options[:version])
    rescue => err
      slack_build_success(build, name, options[:version])
    end
  end

  after_all do |lane, options|
    # This block is called, only if the executed lane was successful
    name = gradle(task: '-q getVersionName')
    build = gradle(task: '-q getBuildNum')
    message = 'Version bump to ' + name.split('^^')[1] + ' (' + build.split('^^')[1] + ')'
    puts message

    git_commit(path:"version.properties", message:message)
    push_to_git_remote()
  end
end

######## UTILITIES ########

# sends a success message to the build slack
def slack_build_success (buildNum, version, buildType)
 puts "Send slack success message"
 slack(
   message: "App successfully uploaded to Play Store",
   success: true,
   default_payloads: [:git_branch, :last_git_commit_message, :git_author, :last_git_commit_hash],
   attachment_properties: {
     fields: [
       {title: "OS", value: "Android"},
       {title: "Build Type", value: buildType},
       {title: "Build Number", value: buildNum.to_s},
       {title: "Build Version", value: version}
     ]
   }
 )
end

def slack_build_error (e, buildType)
  puts "Send slack build error message"
  slack(
    message: "Android build failed with exception!",
    success: false,
    default_payloads: [:git_branch, :last_git_commit_message, :git_author, :last_git_commit_hash],
    attachment_properties: {
      fields: [
        {title: "OS", value: "Android"},
        {title: "Build Type", value: buildType},
        {title: "Exception", value: e}
      ]
    }
  )
end

def slack_github_error(e, action)
  puts "Send slack GitHub error message"
  slack(
    message: "GitHub scripts failed with exception!",
    success: false,
    default_payloads: [:git_branch, :last_git_commit_message, :git_author, :last_git_commit_hash],
    attachment_properties: {
      fields: [
        {title: "OS", value: "Android"},
        {title: "Exception", value: e}
      ]
    }
  )
end
