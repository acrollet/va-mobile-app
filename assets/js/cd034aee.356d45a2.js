"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3351],{38909:function(e,t,n){n.d(t,{Z:function(){return m}});var l=n(67294),o=n(19055),i=n(26396),r=n(58215),a=n(82224),c=n(36005),s=function(e){var t=e.props;return t?l.createElement(l.Fragment,null,c.ZP.isEmpty(t)?l.createElement("pre",{className:"preText"},"This component does not have props defined"):l.createElement("table",null,l.createElement("thead",null,l.createElement("tr",null,l.createElement("th",null,"Name"),l.createElement("th",null,"Type"),l.createElement("th",null,"Default Value"),l.createElement("th",null,"Required"),l.createElement("th",null,"Description"))),l.createElement("tbody",null,Object.keys(t).map((function(e){var n;return l.createElement("tr",{key:e},l.createElement("td",null,l.createElement("code",null,e)),l.createElement("td",{style:{minWidth:200}},null==(n=t[e].type)?void 0:n.name),l.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),l.createElement("td",null,t[e].required?"Yes":"No"),l.createElement("td",null,t[e].description))}))))):null};function m(e){var t=(0,a.N)(e.componentName)[0],n=t.description,c=t.displayName,m=t.props,u="How to use the "+c+" component",x="Full code for the "+c+" component";return l.createElement(l.Fragment,null,n,l.createElement("br",null),l.createElement("br",null),l.createElement(i.Z,null,l.createElement(r.Z,{value:"props",label:"Properties"},l.createElement(s,{props:m})),l.createElement(r.Z,{value:"example",label:"Example"},e.example&&l.createElement(o.Z,{title:u,className:"language-tsx test"},e.example)),l.createElement(r.Z,{value:"code",label:"Source Code"},e.codeString&&l.createElement(o.Z,{title:x,className:"language-tsx"},e.codeString)),l.createElement(r.Z,{value:"accessibility",label:"Accessibility"},l.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},82224:function(e,t,n){n.d(t,{N:function(){return o}});var l=n(28084),o=function(e){return(0,l.default)()["docusaurus-plugin-react-docgen-typescript"].default.filter((function(t){return t.displayName===e}))}},25058:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return d},exampleString:function(){return x},frontMatter:function(){return c},metadata:function(){return m},toc:function(){return u}});var l=n(87462),o=n(63366),i=(n(67294),n(3905)),r=(n(19055),n(38909)),a=["components"],c={},s=void 0,m={unversionedId:"UX/ComponentsSection/TextViews/TextLines",id:"UX/ComponentsSection/TextViews/TextLines",title:"TextLines",description:"",source:"@site/docs/UX/ComponentsSection/TextViews/TextLines.mdx",sourceDirName:"UX/ComponentsSection/TextViews",slug:"/UX/ComponentsSection/TextViews/TextLines",permalink:"/va-mobile-app/docs/UX/ComponentsSection/TextViews/TextLines",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TextLineWithIcon",permalink:"/va-mobile-app/docs/UX/ComponentsSection/TextViews/TextLineWithIcon"},next:{title:"TextView",permalink:"/va-mobile-app/docs/UX/ComponentsSection/TextViews/TextView"}},u=[],x="<TextLines listOfText={[{ text: 'my text', isBold: true}]} />",p={toc:u,exampleString:x};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,l.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(r.Z,{componentName:"TextLines",example:x,codeString:"import React, { FC } from 'react'\n\nimport { TextLine } from './types'\nimport Box from './Box'\nimport LabelTag from './LabelTag'\nimport TextLineWithIcon, { TextLineWithIconProps } from './TextLineWithIcon'\nimport TextView from './TextView'\n\ntype TextLinesProps = {\n  /** List of text for the button */\n  listOfText?: Array<TextLine | TextLineWithIconProps>\n  /** if true the text will be selectable */\n  selectable?: boolean\n}\n\n/**Component to render individual lines of text. Each text line will wrap as needed and subsequent lines will be on the next line*/\nexport const TextLines: FC<TextLinesProps> = ({ listOfText, selectable }) => {\n  return (\n    <Box flex={1}>\n      <Box flexDirection=\"column\">\n        {listOfText?.map((textObj: TextLine | TextLineWithIconProps, index: number) => {\n          if ('iconProps' in textObj && textObj.iconProps !== undefined) {\n            return <TextLineWithIcon key={index} {...textObj} />\n          } else {\n            const { text, variant = 'MobileBody', color, textAlign = 'left', textTag, mt, mb } = textObj\n            if (textTag) {\n              return (\n                <Box mt={mt} mb={mb} key={index}>\n                  <LabelTag text={text} key={index} labelType={textTag.labelType} />\n                </Box>\n              )\n            }\n\n            return (\n              <TextView variant={variant} textAlign={textAlign} color={color} key={index} selectable={selectable} mt={mt} mb={mb} accessible={false}>\n                {text}\n              </TextView>\n            )\n          }\n        })}\n      </Box>\n    </Box>\n  )\n}\n",mdxType:"ComponentTopInfo"}))}d.isMDXComponent=!0}}]);