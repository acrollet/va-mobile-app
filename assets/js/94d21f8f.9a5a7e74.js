"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3358],{9094:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return b},exampleString:function(){return u},frontMatter:function(){return a},metadata:function(){return d},toc:function(){return p}});var o=t(7462),i=t(3366),r=(t(7294),t(3905)),s=(t(9055),t(8909)),l=["components"],a={},c=void 0,d={unversionedId:"Engineering/FrontEnd/ComponentsSection/FormComponents/VAModalPicker",id:"Engineering/FrontEnd/ComponentsSection/FormComponents/VAModalPicker",isDocsHomePage:!1,title:"VAModalPicker",description:"export const exampleString = `<VAModalPicker",source:"@site/docs/Engineering/FrontEnd/ComponentsSection/FormComponents/VAModalPicker.mdx",sourceDirName:"Engineering/FrontEnd/ComponentsSection/FormComponents",slug:"/Engineering/FrontEnd/ComponentsSection/FormComponents/VAModalPicker",permalink:"/docs/Engineering/FrontEnd/ComponentsSection/FormComponents/VAModalPicker",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"RadioGroup",permalink:"/docs/Engineering/FrontEnd/ComponentsSection/FormComponents/RadioGroup"},next:{title:"VASelector",permalink:"/docs/Engineering/FrontEnd/ComponentsSection/FormComponents/VASelector"}},p=[],u="<VAModalPicker \nselectedValue={selected} \nonSelectionChange={(textValue) => { setSelected(textValue) }} \npickerOptions={ [ { label: 'item', value: 'itemValue' } ] }/>",m={toc:p,exampleString:u};function b(e){var n=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(s.Z,{componentName:"VAModalPicker",example:u,codeString:"import { AccessibilityProps, Modal, Pressable, PressableProps, View } from 'react-native'\nimport { useSafeAreaInsets } from 'react-native-safe-area-context'\nimport React, { FC, ReactElement, useEffect, useState } from 'react'\n\nimport { Box, BoxProps, TextView, VAIcon, VAScrollView, ValidationFunctionItems } from 'components'\nimport { a11yHintProp, a11yValueProp, testIdProps } from 'utils/accessibility'\nimport { generateA11yValue, generateInputTestID, getInputWrapperProps, renderInputError, renderInputLabelSection, updateInputErrorMessage } from '../formFieldUtils'\nimport { useTheme, useTranslation } from 'utils/hooks'\nimport PickerList, { PickerListItemObj } from './PickerList'\n\n/**\n * Signifies type of each item in list of {@link pickerOptions}\n */\nexport type PickerItem = {\n  /** label is the text displayed to the user for the item */\n  label: string\n  /** value is the unique value of the item, used to update and keep track of the current label displayed */\n  value: string\n}\n\nexport type VAModalPickerProps = {\n  /** Currently selected item from list of options */\n  selectedValue: string\n  /** Called when the selected value is changed */\n  onSelectionChange: (selectValue: string) => void\n  /** list of items of containing types label and value for each option in the picker */\n  pickerOptions: Array<PickerItem>\n  /** i18n key for the text label next the picker field */\n  labelKey?: string\n  /** optional boolean that disables the picker when set to true */\n  disabled?: boolean\n  /** optional testID for the overall component */\n  testID?: string\n  /** optional boolean that displays required text next to label if set to true */\n  isRequiredField?: boolean\n  /** optional key for string to display underneath label */\n  helperTextKey?: string\n  /** optional callback to update the error message if there is an error */\n  setError?: (error?: string) => void\n  /** if this exists updated picker styles to error state */\n  error?: string\n  /** optional list of validation functions to check against */\n  validationList?: Array<ValidationFunctionItems>\n  /** If true, will include a blank option at the top of the list with a blank value */\n  includeBlankPlaceholder?: boolean\n}\n\n/**A common component to display a picker for the device with an optional label*/\nconst VAModalPicker: FC<VAModalPickerProps> = ({\n  selectedValue,\n  onSelectionChange,\n  pickerOptions,\n  labelKey,\n  disabled,\n  testID,\n  isRequiredField,\n  helperTextKey,\n  setError,\n  error,\n  validationList,\n  includeBlankPlaceholder,\n}) => {\n  const [modalVisible, setModalVisible] = useState(false)\n  const theme = useTheme()\n  const t = useTranslation()\n  const insets = useSafeAreaInsets()\n\n  const [currentSelectedValue, setCurrentSelectedValue] = useState(selectedValue)\n  const [focusUpdated, setFocusUpdated] = useState(false)\n  const [isFocused, setIsFocused] = useState(false)\n\n  useEffect(() => {\n    updateInputErrorMessage(isFocused, isRequiredField, error, setError, selectedValue, focusUpdated, setFocusUpdated, validationList)\n  }, [isFocused, labelKey, selectedValue, error, setError, isRequiredField, t, focusUpdated, validationList])\n\n  const showModal = (): void => {\n    if (!disabled) {\n      setIsFocused(true)\n      setModalVisible(true)\n    }\n  }\n\n  const onDone = (): void => {\n    onSelectionChange(currentSelectedValue)\n    setModalVisible(false)\n    setIsFocused(false)\n    setFocusUpdated(true)\n  }\n\n  const onCancel = (): void => {\n    // Reset the selected picker item\n    setCurrentSelectedValue(selectedValue)\n\n    setModalVisible(false)\n    setIsFocused(false)\n    setFocusUpdated(true)\n  }\n\n  const handleSelection = (selectionVal: string): void => {\n    setCurrentSelectedValue(selectionVal)\n  }\n\n  const allPickerOptions: Array<PickerItem> = includeBlankPlaceholder\n    ? [\n        {\n          value: '',\n          label: '',\n        },\n      ].concat(pickerOptions)\n    : pickerOptions\n\n  const pickerListItems: Array<PickerListItemObj> = allPickerOptions.map((pickerOption) => {\n    return {\n      text: pickerOption.label,\n      onPress: () => {\n        handleSelection(pickerOption.value)\n      },\n      isSelected: currentSelectedValue === pickerOption.value,\n    }\n  })\n\n  const currentlySelectedOption = allPickerOptions.find((el) => el.value === selectedValue)\n  const resultingTestID = generateInputTestID(testID, labelKey, isRequiredField, helperTextKey, error, t, 'common:picker')\n\n  const parentProps: AccessibilityProps = {\n    ...a11yValueProp({ text: generateA11yValue(currentlySelectedOption?.label, isFocused, t) }),\n    accessibilityRole: 'spinbutton',\n  }\n\n  const renderSelectionBox = (): ReactElement => {\n    const wrapperProps = getInputWrapperProps(theme, error, false)\n\n    const valueBox = (\n      <Box {...wrapperProps} pl={theme.dimensions.condensedMarginBetween}>\n        <Box width=\"100%\" display={'flex'} flexDirection={'row'} justifyContent={'space-between'} alignItems={'center'}>\n          <TextView flex={1}>{currentlySelectedOption?.label}</TextView>\n          <Box pr={theme.dimensions.buttonPadding}>\n            <VAIcon name=\"DatePickerArrows\" fill=\"grayDark\" width={16} height={16} />\n          </Box>\n        </Box>\n      </Box>\n    )\n\n    const content = (\n      <Box>\n        {labelKey && renderInputLabelSection(error, false, isRequiredField, labelKey, t, helperTextKey, theme)}\n        {!!error && renderInputError(theme, error)}\n        {valueBox}\n      </Box>\n    )\n\n    return (\n      <Pressable onPress={showModal} accessible={true} {...testIdProps(resultingTestID)} {...parentProps}>\n        {content}\n      </Pressable>\n    )\n  }\n\n  const actionsBarBoxProps: BoxProps = {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    backgroundColor: 'main',\n    minHeight: theme.dimensions.touchableMinHeight,\n    py: theme.dimensions.buttonPadding,\n    px: theme.dimensions.gutter,\n    ml: insets.left,\n    mr: insets.right,\n  }\n\n  const topPadding = insets.top + theme.dimensions.pickerModalTopPadding\n\n  const cancelLabel = t('common:cancel')\n  const doneLabel = t('common:done')\n\n  const cancelButtonProps: PressableProps = {\n    accessible: true,\n    accessibilityRole: 'button',\n    ...testIdProps(cancelLabel),\n    ...a11yHintProp(t('common:cancel.picker.a11yHint')),\n  }\n\n  const doneButtonProps: PressableProps = {\n    accessible: true,\n    accessibilityRole: 'button',\n    ...testIdProps(doneLabel),\n    ...a11yHintProp(t('common:done.picker.a11yHint')),\n  }\n\n  return (\n    <View>\n      <Modal\n        animationType=\"slide\"\n        transparent={true}\n        visible={modalVisible}\n        supportedOrientations={['portrait', 'landscape']}\n        onRequestClose={() => {\n          setModalVisible(!modalVisible)\n        }}>\n        <Box flex={1} flexDirection=\"column\" accessibilityViewIsModal={true}>\n          <Box flexGrow={1} backgroundColor=\"modalOverlay\" opacity={0.8} pt={topPadding} />\n          <Box backgroundColor=\"list\" pb={insets.bottom} flexShrink={1}>\n            <Box {...actionsBarBoxProps}>\n              <Pressable onPress={onCancel} {...cancelButtonProps}>\n                <TextView allowFontScaling={false}>{cancelLabel}</TextView>\n              </Pressable>\n              <Box flex={4}>\n                <TextView variant=\"MobileBodyBold\" textAlign={'center'} allowFontScaling={false}>\n                  {t(labelKey || '')}\n                </TextView>\n              </Box>\n              <Pressable onPress={onDone} {...doneButtonProps}>\n                <TextView allowFontScaling={false}>{doneLabel}</TextView>\n              </Pressable>\n            </Box>\n            <VAScrollView bounces={false}>\n              <PickerList items={pickerListItems} />\n            </VAScrollView>\n          </Box>\n        </Box>\n      </Modal>\n      {renderSelectionBox()}\n    </View>\n  )\n}\n\nexport default VAModalPicker\n",mdxType:"ComponentTopInfo"}))}b.isMDXComponent=!0}}]);