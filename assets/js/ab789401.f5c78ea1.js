"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5383],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),d=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=d(n),m=a,h=c["".concat(s,".").concat(m)]||c[m]||p[m]||l;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var d=2;d<l;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},96473:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return u}});var r=n(87462),a=n(63366),l=(n(67294),n(3905)),i=["components"],o={sidebar_position:2,sidebar_label:"Workflows"},s=void 0,d={unversionedId:"Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows",id:"Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows",title:"Workflows",description:"This is a list of all the reusable workflows in GitHub Actions and what they do.",source:"@site/docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows.md",sourceDirName:"Engineering/DevOps/Automation Code Docs/GitHub Actions",slug:"/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows",permalink:"/va-mobile-app/docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Workflows",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,sidebar_label:"Workflows"},sidebar:"tutorialSidebar",previous:{title:"Overview",permalink:"/va-mobile-app/docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/Overview"},next:{title:"Scripts, Etc.",permalink:"/va-mobile-app/docs/Engineering/DevOps/Automation Code Docs/Scripts"}},u=[{value:"<code>add-new-user</code>",id:"add-new-user",children:[{value:"Description",id:"description",children:[],level:3},{value:"Trigger",id:"trigger",children:[],level:3},{value:"Steps/Source",id:"stepssource",children:[],level:3}],level:2},{value:"<code>approve_command</code>",id:"approve_command",children:[{value:"Description",id:"description-1",children:[],level:3},{value:"Trigger",id:"trigger-1",children:[],level:3},{value:"Steps/Source",id:"stepssource-1",children:[],level:3}],level:2},{value:"<code>bundler_update</code>",id:"bundler_update",children:[{value:"Description",id:"description-2",children:[],level:3},{value:"Trigger",id:"trigger-2",children:[],level:3},{value:"Steps/Source",id:"stepssource-2",children:[],level:3}],level:2},{value:"<code>codeql</code>",id:"codeql",children:[{value:"Description",id:"description-3",children:[],level:3},{value:"Trigger",id:"trigger-3",children:[],level:3},{value:"Steps/Source",id:"stepssource-3",children:[],level:3}],level:2},{value:"<code>create_test_rail_milestone</code>",id:"create_test_rail_milestone",children:[{value:"Description",id:"description-4",children:[],level:3},{value:"Trigger",id:"trigger-4",children:[],level:3},{value:"Paramters",id:"paramters",children:[{value:"Secrets",id:"secrets",children:[],level:4}],level:3},{value:"Outputs",id:"outputs",children:[],level:3},{value:"Steps/Source",id:"stepssource-4",children:[],level:3}],level:2},{value:"<code>documentation_deploy</code>",id:"documentation_deploy",children:[{value:"Description",id:"description-5",children:[],level:3},{value:"Trigger",id:"trigger-5",children:[],level:3},{value:"Steps/Source",id:"stepssource-5",children:[],level:3}],level:2},{value:"<code>documentation_test_build</code>",id:"documentation_test_build",children:[{value:"Description",id:"description-6",children:[],level:3},{value:"Trigger",id:"trigger-6",children:[],level:3},{value:"Steps/Source",id:"stepssource-6",children:[],level:3}],level:2},{value:"<code>production_builds</code>",id:"production_builds",children:[{value:"Description",id:"description-7",children:[],level:3},{value:"Trigger",id:"trigger-7",children:[],level:3},{value:"Steps/Source",id:"stepssource-7",children:[],level:3}],level:2},{value:"<code>release_branch_issue</code>",id:"release_branch_issue",children:[{value:"Description",id:"description-8",children:[],level:3},{value:"Trigger",id:"trigger-8",children:[],level:3},{value:"Steps/Source",id:"stepssource-8",children:[],level:3}],level:2},{value:"<code>release_pull_request</code>",id:"release_pull_request",children:[{value:"Description",id:"description-9",children:[],level:3},{value:"Trigger",id:"trigger-9",children:[],level:3},{value:"Parameters",id:"parameters",children:[{value:"Inputs",id:"inputs",children:[],level:4},{value:"Secrets",id:"secrets-1",children:[],level:4},{value:"Outputs",id:"outputs-1",children:[],level:4}],level:3},{value:"Steps/Source",id:"stepssource-9",children:[],level:3}],level:2},{value:"<code>slash_commands</code>",id:"slash_commands",children:[{value:"Description",id:"description-10",children:[],level:3},{value:"Trigger",id:"trigger-10",children:[],level:3},{value:"Steps/Source",id:"stepssource-10",children:[],level:3}],level:2},{value:"<code>start_test_rail_run</code>",id:"start_test_rail_run",children:[{value:"Description",id:"description-11",children:[],level:3},{value:"Trigger",id:"trigger-11",children:[],level:3},{value:"Parameters",id:"parameters-1",children:[{value:"Inputs",id:"inputs-1",children:[],level:4},{value:"Secrets",id:"secrets-2",children:[],level:4},{value:"Outputs",id:"outputs-2",children:[],level:4}],level:3},{value:"Steps/Source",id:"stepssource-11",children:[],level:3}],level:2},{value:"<code>update_testrail_run</code>",id:"update_testrail_run",children:[{value:"Description",id:"description-12",children:[],level:3},{value:"Trigger",id:"trigger-12",children:[],level:3},{value:"Steps/Source",id:"stepssource-12",children:[],level:3}],level:2}],p={toc:u};function c(e){var t=e.components,n=(0,a.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This is a list of all the reusable workflows in GitHub Actions and what they do."),(0,l.kt)("p",null,"In an effort to reduce the page size, large workflow code will be linked instead of being provided here."),(0,l.kt)("h2",{id:"add-new-user"},(0,l.kt)("inlineCode",{parentName:"h2"},"add-new-user")),(0,l.kt)("h3",{id:"description"},"Description"),(0,l.kt)("p",null,"Workflow used to add a new user to the ",(0,l.kt)("inlineCode",{parentName:"p"},"flagship-mobile-team")," in GitHub, which grants write and read access tot he ",(0,l.kt)("inlineCode",{parentName:"p"},"va-mobile-app")," repository and to our ZenHub instance. "),(0,l.kt)("h3",{id:"trigger"},"Trigger"),(0,l.kt)("p",null,"Creation of ",(0,l.kt)("inlineCode",{parentName:"p"},"Add User to VA Flagship Mobile Team")," ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/va-mobile-app/issues/new/choose"},"template")," in ",(0,l.kt)("inlineCode",{parentName:"p"},"va-mobile-app")," repository. "),(0,l.kt)("h3",{id:"stepssource"},"Steps/Source"),(0,l.kt)("details",null,(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'- uses: actions/github-script@v6\n    with:\n      github-token: ${{ secrets.GH_ACTIONS_PAT }}\n    script: |\n    const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");\n    // const DEBUG = core.isDebug();\n    // function debug(msg) {\n    //   if (DEBUG) {\n    //     core.debug(msg);\n    //   }\n    // }\n    // GH team to add user to\n    const TEAM_SLUG = "flagship-mobile-team";\n    // role to give user in team\n    const DEFAULT_ROLE = "member"\n    // assignees for any errors\n    const EXCEPTION_ASSIGNEES = [\'lexicalninja\', \'narin\']\n\n    function getFirstMatch(regex, str) {\n    const match = regex.exec(str);\n      if (match) {\n        return match[match.length > 1 ? 1 : 0];\n      }\n        return null;\n    }\n\n    function addComment(body) {\n      return github.rest.issues.createComment({\n        owner,\n        repo,\n        issue_number: context.payload.issue.number,\n        body,\n      });\n    }\n\n    function addLabels(labels) {\n      let normalizedLabels = labels;\n      if (!Array.isArray(labels)) {\n        normalizedLabels = [labels];\n      }\n      return github.rest.issues.addLabels({\n        owner,\n        repo,\n        issue_number: context.payload.issue.number,\n        labels: normalizedLabels,\n      });\n    }\n\n    function closeIssue() {\n      return github.rest.issues.update({\n        owner,\n        repo,\n        issue_number: context.payload.issue.number,\n        state: "closed",\n      });\n    }\n\n    function addAssignees(assignees) {\n      return github.rest.issues.update({\n          owner,\n          repo,\n          issue_number: context.payload.issue.number,\n          assignees,\n        });\n      }\n\n    async function inviteToTeam(username) {\n      return github.rest.teams.addOrUpdateMembershipForUserInOrg({\n        org: owner,\n        team_slug: TEAM_SLUG,\n        username: username,\n        role: DEFAULT_ROLE\n      })\n    }\n')),(0,l.kt)("summary",null," Click for full source",(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'...\nconst extractUsernameRegex = /@[a-zA-Z-_0-9]+/;\nconst username = getFirstMatch(extractUsernameRegex, context.payload.issue.body).substring(1);\n\n\nif(username) {\n  await inviteToTeam(username)\n  await addComment("User added successfully")\n  await addLabels("complete")\n  await closeIssue()\n} else {\n  // error\n  const errorMessage = "Invalid username. Requires manual addition to team"\n  // assign for manual approval and addition, add error label\n  await addAssignees(EXCEPTION_ASSIGNEES)\n  await addLabels("needs-approval")\n  await addComment(errorMessage)\n}\n...\n'))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-javascript"},'- if: ${{ failure() }}\n  uses: actions/github-script@v6\n  with:\n  github-token: ${{ secrets.GH_ACTIONS_PAT }}\n  script: |\n  const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");\n  function addComment(body) {\n  return github.rest.issues.createComment({\n  owner,\n  repo,\n  issue_number: context.payload.issue.number,\n  body,\n  });\n  }\n\n  await addComment(\'Failed to send invitation. See Actions logs for details.)\n'))),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"approve_command"},(0,l.kt)("inlineCode",{parentName:"h2"},"approve_command")),(0,l.kt)("h3",{id:"description-1"},"Description"),(0,l.kt)("p",null,"Workflow for the ",(0,l.kt)("inlineCode",{parentName:"p"},"/approve")," command in GitHub Issues. Workflow is made available in Issues by the ",(0,l.kt)("inlineCode",{parentName:"p"},"slash_commands")," workflow."),(0,l.kt)("p",null,"The current version of the workflow looks for a comment in issues that starts with ",(0,l.kt)("inlineCode",{parentName:"p"},"/approve"),". The command should be immediately followed by a version string that matches the version regex ",(0,l.kt)("inlineCode",{parentName:"p"},"/^vd+.d+.d+$/")," "),(0,l.kt)("p",null,"The current logic on this trigger is pretty brittle and if the admin doesn't do it correctly it can have some incorrect effects that need to get fixed with a new comment that is formatted correctly. There is likely some work to make this better, but there is some time needed to sort out the logic and have the command send the correct message back to the issue and to tag whoever initiated the command."),(0,l.kt)("p",null,"This command calls the ",(0,l.kt)("inlineCode",{parentName:"p"},"release_pull_request")," workflow during execution."),(0,l.kt)("h3",{id:"trigger-1"},"Trigger"),(0,l.kt)("p",null,"Workflow is triggered when a user types ",(0,l.kt)("inlineCode",{parentName:"p"},"/approve")," into a GitHub Issue and clicks the comment button. "),(0,l.kt)("h3",{id:"stepssource-1"},"Steps/Source"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/va-mobile-app/blob/develop/.github/workflows/approve_command.yml"},"See in repository")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"bundler_update"},(0,l.kt)("inlineCode",{parentName:"h2"},"bundler_update")),(0,l.kt)("h3",{id:"description-2"},"Description"),(0,l.kt)("p",null,"Automated workflow that runs every Wednesday to update all the installed bundler libraries and any installed Fastlane plugins for both the iOS and Android Fastfiles"),(0,l.kt)("h3",{id:"trigger-2"},"Trigger"),(0,l.kt)("p",null,"Runs every Wednesday at 0700 UTC on only the ",(0,l.kt)("inlineCode",{parentName:"p"},"develop")," branch."),(0,l.kt)("h3",{id:"stepssource-2"},"Steps/Source"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/va-mobile-app/blob/develop/.github/workflows/bundler_updates.yml"},"See in repository")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"codeql"},(0,l.kt)("inlineCode",{parentName:"h2"},"codeql")),(0,l.kt)("h3",{id:"description-3"},"Description"),(0,l.kt)("p",null,"Runs mandatory Code QL scanning on the repository. This workflow was created and is maintained by the VA's GitHub group and should not be updated or removed without consent from that team in order to stay in compliance with VA security policy."),(0,l.kt)("p",null,"If you need to update the script, please read the comments in the workflow to see what can be added to scanning by the mobile team. "),(0,l.kt)("h3",{id:"trigger-3"},"Trigger"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"- cron: '27 2 * * 1'\n")),(0,l.kt)("p",null,"Runs every Monday at 0227 UTC"),(0,l.kt)("p",null,"Also runs on every push or pull request to ",(0,l.kt)("inlineCode",{parentName:"p"},"devlop")," branch."),(0,l.kt)("h3",{id:"stepssource-3"},"Steps/Source"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/va-mobile-app/blob/develop/.github/workflows/codeql.yml"},"See in repository")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"create_test_rail_milestone"},(0,l.kt)("inlineCode",{parentName:"h2"},"create_test_rail_milestone")),(0,l.kt)("h3",{id:"description-4"},"Description"),(0,l.kt)("p",null,"Creates a new Sprint Milestone in TestRail that can be added to a test run and used for tracking in TestRail."),(0,l.kt)("h3",{id:"trigger-4"},"Trigger"),(0,l.kt)("p",null,"Runs when called by another workflow"),(0,l.kt)("h3",{id:"paramters"},"Paramters"),(0,l.kt)("h4",{id:"secrets"},"Secrets"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"required?"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"TEST_RAIL_USER"),(0,l.kt)("td",{parentName:"tr",align:null},"Testrail robot userid. User and id received from the VA testing tools team. See Github Robot PAT for Testrail in VA Mobile 1Password"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"TEST_RAIL_KEY"),(0,l.kt)("td",{parentName:"tr",align:null},"TestRail API key. See Github Robot PAT for Testrail in VA Mobile 1Password"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes")))),(0,l.kt)("h3",{id:"outputs"},"Outputs"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"milestoneId"),(0,l.kt)("td",{parentName:"tr",align:null},"TestRail ID for the Milestone that is created"),(0,l.kt)("td",{parentName:"tr",align:null},"string")))),(0,l.kt)("h3",{id:"stepssource-4"},"Steps/Source"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'create_milestone:\n  outputs:\n    milestoneId: ${{ steps.add_milestone.outputs.milestone }}\n  runs-on: ubuntu-latest\n  steps:\n    - name: \'Add new sprint milestone in Testrail\'\n      id: add_milestone\n      run: |\n        dateRange="$(date \'+%B %-d\') - $(date -d \'+13 days\' \'+%B %-d\')"\n        id=$(curl -X POST -H \'Content-Type: application/json\' \\\n          -u "${{secrets.TEST_RAIL_USER}}:${{secrets.TEST_RAIL_KEY}}" \\\n          "https://dsvavsp.testrail.io//index.php?/api/v2/add_milestone/29" \\\n          -d \'{"name": "Sprint: \'"${dateRange}"\'", "description": "Milestone for all testing performed during Sprint: \'"${dateRange}"\'", "start_on": \'$(date +%s)\', "due_on": \'$(date -d \'+13 days\' \'+%s\')\' }\' |\n          jq \'.id\')\n        echo "id is $id"\n        curl -X POST -H \'Content-Type: application/json\' \\\n          -u "${{secrets.TEST_RAIL_USER}}:${{secrets.TEST_RAIL_KEY}}" \\\n          "https://dsvavsp.testrail.io//index.php?/api/v2/update_milestone/${id}" \\\n          -d \'{"is_started":1}\'\n        echo ""\n        echo "::set-output name=milestone::${id}"\n')),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"documentation_deploy"},(0,l.kt)("inlineCode",{parentName:"h2"},"documentation_deploy")),(0,l.kt)("h3",{id:"description-5"},"Description"),(0,l.kt)("p",null,"Workflow that runs every day to update this documentation site with any approved changes."),(0,l.kt)("h3",{id:"trigger-5"},"Trigger"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},'- cron: "0 3 * * *"\n')),(0,l.kt)("p",null,"Runs every day at 0300 UTC"),(0,l.kt)("h3",{id:"stepssource-5"},"Steps/Source"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/va-mobile-app/blob/develop/.github/workflows/documentation_deploy.yml"},"See in repository")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"documentation_test_build"},(0,l.kt)("inlineCode",{parentName:"h2"},"documentation_test_build")),(0,l.kt)("h3",{id:"description-6"},"Description"),(0,l.kt)("p",null,"Automated workflow that runs on every PR that touches autogenerated content for this documentation site to make sure that not of the changes breaks the automatic build and deploy of the site. "),(0,l.kt)("h3",{id:"trigger-6"},"Trigger"),(0,l.kt)("p",null,"Runs on every pull request to ",(0,l.kt)("inlineCode",{parentName:"p"},"develop")," branch that touches the following paths:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"VAMobile/src/components/**")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"VAMobile/documentation/**")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"VAMobile/src/utils/hooks.tsx"))),(0,l.kt)("h3",{id:"stepssource-6"},"Steps/Source"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"test-deploy:\n  name: Test\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v2\n    - uses: actions/setup-node@v2\n      with:\n        node-version: 14.x\n        cache: yarn\n        cache-dependency-path: VAMobile/yarn.lock\n    - name: Test build\n      working-directory: VAMobile\n      run: |\n        yarn install --frozen-lockfile\n        cd documentation\n        yarn install --frozen-lockfile\n        yarn build\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"production_builds"},(0,l.kt)("inlineCode",{parentName:"h2"},"production_builds")),(0,l.kt)("h3",{id:"description-7"},"Description"),(0,l.kt)("p",null,"Automated workflow that runs on merges to main. If the merge title matches our version scheme, this workflow will then tag that commit with the version string, kicking off the ",(0,l.kt)("a",{parentName:"p",href:"/va-mobile-app/docs/Engineering/DevOps/Automation%20Code%20Docs/CircleCI/Workflows/#release_build"},"production build flows on CircleCI")),(0,l.kt)("h3",{id:"trigger-7"},"Trigger"),(0,l.kt)("p",null,"Pull Request merged to ",(0,l.kt)("inlineCode",{parentName:"p"},"main")," where the PR title matches ",(0,l.kt)("inlineCode",{parentName:"p"},"^v[0-9]+\\.[0-9]+\\.[0-9]+$")," "),(0,l.kt)("h3",{id:"stepssource-7"},"Steps/Source"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"tag_for_release:\n  if: github.event.pull_request.merged == true\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v2\n      - name: Tag for release\n        run: |\n          if [[ ${{github.event.pull_request.title}} =~ (^v[0-9]+\\.[0-9]+\\.[0-9]+$) ]];\n          then\n            git config --global user.name 'VA Automation Bot'\n            git config --global user.email 'va-mobileapp@adhocteam.us'\n            git tag -a ${{github.event.pull_request.title}} -m ${{github.event.pull_request.title}}\n            git push origin ${{github.event.pull_request.title}}\n          else\n            echo 'Non-release PR, exiting'\n            exit 0\n          fi\n        shell: bash\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"release_branch_issue"},(0,l.kt)("inlineCode",{parentName:"h2"},"release_branch_issue")),(0,l.kt)("h3",{id:"description-8"},"Description"),(0,l.kt)("p",null,"This automated workflow creates the release ticket for every release. "),(0,l.kt)("p",null,"This ticket runs any time a release branch is created that matches our strategy of ",(0,l.kt)("inlineCode",{parentName:"p"},"release/^v[0-9]+\\.[0-9]+\\.[0-9]+$")," and does the following:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"scrapes the version from the GitHub reference"),(0,l.kt)("li",{parentName:"ul"},"Calculates teh QA, Product, and VA Due Dates for the ticket"),(0,l.kt)("li",{parentName:"ul"},"Calculates the Release Date for the specified version"),(0,l.kt)("li",{parentName:"ul"},"Creates a table of all the Sev-1 and Sev-2 bugs that are open in the repository"),(0,l.kt)("li",{parentName:"ul"},"Creates an issue from the ",(0,l.kt)("inlineCode",{parentName:"li"},"release_ticket")," GitHub Issue Template"),(0,l.kt)("li",{parentName:"ul"},"Creates a TestRail Run and Milestone for QA regression testing and tracking"),(0,l.kt)("li",{parentName:"ul"},"Adds the TestRail run graph to the ticket after the run has been created")),(0,l.kt)("h3",{id:"trigger-8"},"Trigger"),(0,l.kt)("p",null,"Runs on every branch create and creates a new ticket only if the branch name matches ",(0,l.kt)("inlineCode",{parentName:"p"},"release/^v[0-9]+\\.[0-9]+\\.[0-9]+$")),(0,l.kt)("h3",{id:"stepssource-8"},"Steps/Source"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/va-mobile-app/blob/develop/.github/workflows/release_branch_issue.yml"},"See in repository")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"release_pull_request"},(0,l.kt)("inlineCode",{parentName:"h2"},"release_pull_request")),(0,l.kt)("h3",{id:"description-9"},"Description"),(0,l.kt)("p",null,"This Workflow runs when called by another workflow and merges the release branch changes to ",(0,l.kt)("inlineCode",{parentName:"p"},"main")," and then creates a PR for any branch updates to be pulled back into ",(0,l.kt)("inlineCode",{parentName:"p"},"develop")),(0,l.kt)("h3",{id:"trigger-9"},"Trigger"),(0,l.kt)("p",null,"Runs when called by another Workflow"),(0,l.kt)("h3",{id:"parameters"},"Parameters"),(0,l.kt)("h4",{id:"inputs"},"Inputs"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"required?"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"version"),(0,l.kt)("td",{parentName:"tr",align:null},"Version Number (eg. v1.1.0)"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes")))),(0,l.kt)("h4",{id:"secrets-1"},"Secrets"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"required?"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"GH_ACTIONS_PAT"),(0,l.kt)("td",{parentName:"tr",align:null},"PAT token from composite parent workflow. Should be PAT from our automation robot"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes")))),(0,l.kt)("h4",{id:"outputs-1"},"Outputs"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"devPrUrl"),(0,l.kt)("td",{parentName:"tr",align:null},"URL string that points to the new PR to ",(0,l.kt)("inlineCode",{parentName:"td"},"develop")," for any release branch specific changes"),(0,l.kt)("td",{parentName:"tr",align:null},"string")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"releaseHash"),(0,l.kt)("td",{parentName:"tr",align:null},"String value of the commit hash on ",(0,l.kt)("inlineCode",{parentName:"td"},"main")," that can point to the release changes as a single commit in GitHub"),(0,l.kt)("td",{parentName:"tr",align:null},"string")))),(0,l.kt)("h3",{id:"stepssource-9"},"Steps/Source"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/va-mobile-app/blob/develop/.github/workflows/release_pull_request.yml"},"See in repository")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"slash_commands"},(0,l.kt)("inlineCode",{parentName:"h2"},"slash_commands")),(0,l.kt)("h3",{id:"description-10"},"Description"),(0,l.kt)("p",null,"Workflow sets up any slash commands that have been created to run in a newly created issue. "),(0,l.kt)("p",null,"Uses the ",(0,l.kt)("a",{parentName:"p",href:"https://github.com/peter-evans/slash-command-dispatch"},"Slash Command Dispatch Action")," from GitHub Marketplace"),(0,l.kt)("p",null,'This can be used to add any more "chat ops"-type automations in the future by adding to the ',(0,l.kt)("inlineCode",{parentName:"p"},"commands:")," option"),(0,l.kt)("h3",{id:"trigger-10"},"Trigger"),(0,l.kt)("p",null,"Runs on every issue created comment and fires any slash commands installed if found."),(0,l.kt)("h3",{id:"stepssource-10"},"Steps/Source"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-yaml"},"slashCommandDispatch:\n  runs-on: ubuntu-latest\n  steps:\n    - name: Slash Command Dispatch\n      uses: peter-evans/slash-command-dispatch@v2\n      with:\n        token: ${{ secrets.GH_ACTIONS_PAT }}\n        reaction-token: ${{ secrets.GH_ACTIONS_PAT }}\n        permission: admin\n        commands: |\n          approve\n")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"start_test_rail_run"},(0,l.kt)("inlineCode",{parentName:"h2"},"start_test_rail_run")),(0,l.kt)("h3",{id:"description-11"},"Description"),(0,l.kt)("p",null,"This workflow creates a new TestRail Test Run for QA when called from another Workflow."),(0,l.kt)("h3",{id:"trigger-11"},"Trigger"),(0,l.kt)("p",null,"Runs when called by another Workflow"),(0,l.kt)("h3",{id:"parameters-1"},"Parameters"),(0,l.kt)("h4",{id:"inputs-1"},"Inputs"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"required?"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"version"),(0,l.kt)("td",{parentName:"tr",align:null},"Version Number (eg. v1.1.0)"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"releaseDate"),(0,l.kt)("td",{parentName:"tr",align:null},"Go-live date for release (eg. 06/21/2022)"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"ticketNumber"),(0,l.kt)("td",{parentName:"tr",align:null},"Issue number for release ticket (eg. 3333)"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"milestoneId"),(0,l.kt)("td",{parentName:"tr",align:null},"TestRail Milestone ID for the run to be associated with"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes")))),(0,l.kt)("h4",{id:"secrets-2"},"Secrets"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"type"),(0,l.kt)("th",{parentName:"tr",align:null},"required?"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"TEST_RAIL_USER"),(0,l.kt)("td",{parentName:"tr",align:null},"Testrail robot userid. User and id received from the VA testing tools team. See Github Robot PAT for Testrail in VA Mobile 1Password"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"TEST_RAIL_KEY"),(0,l.kt)("td",{parentName:"tr",align:null},"TestRail API key. See Github Robot PAT for Testrail in VA Mobile 1Password"),(0,l.kt)("td",{parentName:"tr",align:null},"string"),(0,l.kt)("td",{parentName:"tr",align:null},"yes")))),(0,l.kt)("h4",{id:"outputs-2"},"Outputs"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Description"),(0,l.kt)("th",{parentName:"tr",align:null},"type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"testrailUrl"),(0,l.kt)("td",{parentName:"tr",align:null},"URL String for the newly created TestRail run"),(0,l.kt)("td",{parentName:"tr",align:null},"string")))),(0,l.kt)("h3",{id:"stepssource-11"},"Steps/Source"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/va-mobile-app/blob/develop/.github/workflows/start_test_rail_run.yml"},"See in repository")),(0,l.kt)("hr",null),(0,l.kt)("h2",{id:"update_testrail_run"},(0,l.kt)("inlineCode",{parentName:"h2"},"update_testrail_run")),(0,l.kt)("h3",{id:"description-12"},"Description"),(0,l.kt)("p",null,"This Workflow runs on a repository dispatch is received from automated TestRail webhooks. "),(0,l.kt)("p",null,"When the TestRail run is updated, it sends a webhook to the repository. This workflow is fired and then updated the mermaid diagram in the Release Ticket issue with the testing results so far in the run"),(0,l.kt)("p",null,"NOTE: Currently, TestRail does not fire a webhook when a test is completed in the run, only when top-level meta-data has been updated in the Run. We have requested an enhancement to TestRail to change this, but there is no documented tracking available for enhancement requests from the TestRail team. This will typically only fire and update once the QA team marks the Run as complete."),(0,l.kt)("h3",{id:"trigger-12"},"Trigger"),(0,l.kt)("p",null,"Runs when a webhook from TestRail is sent"),(0,l.kt)("h3",{id:"stepssource-12"},"Steps/Source"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/va-mobile-app/blob/develop/.github/workflows/update_testrail_run.yml"},"See in repository")),(0,l.kt)("hr",null))}c.isMDXComponent=!0}}]);