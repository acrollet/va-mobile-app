"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5898],{32666:(e,t,n)=>{n.d(t,{Z:()=>d});var o=n(67294),l=n(97405),i=n(22808),r=n(30433),a=n(41284),s=n(36005);const c=e=>{let{props:t}=e;return t?o.createElement(o.Fragment,null,s.ZP.isEmpty(t)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(t).map((e=>o.createElement("tr",{key:e},o.createElement("td",null,o.createElement("code",null,e)),o.createElement("td",{style:{minWidth:200}},t[e].type?.name),o.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),o.createElement("td",null,t[e].required?"Yes":"No"),o.createElement("td",null,t[e].description))))))):null};function d(e){const t=(0,a.N)(e.componentName),{description:n,displayName:s,props:d}=t[0],p=`How to use the ${s} component`,m=`Full code for the ${s} component`;return o.createElement(o.Fragment,null,n,o.createElement("br",null),o.createElement("br",null),o.createElement(i.Z,null,o.createElement(r.Z,{value:"props",label:"Properties"},o.createElement(c,{props:d})),o.createElement(r.Z,{value:"example",label:"Example"},e.example&&o.createElement(l.Z,{title:p,className:"language-tsx test"},e.example)),o.createElement(r.Z,{value:"code",label:"Source Code"},e.codeString&&o.createElement(l.Z,{title:m,className:"language-tsx"},e.codeString)),o.createElement(r.Z,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},41284:(e,t,n)=>{n.d(t,{N:()=>l});var o=n(52426);const l=e=>(0,o.ZP)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},38519:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>s,default:()=>b,exampleString:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var o=n(87462),l=(n(67294),n(3905)),i=(n(8209),n(97405),n(2809)),r=n(32666);n.p;const a={title:"Alert box"},s=void 0,c={unversionedId:"Flagship design library/Components/Alerts and Progress/AlertBox",id:"Flagship design library/Components/Alerts and Progress/AlertBox",title:"Alert box",description:"This text provides the overall purpose and function of the component.",source:"@site/docs/Flagship design library/Components/Alerts and Progress/AlertBox.mdx",sourceDirName:"Flagship design library/Components/Alerts and Progress",slug:"/Flagship design library/Components/Alerts and Progress/AlertBox",permalink:"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/AlertBox",draft:!1,tags:[],version:"current",frontMatter:{title:"Alert box"},sidebar:"tutorialSidebar",previous:{title:"AccordionCollapsible",permalink:"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/AccordionCollapsible"},next:{title:"LoadingComponent",permalink:"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/LoadingComponent"}},d={},p=[{value:"Examples",id:"examples",level:2},{value:"Default",id:"default",level:3},{value:"Variations",id:"variations",level:3},{value:"Usage",id:"usage",level:2},{value:"When to use Component name",id:"when-to-use-component-name",level:3},{value:"When to consider something else",id:"when-to-consider-something-else",level:3},{value:"How this component works",id:"how-this-component-works",level:3},{value:"Behavior",id:"behavior",level:3},{value:"Choosing between variations",id:"choosing-between-variations",level:3},{value:"Placement",id:"placement",level:3},{value:"Design principles",id:"design-principles",level:3},{value:"Instances of this component in production",id:"instances-of-this-component-in-production",level:3},{value:"Content considerations",id:"content-considerations",level:2},{value:"Accessibility considerations",id:"accessibility-considerations",level:2},{value:"Related",id:"related",level:2},{value:"Code usage",id:"code-usage",level:2}],m='<AlertBox \n  title="Alert header text here" \n  text="Alert body text here"\n  textA11yLabel="Alert text a11y label here"\n  border="warning"\n/>',u={toc:p,exampleString:m},h="wrapper";function b(e){let{components:t,...n}=e;return(0,l.kt)(h,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"This text provides the overall purpose and function of the component."),(0,l.kt)("h2",{id:"examples"},"Examples"),(0,l.kt)("h3",{id:"default"},"Default"),(0,l.kt)("p",null,"Embed Figma master component. If available, add a link to Storybook."),(0,l.kt)("iframe",{width:"800",height:"450",alt:"Image of component examples in Figma showing the Snackbar component",src:"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Ffile%2FQVLPB3eOunmKrgQOuOt0SU%2FVAMobile-DesignLibrary1.0-%25F0%259F%2593%2590%3Fnode-id%3D638%253A1966%26t%3Diqk24DBhrvJTq9ln-1",allowfullscreen:!0}),(0,l.kt)("h3",{id:"variations"},"Variations"),(0,l.kt)("p",null,"Embed Figma variations. Show any differences between Android and iOS."),(0,l.kt)("iframe",{width:"800",height:"450",alt:"Image of component examples in Figma showing the Alert box component",src:"https://www.figma.com/embed?embed_host=share&url=https%3A%2F%2Fwww.figma.com%2Ffile%2FQVLPB3eOunmKrgQOuOt0SU%2FVAMobile-DesignLibrary1.0-%25F0%259F%2593%2590%3Fnode-id%3D638%253A1966%26t%3Diqk24DBhrvJTq9ln-1",allowfullscreen:!0}),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("h3",{id:"when-to-use-component-name"},"When to use Component name"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"In this context"),": Explain the scenario or user context where this component is, or could be, used."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"In this task"),": Explain the user task or tasks where this component is, or could be, used.")),(0,l.kt)("h3",{id:"when-to-consider-something-else"},"When to consider something else"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Not in this context"),": Explain which scenarios or user context where this component is not, or should not, be used."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Not for these tasks"),": Explain the user tasks where this component is not, or should not, be used."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Use this instead"),": Explain when another component should be used instead.")),(0,l.kt)("h3",{id:"how-this-component-works"},"How this component works"),(0,l.kt)("p",null,"Details the design decisions inherent to the component."),(0,l.kt)("h3",{id:"behavior"},"Behavior"),(0,l.kt)("p",null,"Describe the key interactions for this component."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Trigger"),": What does the user do to start the interaction with this component."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Rules"),": What rules govern how the component behaves. How does it work?"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Feedback"),": What the user sees, hears, and feels that help them understand the rules."),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"Loops and modes"),": Meta rules that govern the interaction.")),(0,l.kt)("h3",{id:"choosing-between-variations"},"Choosing between variations"),(0,l.kt)("p",null,"Help the designer and developer understand when to choose between any variations of this component. Describe any differences between Android and iOS."),(0,l.kt)("h3",{id:"placement"},"Placement"),(0,l.kt)("p",null,"Where the component appears visually, and if necessary to clarify, where it may appear in the source code. Can also comment on where the component is not to be placed."),(0,l.kt)("h3",{id:"design-principles"},"Design principles"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"List of design or UX principles that this component is an example or or adheres to.")),(0,l.kt)("h3",{id:"instances-of-this-component-in-production"},"Instances of this component in production"),(0,l.kt)("p",null,"Images with captions that describe different instances of this component being used in production."),(0,l.kt)("h2",{id:"content-considerations"},"Content considerations"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Bulleted list of content related instructions to the designer."),(0,l.kt)("li",{parentName:"ul"},"May be an include is shared with the Content style guide section.")),(0,l.kt)("h2",{id:"accessibility-considerations"},"Accessibility considerations"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Bulleted list of a11y related instructions to the designer and developer.")),(0,l.kt)("h2",{id:"related"},"Related"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"Links to related components.")),(0,l.kt)("h2",{id:"code-usage"},"Code usage"),(0,l.kt)("p",null,"If available, add a link to Storybook.\nIf Storybook is not available, add properties / examples / source code / accessibility information from the current doc site."),(0,l.kt)(r.Z,{componentName:"AlertBox",example:m,codeString:i.Z,mdxType:"ComponentTopInfo"}))}b.isMDXComponent=!0},2809:(e,t,n)=>{n.d(t,{Z:()=>o});const o="import { AccessibilityRole, ScrollView, View } from 'react-native'\nimport React, { FC, RefObject, useEffect, useState } from 'react'\n\nimport { Box, BoxProps, TextView } from './index'\nimport { VABorderColors } from 'styles/theme'\nimport { triggerHaptic } from 'utils/haptics'\nimport { useAutoScrollToElement, useTheme } from 'utils/hooks'\n\nexport type AlertBoxProps = {\n  /** color of the border */\n  border: keyof VABorderColors\n  /** Optional boolean for determining when to focus on error alert boxes (e.g. onSaveClicked). */\n  focusOnError?: boolean\n  /** Optional ref for the parent scroll view. Used for scrolling to error alert boxes. */\n  scrollViewRef?: RefObject<ScrollView>\n  /** body of the alert */\n  text?: string\n  /** optional bolded title text */\n  title?: string\n  /** optional accessibility label for the text */\n  textA11yLabel?: string\n  /** optional accessibility label for the title */\n  titleA11yLabel?: string\n  /** optional accessibility role for the title */\n  titleRole?: AccessibilityRole\n}\n\n/**\n * Displays content in a box styled as an alert\n */\nconst AlertBox: FC<AlertBoxProps> = ({ border, children, focusOnError = true, scrollViewRef, title, text, textA11yLabel, titleA11yLabel, titleRole }) => {\n  const theme = useTheme()\n  const [scrollRef, viewRef, scrollToAlert] = useAutoScrollToElement()\n  const [shouldFocus, setShouldFocus] = useState(true)\n\n  const boxPadding = 20\n\n  useEffect(() => {\n    if (border === 'error' && scrollViewRef?.current && (title || text)) {\n      scrollRef.current = scrollViewRef.current\n      scrollToAlert(-boxPadding)\n    }\n    setShouldFocus(focusOnError)\n  }, [border, focusOnError, scrollRef, scrollToAlert, scrollViewRef, text, title])\n\n  const boxProps: BoxProps = {\n    backgroundColor: 'alertBox',\n    borderLeftWidth: theme.dimensions.alertBorderWidth,\n    borderLeftColor: border,\n    py: boxPadding,\n    px: boxPadding,\n  }\n\n  const vibrate = (): void => {\n    if (border === 'error') {\n      triggerHaptic('notificationError')\n    } else if (border === 'warning') {\n      triggerHaptic('notificationWarning')\n    }\n  }\n\n  const titleAccessibilityRole = titleRole ? titleRole : text || children ? 'header' : undefined\n\n  return (\n    <Box {...boxProps}>\n      {!!title && (\n        <View ref={viewRef} accessible={true} accessibilityLabel={titleA11yLabel || title} accessibilityRole={titleAccessibilityRole}>\n          <TextView variant=\"MobileBodyBold\" mb={text ? theme.dimensions.standardMarginBetween : 0}>\n            {title}\n          </TextView>\n        </View>\n      )}\n      {!!text && (\n        <View ref={!title ? viewRef : undefined} accessible={true} accessibilityLabel={textA11yLabel || text}>\n          <TextView variant=\"MobileBody\">{text}</TextView>\n        </View>\n      )}\n      {children}\n      {shouldFocus && vibrate()}\n    </Box>\n  )\n}\n\nexport default AlertBox\n"}}]);