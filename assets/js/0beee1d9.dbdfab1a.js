"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3767],{38909:function(e,t,n){n.d(t,{Z:function(){return m}});var s=n(67294),i=n(19055),o=n(26396),a=n(58215),r=n(82224),l=n(36005),c=function(e){var t=e.props;return t?s.createElement(s.Fragment,null,l.ZP.isEmpty(t)?s.createElement("pre",{className:"preText"},"This component does not have props defined"):s.createElement("table",null,s.createElement("thead",null,s.createElement("tr",null,s.createElement("th",null,"Name"),s.createElement("th",null,"Type"),s.createElement("th",null,"Default Value"),s.createElement("th",null,"Required"),s.createElement("th",null,"Description"))),s.createElement("tbody",null,Object.keys(t).map((function(e){var n;return s.createElement("tr",{key:e},s.createElement("td",null,s.createElement("code",null,e)),s.createElement("td",{style:{minWidth:200}},null==(n=t[e].type)?void 0:n.name),s.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),s.createElement("td",null,t[e].required?"Yes":"No"),s.createElement("td",null,t[e].description))}))))):null};function m(e){var t=(0,r.N)(e.componentName)[0],n=t.description,l=t.displayName,m=t.props,p="How to use the "+l+" component",d="Full code for the "+l+" component";return s.createElement(s.Fragment,null,n,s.createElement("br",null),s.createElement("br",null),s.createElement(o.Z,null,s.createElement(a.Z,{value:"props",label:"Properties"},s.createElement(c,{props:m})),s.createElement(a.Z,{value:"example",label:"Example"},e.example&&s.createElement(i.Z,{title:p,className:"language-tsx test"},e.example)),s.createElement(a.Z,{value:"code",label:"Source Code"},e.codeString&&s.createElement(i.Z,{title:d,className:"language-tsx"},e.codeString)),s.createElement(a.Z,{value:"accessibility",label:"Accessibility"},s.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},77895:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return g},exampleString:function(){return d},frontMatter:function(){return l},metadata:function(){return m},toc:function(){return p}});var s=n(87462),i=n(63366),o=(n(67294),n(3905)),a=(n(19055),n(38909)),r=["components"],l={},c=void 0,m={unversionedId:"Engineering/FrontEnd/ComponentsSection/List/MessageList",id:"Engineering/FrontEnd/ComponentsSection/List/MessageList",title:"MessageList",description:"",source:"@site/docs/Engineering/FrontEnd/ComponentsSection/List/MessageList.mdx",sourceDirName:"Engineering/FrontEnd/ComponentsSection/List",slug:"/Engineering/FrontEnd/ComponentsSection/List/MessageList",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/List/MessageList",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DefaultList",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/List/DefaultList"},next:{title:"SelectionList",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/List/SelectionList"}},p=[],d="<MessageList items={getMessagesListItems()} title={folderName} />",u={toc:p,exampleString:d};function g(e){var t=e.components,n=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(a.Z,{componentName:"MessageList",example:d,codeString:"import { useTranslation } from 'react-i18next'\nimport React, { FC } from 'react'\n\nimport { ButtonDecoratorType } from 'components'\nimport { InlineTextWithIcons } from './InlineTextWithIcons'\nimport { InlineTextWithIconsProps, List, ListItemObj, ListProps } from './index'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { READ } from '../constants/secureMessaging'\nimport { generateTestIDForInlineTextIconList } from 'utils/common'\nimport Box from './Box'\nimport LabelTag, { LabelTagTypeConstants } from './LabelTag'\n\n/**\n * Signifies each item in the list of items in {@link MessageListProps}\n */\nexport type MessageListItemObj = {\n  /** lines of text to display */\n  inlineTextWithIcons: Array<InlineTextWithIconsProps>\n  /** Tells if one is displaying sent folder messages list - needed for READ tag display conditional */\n  isSentFolder: boolean\n  /** Attribute for whether recipient has read user's sent message (Sent folder) OR whether user has read received message (Inbox || Folders other than 'Sent')\n   * Usage depends on which folder you're in */\n  readReceipt?: string\n} & Partial<ListItemObj>\n\n/**\n * Props for {@link MessageList}\n */\nexport type MessageListProps = {\n  /** list of items of which a button will be rendered per item */\n  items: Array<MessageListItemObj>\n} & Partial<ListProps>\n\n/**\n * Display a list of buttons with text and optional actions\n */\nconst MessageList: FC<MessageListProps> = ({ items, title, titleA11yLabel }) => {\n  const { t } = useTranslation(NAMESPACE.HEALTH)\n  const listItemObjs: Array<ListItemObj> = items.map((item) => {\n    // Move all of the properties except text lines to the standard list item object\n    const { inlineTextWithIcons, testId, ...listItemObj } = item\n    let testIdToUse = testId ? testId : generateTestIDForInlineTextIconList(inlineTextWithIcons, t)\n\n    // We want to display black 'Read' tag only for sent messages that have been seen by the recipients\n    const isSentReadTag = item.isSentFolder && item.readReceipt === READ\n    const sentReadTagA11y = isSentReadTag ? t('secureMessaging.folders.sent.read.a11y') : ''\n\n    const content = (\n      // Package individual textLineWithIcon components together into one message\n      <Box flex={1}>\n        <Box flexDirection=\"column\" mb={7}>\n          {inlineTextWithIcons?.map((textObj: InlineTextWithIconsProps, index: number) => {\n            return <InlineTextWithIcons key={index} {...textObj} />\n          })}\n          {isSentReadTag && (\n            <Box ml={23} mt={7}>\n              <LabelTag text={t('secureMessaging.folders.read.tag')} labelType={LabelTagTypeConstants.tagInactive} />\n            </Box>\n          )}\n        </Box>\n      </Box>\n    )\n\n    // Append accessibility label for Sent messages 'READ' tag\n    testIdToUse = `${testIdToUse} ${sentReadTagA11y}`.trim()\n\n    return { ...listItemObj, content, testId: testIdToUse, decorator: ButtonDecoratorType.None }\n  })\n\n  return <List items={listItemObjs} title={title} titleA11yLabel={titleA11yLabel} />\n}\n\nexport default MessageList\n",mdxType:"ComponentTopInfo"}))}g.isMDXComponent=!0}}]);