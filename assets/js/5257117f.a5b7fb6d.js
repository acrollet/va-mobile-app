"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6062],{38909:function(e,t,n){n.d(t,{Z:function(){return u}});var o=n(67294),a=n(19055),r=n(26396),i=n(58215),c=n(82224),l=n(36005),s=function(e){var t=e.props;return t?o.createElement(o.Fragment,null,l.ZP.isEmpty(t)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(t).map((function(e){var n;return o.createElement("tr",{key:e},o.createElement("td",null,o.createElement("code",null,e)),o.createElement("td",{style:{minWidth:200}},null==(n=t[e].type)?void 0:n.name),o.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),o.createElement("td",null,t[e].required?"Yes":"No"),o.createElement("td",null,t[e].description))}))))):null};function u(e){var t=(0,c.N)(e.componentName)[0],n=t.description,l=t.displayName,u=t.props,m="How to use the "+l+" component",p="Full code for the "+l+" component";return o.createElement(o.Fragment,null,n,o.createElement("br",null),o.createElement("br",null),o.createElement(r.Z,null,o.createElement(i.Z,{value:"props",label:"Properties"},o.createElement(s,{props:u})),o.createElement(i.Z,{value:"example",label:"Example"},e.example&&o.createElement(a.Z,{title:m,className:"language-tsx test"},e.example)),o.createElement(i.Z,{value:"code",label:"Source Code"},e.codeString&&o.createElement(a.Z,{title:p,className:"language-tsx"},e.codeString)),o.createElement(i.Z,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},634:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return f},exampleString:function(){return p},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return m}});var o=n(87462),a=n(63366),r=(n(67294),n(3905)),i=(n(19055),n(38909)),c=["components"],l={},s=void 0,u={unversionedId:"Engineering/FrontEnd/ComponentsSection/Buttons and Links/BackButton",id:"Engineering/FrontEnd/ComponentsSection/Buttons and Links/BackButton",title:"BackButton",description:"export const exampleString = `<BackButton",source:"@site/docs/Engineering/FrontEnd/ComponentsSection/Buttons and Links/BackButton.mdx",sourceDirName:"Engineering/FrontEnd/ComponentsSection/Buttons and Links",slug:"/Engineering/FrontEnd/ComponentsSection/Buttons and Links/BackButton",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/Buttons and Links/BackButton",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AttachmentLink",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/Buttons and Links/AttachmentLink"},next:{title:"ClickForActionLink",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/Buttons and Links/ClickForActionLink"}},m=[],p="<BackButton \nonPress={() => {}} \nlabel={'BackButtonLabelConstants.back'} \ncanGoBack={true} \nshowCarat={true} \na11yHint={'a11yHint'}/>",d={toc:m,exampleString:p};function f(e){var t=e.components,n=(0,a.Z)(e,c);return(0,r.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(i.Z,{componentName:"BackButton",example:p,codeString:"import { TouchableWithoutFeedback } from 'react-native'\nimport { useFocusEffect } from '@react-navigation/native'\nimport { useTranslation } from 'react-i18next'\nimport React, { FC } from 'react'\n\nimport { BackButtonLabel } from 'constants/backButtonLabels'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { a11yHintProp, testIdProps } from 'utils/accessibility'\nimport { useAccessibilityFocus, useTheme } from 'utils/hooks'\nimport Box from './Box'\nimport TextView from './TextView'\nimport VAIcon from './VAIcon'\n\n/**\n *  Signifies the props that need to be passed in to {@link BackButton}\n */\nexport type BackButtonProps = {\n  /** the onPress function for the back button */\n  onPress: (() => void) | undefined\n  /** a boolean indicating if the user has a screen to go back to; if false, the back button will be hidden */\n  canGoBack: boolean | undefined\n  /** translation key to use for the display text, as well as the testID for the component */\n  label: BackButtonLabel\n  /** whether to show the carat left of the text */\n  showCarat?: boolean | true\n  /** optional param to add accessibility hint to back button */\n  a11yHint?: string\n  /** boolean to specify if we want accesibility to focus on the back button */\n  focusOnButton?: boolean\n}\n\n/**\n * Button used by the stack navigation to go back to the previous screen\n */\nexport const BackButton: FC<BackButtonProps> = ({ onPress, canGoBack, label, showCarat, a11yHint, focusOnButton = true }) => {\n  const { t } = useTranslation(NAMESPACE.COMMON)\n  const theme = useTheme()\n\n  const [focusRef, setFocus] = useAccessibilityFocus<TouchableWithoutFeedback>()\n\n  useFocusEffect(focusOnButton ? setFocus : () => {})\n\n  if (!canGoBack) {\n    return null\n  }\n\n  const chevron = showCarat ? <VAIcon mt={1} name={'ArrowLeft'} fill=\"backButton\" /> : <></>\n\n  const a11yHintPropParam = a11yHint ? a11yHint : t(`${label}.a11yHint`)\n\n  return (\n    <TouchableWithoutFeedback ref={focusRef} onPress={onPress} {...testIdProps(label)} {...a11yHintProp(a11yHintPropParam)} accessibilityRole=\"button\" accessible={true}>\n      <Box display=\"flex\" flexDirection=\"row\" ml={theme.dimensions.headerButtonSpacing} height={theme.dimensions.headerHeight} alignItems={'center'}>\n        {chevron}\n        <TextView variant=\"ActionBar\" ml={theme.dimensions.textIconMargin} allowFontScaling={false} accessible={false}>\n          {t(label)}\n        </TextView>\n      </Box>\n    </TouchableWithoutFeedback>\n  )\n}\n\nexport default BackButton\n",mdxType:"ComponentTopInfo"}))}f.isMDXComponent=!0}}]);