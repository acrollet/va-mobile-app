"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4295],{1035:function(n,e,o){o.r(e),o.d(e,{contentTitle:function(){return u},default:function(){return d},exampleString:function(){return m},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return p}});var t=o(7462),r=o(3366),a=(o(7294),o(3905)),s=(o(9055),o(8909)),i=["components"],c={},u=void 0,l={unversionedId:"Engineering/FrontEnd/ComponentsSection/CarouselComponents/Carousel",id:"Engineering/FrontEnd/ComponentsSection/CarouselComponents/Carousel",isDocsHomePage:!1,title:"Carousel",description:"",source:"@site/docs/Engineering/FrontEnd/ComponentsSection/CarouselComponents/Carousel.mdx",sourceDirName:"Engineering/FrontEnd/ComponentsSection/CarouselComponents",slug:"/Engineering/FrontEnd/ComponentsSection/CarouselComponents/Carousel",permalink:"/docs/Engineering/FrontEnd/ComponentsSection/CarouselComponents/Carousel",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/docs/Engineering/API/Intro"},next:{title:"CarouselTabBar",permalink:"/docs/Engineering/FrontEnd/ComponentsSection/CarouselComponents/CarouselTabBar"}},p=[],m="<Carousel screenList={screenList} onCarouselEnd={onCarouselEnd} translation={t} />",C={toc:p,exampleString:m};function d(n){var e=n.components,o=(0,r.Z)(n,i);return(0,a.kt)("wrapper",(0,t.Z)({},C,o,{components:e,mdxType:"MDXLayout"}),(0,a.kt)(s.Z,{componentName:"Carousel",example:m,codeString:"import React, { FC, ReactElement } from 'react'\n\nimport { CardStyleInterpolators, createStackNavigator } from '@react-navigation/stack'\nimport { TFunction } from 'i18next'\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs'\nimport _ from 'underscore'\n\nimport CarouselTabBar from './CarouselTabBar'\n\nconst CarouselTabNav = createBottomTabNavigator()\nconst CarouselStack = createStackNavigator()\n\nexport type CarouselScreen = {\n  /** name of component */\n  name: string\n\n  /** component to display in carousel */\n  component: FC<Record<string, unknown>>\n\n  /** optional accessibility hints for the skip button, continue button, and carousel indicators progress bar */\n  a11yHints?: {\n    skipHint?: string\n    carouselIndicatorsHint?: string\n    continueHint?: string\n    doneHint?: string\n    backHint?: string\n  }\n}\n\ntype CarouselStackComponentProps = {\n  /** list of screens with the screen name and the component in each item */\n  screenList: Array<CarouselScreen>\n}\n\nconst CarouselStackComponent: FC<CarouselStackComponentProps> = ({ screenList }) => {\n  return (\n    <CarouselStack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyleInterpolator: CardStyleInterpolators.forHorizontalIOS,\n        detachPreviousScreen: false,\n      }}>\n      {_.map(screenList, (screen, index) => {\n        return <CarouselStack.Screen name={screen.name as never} component={screen.component} key={index} />\n      })}\n    </CarouselStack.Navigator>\n  )\n}\n\ntype CarouselProps = {\n  /** list of screens with the screen name and the component in each item */\n  screenList: Array<CarouselScreen>\n\n  /** called when the skip button is clicked or the user has gone through all the carousel components */\n  onCarouselEnd: () => void\n\n  /** useTranslations t function to translate the labels */\n  translation: TFunction\n}\n\n/**A common component to set up a carousel of screens and display a carousel tab at the bottom of the screen, which displays a skip button, continue button, and a progress bar*/\nconst Carousel: FC<CarouselProps> = ({ screenList, onCarouselEnd, translation }) => {\n  return (\n    <CarouselTabNav.Navigator tabBar={(props): React.ReactNode => <CarouselTabBar {...props} onCarouselEnd={onCarouselEnd} translation={translation} screenList={screenList} />}>\n      <CarouselTabNav.Screen name=\"Main\" children={(): ReactElement => <CarouselStackComponent screenList={screenList} />} options={{ headerShown: false }} />\n    </CarouselTabNav.Navigator>\n  )\n}\n\nexport default Carousel\n",mdxType:"ComponentTopInfo"}))}d.isMDXComponent=!0}}]);