"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2452],{9757:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return g},exampleString:function(){return m},frontMatter:function(){return a},metadata:function(){return d},toc:function(){return p}});var o=t(7462),i=t(3366),s=(t(7294),t(3905)),r=(t(9055),t(8909)),l=["components"],a={},c=void 0,d={unversionedId:"FrontEnd/ComponentsSection/SegmentedControl",id:"FrontEnd/ComponentsSection/SegmentedControl",isDocsHomePage:!1,title:"SegmentedControl",description:"export const exampleString = `<SegmentedControl",source:"@site/docs/FrontEnd/ComponentsSection/SegmentedControl.mdx",sourceDirName:"FrontEnd/ComponentsSection",slug:"/FrontEnd/ComponentsSection/SegmentedControl",permalink:"/va-mobile-app/index.html/docs/FrontEnd/ComponentsSection/SegmentedControl",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SaveButton",permalink:"/va-mobile-app/index.html/docs/FrontEnd/ComponentsSection/SaveButton"},next:{title:"SignoutButton",permalink:"/va-mobile-app/index.html/docs/FrontEnd/ComponentsSection/SignoutButton"}},p=[],m="<SegmentedControl \nvalues={[1, 2, 3, 4] \ntitles={['One', 'Two', 'Three', 'Four'] \nonChange={doSomething(selection: string)} />\n\n<SegmentedControl \nvalues={['a', 'b'] \ntitles={['Alpha', 'Bravo'] \nonChange={doSomething(selection: string)} \nselected={1} />",u={toc:p,exampleString:m};function g(e){var n=e.components,t=(0,i.Z)(e,l);return(0,s.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)(r.Z,{componentName:"SegmentedControl",example:m,codeString:"import React, { FC, useEffect } from 'react'\nimport styled from 'styled-components'\n\nimport { NAMESPACE } from '../constants/namespaces'\nimport { TouchableOpacity } from 'react-native'\nimport { a11yHintProp, a11yValueProp, testIdProps } from 'utils/accessibility'\nimport { themeFn } from '../utils/theme'\nimport { useTranslation } from '../utils/hooks'\nimport Box, { BoxProps } from './Box'\nimport TextView from './TextView'\n\n/**\n * Signifies the props to send into the {@link SegmentedControl}\n */\nexport type ToggleButtonProps = {\n  /** function to call when the selected value has changed */\n  onChange: (selection: string) => void\n  /** The values to signify selection options */\n  values: string[]\n  /** the text to display in the selection option UI */\n  titles: string[]\n  /** the index of the currently selected item. used to set initial state  */\n  selected: number\n  /** optional list of accessibility hints, ordering dependent on values/titles ordering */\n  accessibilityHints?: string[]\n}\n\ntype ButtonContainerProps = {\n  /** lets the component know if it is selected */\n  isSelected: boolean\n  /** width percent of parent for the component */\n  widthPct: string\n}\n\nconst ButtonContainer = styled(TouchableOpacity)<ButtonContainerProps>`\n  border-radius: 8px;\n  padding-vertical: 7px;\n  width: ${themeFn<ButtonContainerProps>((theme, props) => props.widthPct)};\n  shadow-opacity: ${themeFn<ButtonContainerProps>((theme, props) => (props.isSelected ? 0.4 : 0))};\n  shadow-radius: 1px;\n  shadow-offset: 0px 2px;\n  shadow-color: ${themeFn<ButtonContainerProps>((theme) => theme.colors.background.shadow)};\n  elevation: ${themeFn<ButtonContainerProps>((theme, props) => (props.isSelected ? 4 : 0))};\n  background-color: ${themeFn<ButtonContainerProps>((theme, props) =>\n    props.isSelected ? theme.colors.segmentedControl.buttonActive : theme.colors.segmentedControl.buttonInactive,\n  )};\n`\n/**A common component for filtering UI views by segments or lanes. Used for things like toggling between Active/Completed claims and Future/Past Appointments */\nconst SegmentedControl: FC<ToggleButtonProps> = ({ values, titles, onChange, selected, accessibilityHints }) => {\n  const t = useTranslation(NAMESPACE.COMMON)\n\n  useEffect(() => {\n    onChange(values[selected])\n  }, [selected, onChange, values])\n\n  const boxProps: BoxProps = {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    backgroundColor: 'segmentedController',\n    p: 2,\n    borderRadius: 8,\n    alignSelf: 'baseline',\n    flexWrap: 'wrap',\n    accessibilityRole: 'tablist',\n  }\n\n  return (\n    <Box {...boxProps}>\n      {values.map((value, index) => {\n        return (\n          <ButtonContainer\n            onPress={(): void => onChange(values[index])}\n            isSelected={selected === index}\n            key={index}\n            widthPct={`${100 / values.length}%`}\n            {...testIdProps(value)}\n            {...a11yHintProp(accessibilityHints ? accessibilityHints[index] : '')}\n            {...a11yValueProp({ text: t('listPosition', { position: index + 1, total: values.length }) })}\n            accessibilityRole={'tab'}\n            accessibilityState={{ selected: selected === index }}>\n            <TextView variant={selected === index ? 'MobileBodyBold' : 'MobileBody'} textAlign=\"center\" color=\"secondary\" allowFontScaling={false}>\n              {titles[index]}\n            </TextView>\n          </ButtonContainer>\n        )\n      })}\n    </Box>\n  )\n}\n\nexport default SegmentedControl\n",mdxType:"ComponentTopInfo"}))}g.isMDXComponent=!0}}]);