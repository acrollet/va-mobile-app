"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5611],{113:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return l},default:function(){return b},exampleString:function(){return u},frontMatter:function(){return c},metadata:function(){return m},toc:function(){return p}});var o=t(7462),a=t(3366),i=(t(7294),t(3905)),r=(t(9055),t(8909)),s=["components"],c={},l=void 0,m={unversionedId:"FrontEnd/ComponentsSection/NavigationTabBar",id:"FrontEnd/ComponentsSection/NavigationTabBar",isDocsHomePage:!1,title:"NavigationTabBar",description:"export const exampleString = `",source:"@site/docs/FrontEnd/ComponentsSection/NavigationTabBar.mdx",sourceDirName:"FrontEnd/ComponentsSection",slug:"/FrontEnd/ComponentsSection/NavigationTabBar",permalink:"/va-mobile-app/index.html/docs/FrontEnd/ComponentsSection/NavigationTabBar",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MessagesSentReadTag",permalink:"/va-mobile-app/index.html/docs/FrontEnd/ComponentsSection/MessagesSentReadTag"},next:{title:"NotificationManger",permalink:"/va-mobile-app/index.html/docs/FrontEnd/ComponentsSection/NotificationManger"}},p=[],u='<>\n  <TabNav.Navigator \n  tabBar={(props): \n  React.ReactNode => <NavigationTabBar {...props} translation={t} />} \n  initialRouteName="HomeTab" \n  screenOptions={{ headerShown: false }}>\n        <TabNav.Screen name="HomeTab" component={HomeScreen} options={{ title: t(\'home:title\') }} />\n        <TabNav.Screen name="ClaimsTab" component={ClaimsScreen} options={{ title: t(\'claims:title\') }} />\n        <TabNav.Screen name="HealthTab" component={HealthScreen} options={{ title: t(\'health:title\') }} />\n        <TabNav.Screen name="ProfileTab" component={ProfileScreen} options={{ title: t(\'profile:title\') }} />\n  </TabNav.Navigator>\n</>',d={toc:p,exampleString:u};function b(e){var n=e.components,t=(0,a.Z)(e,s);return(0,i.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(r.Z,{componentName:"NavigationTabBar",example:u,codeString:"import { AccessibilityRole, AccessibilityState, Text, TouchableWithoutFeedback } from 'react-native'\nimport { BottomTabNavigationEventMap } from '@react-navigation/bottom-tabs/src/types'\nimport { NavigationHelpers, ParamListBase, TabNavigationState } from '@react-navigation/native'\nimport { SafeAreaView } from 'react-native-safe-area-context'\nimport { TFunction } from 'i18next'\nimport React, { FC } from 'react'\nimport styled from 'styled-components'\n\nimport { NAMESPACE } from 'constants/namespaces'\nimport { VA_ICON_MAP } from './VAIcon'\nimport { a11yValueProp, testIdProps } from 'utils/accessibility'\nimport { themeFn } from 'utils/theme'\nimport { useTheme, useTranslation } from 'utils/hooks'\nimport Box from './Box'\nimport VAIcon from './VAIcon'\n\ntype StyledLabelProps = {\n  isFocused: boolean\n}\n\nconst StyledLabel = styled(Text)<StyledLabelProps>`\n\tcolor: ${themeFn<StyledLabelProps>((theme, props) => (props.isFocused ? theme.colors.icon.active : theme.colors.icon.inactive))}\n\talign-self: center;\n\tmargin-top: 24px;\n\tfont-size: 12px;\n\tletter-spacing: -0.2px;\n`\n\ntype TabBarRoute = {\n  key: string\n  name: string\n}\n\n/**\n *  Signifies the props that need to be passed in to {@link NavigationTabBar}\n */\nexport type NavigationTabBarProps = {\n  /** the tab navigators current state */\n  state: TabNavigationState<ParamListBase>\n\n  /** the tab navigators navigation helpers */\n  navigation: NavigationHelpers<ParamListBase, BottomTabNavigationEventMap>\n\n  /** useTranslations t function to translate the labels */\n  translation: TFunction\n}\n\nconst StyledSafeAreaView = styled(SafeAreaView)`\n  background-color: ${themeFn((theme) => theme.colors.background.navButton)};\n`\n/**Component for the bottom tab navigation*/\nconst NavigationTabBar: FC<NavigationTabBarProps> = ({ state, navigation, translation }) => {\n  const theme = useTheme()\n  const t = useTranslation(NAMESPACE.COMMON)\n\n  const onPress = (route: TabBarRoute, isFocused: boolean): void => {\n    const event = navigation.emit({\n      type: 'tabPress',\n      target: route.key,\n      canPreventDefault: true,\n    })\n\n    if (!isFocused && !event.defaultPrevented) {\n      navigation.navigate(route.name)\n    }\n  }\n\n  const onLongPress = (route: TabBarRoute): void => {\n    navigation.emit({\n      type: 'tabLongPress',\n      target: route.key,\n    })\n  }\n\n  const tabBarIcon = (routeName: string, focused: boolean): React.ReactNode => {\n    switch (routeName) {\n      case 'Health':\n      case 'Claims':\n      case 'Profile':\n      case 'Home':\n        const iconProps = {\n          id: `${routeName.toLowerCase()}${focused ? 'Selected' : 'Unselected'}`,\n          name: `${routeName}${focused ? 'Selected' : 'Unselected'}` as keyof typeof VA_ICON_MAP,\n        }\n        return <VAIcon {...iconProps} />\n      default:\n        return ''\n    }\n  }\n\n  return (\n    <StyledSafeAreaView edges={['bottom']}>\n      <Box\n        flexDirection=\"row\"\n        backgroundColor={'navButton'}\n        height={theme.dimensions.navBarHeight}\n        borderTopColor=\"primary\"\n        borderTopWidth={theme.dimensions.borderWidth}\n        accessibilityRole=\"toolbar\">\n        {state.routes.map((route: TabBarRoute, index: number) => {\n          const isFocused = state.index === index\n          const routeName = route.name.replace('Tab', '')\n          const translatedName = translation(`${routeName.toLowerCase()}:title`)\n\n          type TouchableProps = {\n            key: string\n            onPress: () => void\n            onLongPress: () => void\n            accessibilityRole: AccessibilityRole\n            accessibilityState: AccessibilityState\n            accessible: boolean\n          }\n\n          const props: TouchableProps = {\n            key: route.name,\n            onPress: (): void => onPress(route as TabBarRoute, isFocused),\n            onLongPress: (): void => onLongPress(route as TabBarRoute),\n            accessibilityRole: 'tab',\n            accessibilityState: isFocused ? { selected: true } : { selected: false },\n            accessible: true,\n          }\n\n          return (\n            <TouchableWithoutFeedback\n              {...testIdProps(translatedName)}\n              {...props}\n              {...a11yValueProp({ text: t('listPosition', { position: index + 1, total: state.routes.length }) })}>\n              <Box flex={1} display=\"flex\" flexDirection=\"column\" mt={theme.dimensions.navigationBarIconMarginTop}>\n                <Box alignSelf=\"center\" position=\"absolute\" mt={theme.dimensions.buttonBorderWidth}>\n                  {tabBarIcon(routeName, isFocused)}\n                </Box>\n                <StyledLabel allowFontScaling={false} isFocused={isFocused}>\n                  {translatedName}\n                </StyledLabel>\n              </Box>\n            </TouchableWithoutFeedback>\n          )\n        })}\n      </Box>\n    </StyledSafeAreaView>\n  )\n}\n\nexport default NavigationTabBar\n",mdxType:"ComponentTopInfo"}))}b.isMDXComponent=!0}}]);