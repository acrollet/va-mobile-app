"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2030],{32666:(e,t,r)=>{r.d(t,{Z:()=>m});var n=r(67294),s=r(97405),a=r(22808),o=r(30433),l=r(41284),i=r(36005);const c=e=>{let{props:t}=e;return t?n.createElement(n.Fragment,null,i.ZP.isEmpty(t)?n.createElement("pre",{className:"preText"},"This component does not have props defined"):n.createElement("table",null,n.createElement("thead",null,n.createElement("tr",null,n.createElement("th",null,"Name"),n.createElement("th",null,"Type"),n.createElement("th",null,"Default Value"),n.createElement("th",null,"Required"),n.createElement("th",null,"Description"))),n.createElement("tbody",null,Object.keys(t).map((e=>n.createElement("tr",{key:e},n.createElement("td",null,n.createElement("code",null,e)),n.createElement("td",{style:{minWidth:200}},t[e].type?.name),n.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),n.createElement("td",null,t[e].required?"Yes":"No"),n.createElement("td",null,t[e].description))))))):null};function m(e){const t=(0,l.N)(e.componentName),{description:r,displayName:i,props:m}=t[0],p=`How to use the ${i} component`,d=`Full code for the ${i} component`;return n.createElement(n.Fragment,null,r,n.createElement("br",null),n.createElement("br",null),n.createElement(a.Z,null,n.createElement(o.Z,{value:"props",label:"Properties"},n.createElement(c,{props:m})),n.createElement(o.Z,{value:"example",label:"Example"},e.example&&n.createElement(s.Z,{title:p,className:"language-tsx test"},e.example)),n.createElement(o.Z,{value:"code",label:"Source Code"},e.codeString&&n.createElement(s.Z,{title:d,className:"language-tsx"},e.codeString)),n.createElement(o.Z,{value:"accessibility",label:"Accessibility"},n.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},41284:(e,t,r)=>{r.d(t,{N:()=>s});var n=r(52426);const s=e=>(0,n.ZP)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},91276:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>m,contentTitle:()=>i,default:()=>f,exampleString:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var n=r(87462),s=(r(67294),r(3905));r(8209),r(97405);const a="import { Button } from '@department-of-veterans-affairs/mobile-component-library'\nimport { ScrollView } from 'react-native'\nimport { useTranslation } from 'react-i18next'\nimport React, { FC, RefObject } from 'react'\n\nimport { AlertBox, Box, TextView, VABulletList } from 'components'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { RootState } from 'store'\nimport { SecureMessagingState, resetReplyTriageError, resetSendMessageFailed } from 'store/slices'\nimport { SegmentedControlIndexes } from 'constants/secureMessaging'\nimport { updateSecureMessagingTab } from 'store/slices'\nimport { useAppDispatch, useRouteNavigation, useTheme } from 'utils/hooks'\nimport { useSelector } from 'react-redux'\n\nexport type MessageAlertProps = {\n  /** Optional boolean for determining when to focus on error alert boxes. */\n  focusOnError?: boolean\n  /**sets if there is validation errors */\n  hasValidationError?: boolean\n  /**sets if attempted to save a draft */\n  saveDraftAttempted?: boolean\n  /** optional ref for parent scroll view */\n  scrollViewRef?: RefObject<ScrollView>\n  /** optional list of alertbox failed reasons, supplied by FormWrapper component */\n  errorList?: { [key: number]: string }\n}\n\n/**Common component to show a message alert when saving or sending a secure message */\nconst MessageAlert: FC<MessageAlertProps> = ({ hasValidationError, saveDraftAttempted, scrollViewRef, focusOnError, errorList }) => {\n  const theme = useTheme()\n  const { t } = useTranslation(NAMESPACE.COMMON)\n  const { replyTriageError } = useSelector<RootState, SecureMessagingState>((state) => state.secureMessaging)\n  const dispatch = useAppDispatch()\n  const navigateTo = useRouteNavigation()\n\n  const onGoToInbox = (): void => {\n    dispatch(resetSendMessageFailed())\n    dispatch(updateSecureMessagingTab(SegmentedControlIndexes.INBOX))\n    dispatch(resetReplyTriageError())\n    navigateTo('SecureMessaging')\n  }\n\n  const bulletedListOfText = []\n  if (errorList) {\n    for (const key in errorList) {\n      if (errorList[key] !== '') {\n        bulletedListOfText.push(`${errorList[key]}`)\n      }\n    }\n  }\n\n  const text = saveDraftAttempted ? t('secureMessaging.formMessage.saveDraft.validation.text') : t('secureMessaging.formMessage.sendMessage.validation.text')\n\n  return hasValidationError ? (\n    <Box mb={theme.dimensions.standardMarginBetween}>\n      <AlertBox border={'error'} title={t('secureMessaging.formMessage.weNeedMoreInfo')} text={text} titleRole={'header'} scrollViewRef={scrollViewRef} focusOnError={focusOnError}>\n        <VABulletList listOfText={bulletedListOfText} />\n      </AlertBox>\n    </Box>\n  ) : replyTriageError ? (\n    <Box mb={theme.dimensions.standardMarginBetween}>\n      <AlertBox border={'error'} title={t('secureMessaging.sendError.title')} titleRole={'header'} scrollViewRef={scrollViewRef} focusOnError={focusOnError}>\n        <TextView variant=\"MobileBody\" my={theme.dimensions.standardMarginBetween}>\n          {t('secureMessaging.reply.error.youCantSend')}\n        </TextView>\n        <TextView variant=\"MobileBody\" paragraphSpacing={true} accessibilityLabel={t('secureMessaging.reply.error.ifYouThinkA11y')}>\n          {t('secureMessaging.reply.error.ifYouThink')}\n        </TextView>\n        <Button label={t('secureMessaging.goToInbox')} onPress={onGoToInbox} />\n      </AlertBox>\n    </Box>\n  ) : (\n    <></>\n  )\n}\nexport default MessageAlert\n";var o=r(32666);const l={},i=void 0,c={unversionedId:"Flagship design library/Components/Alerts and Progress/MessageAlert",id:"Flagship design library/Components/Alerts and Progress/MessageAlert",title:"MessageAlert",description:"",source:"@site/docs/Flagship design library/Components/Alerts and Progress/MessageAlert.mdx",sourceDirName:"Flagship design library/Components/Alerts and Progress",slug:"/Flagship design library/Components/Alerts and Progress/MessageAlert",permalink:"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/MessageAlert",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Loading indicator",permalink:"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/LoadingComponent"},next:{title:"Snackbar",permalink:"/va-mobile-app/docs/Flagship design library/Components/Alerts and Progress/Snackbar"}},m={},p=[],d="<MessageAlert\nhasValidationError={formContainsError}\nsaveDraftAttempted={onSaveDraftClicked}\nsavingDraft={savingDraft}\n/>",u={toc:p,exampleString:d},g="wrapper";function f(e){let{components:t,...r}=e;return(0,s.kt)(g,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)(o.Z,{componentName:"MessageAlert",example:d,codeString:a,mdxType:"ComponentTopInfo"}))}f.isMDXComponent=!0}}]);