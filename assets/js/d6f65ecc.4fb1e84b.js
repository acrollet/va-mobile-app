"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3752],{38909:function(e,t,n){n.d(t,{Z:function(){return m}});var o=n(67294),i=n(19055),l=n(26396),r=n(58215),a=n(82224),s=n(36005),c=function(e){var t=e.props;return t?o.createElement(o.Fragment,null,s.ZP.isEmpty(t)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(t).map((function(e){var n;return o.createElement("tr",{key:e},o.createElement("td",null,o.createElement("code",null,e)),o.createElement("td",{style:{minWidth:200}},null==(n=t[e].type)?void 0:n.name),o.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),o.createElement("td",null,t[e].required?"Yes":"No"),o.createElement("td",null,t[e].description))}))))):null};function m(e){var t=(0,a.N)(e.componentName)[0],n=t.description,s=t.displayName,m=t.props,p="How to use the "+s+" component",u="Full code for the "+s+" component";return o.createElement(o.Fragment,null,n,o.createElement("br",null),o.createElement("br",null),o.createElement(l.Z,null,o.createElement(r.Z,{value:"props",label:"Properties"},o.createElement(c,{props:m})),o.createElement(r.Z,{value:"example",label:"Example"},e.example&&o.createElement(i.Z,{title:p,className:"language-tsx test"},e.example)),o.createElement(r.Z,{value:"code",label:"Source Code"},e.codeString&&o.createElement(i.Z,{title:u,className:"language-tsx"},e.codeString)),o.createElement(r.Z,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},82224:function(e,t,n){n.d(t,{N:function(){return i}});var o=n(28084),i=function(e){return(0,o.default)()["docusaurus-plugin-react-docgen-typescript"].default.filter((function(t){return t.displayName===e}))}},4549:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return g},exampleString:function(){return u},frontMatter:function(){return s},metadata:function(){return m},toc:function(){return p}});var o=n(87462),i=n(63366),l=(n(67294),n(3905)),r=(n(19055),n(38909)),a=["components"],s={},c=void 0,m={unversionedId:"UX/ComponentsSection/Navigation/SegmentedControl",id:"UX/ComponentsSection/Navigation/SegmentedControl",title:"SegmentedControl",description:"export const exampleString = `<SegmentedControl",source:"@site/docs/UX/ComponentsSection/Navigation/SegmentedControl.mdx",sourceDirName:"UX/ComponentsSection/Navigation",slug:"/UX/ComponentsSection/Navigation/SegmentedControl",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Navigation/SegmentedControl",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"PickerList",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Navigation/PickerList"},next:{title:"FormAttachments",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Selection and Input/FormAttachments"}},p=[],u="<SegmentedControl \nvalues={[1, 2, 3, 4] \ntitles={['One', 'Two', 'Three', 'Four'] \nonChange={doSomething(selection: string)} />\n\n<SegmentedControl \nvalues={['a', 'b'] \ntitles={['Alpha', 'Bravo'] \nonChange={doSomething(selection: string)} \nselected={1} />",d={toc:p,exampleString:u};function g(e){var t=e.components,n=(0,i.Z)(e,a);return(0,l.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(r.Z,{componentName:"SegmentedControl",example:u,codeString:"import { useTranslation } from 'react-i18next'\nimport React, { FC, useEffect } from 'react'\nimport styled from 'styled-components'\n\nimport { NAMESPACE } from '../constants/namespaces'\nimport { TouchableOpacity } from 'react-native'\nimport { a11yHintProp, a11yValueProp, testIdProps } from 'utils/accessibility'\nimport { themeFn } from '../utils/theme'\nimport Box, { BoxProps } from './Box'\nimport TextView from './TextView'\n\n/**\n * Signifies the props to send into the {@link SegmentedControl}\n */\nexport type ToggleButtonProps = {\n  /** function to call when the selected value has changed */\n  onChange: (selection: string) => void\n  /** The values to signify selection options */\n  values: string[]\n  /** the text to display in the selection option UI */\n  titles: string[]\n  /** the index of the currently selected item. used to set initial state  */\n  selected: number\n  /** optional list of accessibility hints, ordering dependent on values/titles ordering */\n  accessibilityHints?: string[]\n}\n\ntype ButtonContainerProps = {\n  /** lets the component know if it is selected */\n  isSelected: boolean\n  /** width percent of parent for the component */\n  widthPct: string\n}\n\nconst ButtonContainer = styled(TouchableOpacity)<ButtonContainerProps>`\n  border-radius: 8px;\n  padding-vertical: 7px;\n  width: ${themeFn<ButtonContainerProps>((theme, props) => props.widthPct)};\n  elevation: ${themeFn<ButtonContainerProps>((theme, props) => (props.isSelected ? 4 : 0))};\n  background-color: ${themeFn<ButtonContainerProps>((theme, props) =>\n    props.isSelected ? theme.colors.segmentedControl.buttonActive : theme.colors.segmentedControl.buttonInactive,\n  )};\n`\n/**A common component for filtering UI views by segments or lanes. Used for things like toggling between Active/Completed claims and Future/Past Appointments */\nconst SegmentedControl: FC<ToggleButtonProps> = ({ values, titles, onChange, selected, accessibilityHints }) => {\n  const { t } = useTranslation(NAMESPACE.COMMON)\n\n  useEffect(() => {\n    onChange(values[selected])\n  }, [selected, onChange, values])\n\n  const boxProps: BoxProps = {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    backgroundColor: 'segmentedController',\n    p: 2,\n    borderRadius: 8,\n    alignSelf: 'baseline',\n    flexWrap: 'wrap',\n    accessibilityRole: 'tablist',\n  }\n\n  return (\n    <Box {...boxProps}>\n      {values.map((value, index) => {\n        const isSelected = selected === index\n\n        return (\n          <ButtonContainer\n            onPress={(): void => onChange(values[index])}\n            isSelected={isSelected}\n            key={index}\n            widthPct={`${100 / values.length}%`}\n            {...testIdProps(value)}\n            {...a11yHintProp(accessibilityHints ? accessibilityHints[index] : '')}\n            {...a11yValueProp({ text: t('listPosition', { position: index + 1, total: values.length }) })}\n            accessibilityRole={'tab'}\n            accessibilityState={{ selected: selected === index }}>\n            <TextView\n              variant={selected === index ? 'MobileBodyBold' : 'MobileBody'}\n              textAlign=\"center\"\n              color={isSelected ? 'segmentControllerActive' : 'segmentControllerInactive'}\n              allowFontScaling={false}>\n              {titles[index]}\n            </TextView>\n          </ButtonContainer>\n        )\n      })}\n    </Box>\n  )\n}\n\nexport default SegmentedControl\n",mdxType:"ComponentTopInfo"}))}g.isMDXComponent=!0}}]);