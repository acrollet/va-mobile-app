"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8857],{38909:(e,t,n)=>{n.d(t,{Z:()=>d});var a=n(67294),o=n(19055),i=n(26396),r=n(58215),l=n(82224),s=n(36005);const c=e=>{let{props:t}=e;return t?a.createElement(a.Fragment,null,s.ZP.isEmpty(t)?a.createElement("pre",{className:"preText"},"This component does not have props defined"):a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Name"),a.createElement("th",null,"Type"),a.createElement("th",null,"Default Value"),a.createElement("th",null,"Required"),a.createElement("th",null,"Description"))),a.createElement("tbody",null,Object.keys(t).map((e=>a.createElement("tr",{key:e},a.createElement("td",null,a.createElement("code",null,e)),a.createElement("td",{style:{minWidth:200}},t[e].type?.name),a.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),a.createElement("td",null,t[e].required?"Yes":"No"),a.createElement("td",null,t[e].description))))))):null};function d(e){const t=(0,l.N)(e.componentName),{description:n,displayName:s,props:d}=t[0],m=`How to use the ${s} component`,p=`Full code for the ${s} component`;return a.createElement(a.Fragment,null,n,a.createElement("br",null),a.createElement("br",null),a.createElement(i.Z,null,a.createElement(r.Z,{value:"props",label:"Properties"},a.createElement(c,{props:d})),a.createElement(r.Z,{value:"example",label:"Example"},e.example&&a.createElement(o.Z,{title:m,className:"language-tsx test"},e.example)),a.createElement(r.Z,{value:"code",label:"Source Code"},e.codeString&&a.createElement(o.Z,{title:p,className:"language-tsx"},e.codeString)),a.createElement(r.Z,{value:"accessibility",label:"Accessibility"},a.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},82224:(e,t,n)=>{n.d(t,{N:()=>o});var a=n(28084);const o=e=>(0,a.default)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},69752:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>s,default:()=>h,exampleString:()=>m,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var a=n(87462),o=(n(67294),n(3905));n(95657),n(19055);const i="import { Button, Pressable } from 'react-native'\nimport { DateTime } from 'luxon'\nimport { TextView } from './index'\nimport { isIOS } from 'utils/platform'\nimport Box, { BoxProps } from './Box'\nimport RNDateTimePicker, { AndroidEvent, Event } from '@react-native-community/datetimepicker'\nimport React, { FC, useState } from 'react'\nimport theme from 'styles/themes/standardTheme'\n\n/**\n * Props type for the VADatePicker\n */\nexport type VADatePickerProps = {\n  /** What should the picker show if no value is selected? */\n  defaultString: string\n  /** function to run on date selected */\n  onChange: (date?: Date) => void\n}\n\n// TODO: need to style component: https://github.com/react-native-datetimepicker/datetimepicker/issues/20#issuecomment-545527682\n// TODO: tests\n// TODO: add to README\n/**\n * Common component for selecting a date. (This can be updated to a date/time picker later if we need it)\n * @param defaultString - string that represents what the component should display if there is no value selected\n * @param onChange - function to run in the parent when selection changes\n */\nconst VADatePicker: FC<VADatePickerProps> = ({ defaultString, onChange }) => {\n  // value is the display value in the text area. Is human readable\n  const [value, setValue] = useState(defaultString)\n  // boolean to show or hide the picker\n  const [show, setShow] = useState(false)\n  // date value that is used by the picker\n  const [selectedDate, setSelectedDate] = useState(new Date())\n\n  // this helps simulate the UI of a VATextInput\n  const textColor = value === defaultString ? 'placeholder' : 'primary'\n\n  // TODO: this is reused from VATexInput, should be globalized\n  const wrapperProps: BoxProps = {\n    width: '100%',\n    minHeight: theme.dimensions.touchableMinHeight,\n    px: theme.dimensions.gutter,\n    borderBottomWidth: theme.dimensions.borderWidth,\n    borderColor: 'primary',\n    borderStyle: 'solid',\n    justifyContent: 'flex-start',\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: 'textBox',\n  }\n\n  // each os has specific options for display\n  const display = isIOS() ? 'inline' : 'calendar'\n\n  // in iOS, selecting anything with the spinner triggers onChange, so it needs overriding with a button\n  const hideIos = (): void => {\n    setShow(false)\n  }\n\n  /**\n   * NOTE: onChange is typed the way it is to avoid a TS bug in the lib. There is a fix here:\n   * https://github.com/react-native-datetimepicker/datetimepicker/issues/359\n   * that will hopefully fix it that needs to be watched.\n   */\n  return (\n    <Box>\n      <Box {...wrapperProps}>\n        <Pressable onPress={(): void => setShow(true)}>\n          <TextView variant={'MobileBody'} color={textColor}>\n            {value}\n          </TextView>\n        </Pressable>\n      </Box>\n      {show && (\n        <Box>\n          {isIOS() && (\n            <Box flex={1} flexDirection={'row'} justifyContent={'flex-end'}>\n              <Button title={'Done'} onPress={hideIos} />\n            </Box>\n          )}\n          <RNDateTimePicker\n            value={selectedDate}\n            mode={'date'}\n            display={display}\n            onChange={(event: Event | AndroidEvent, date?: Date): void => {\n              setShow(isIOS())\n              setValue(date ? DateTime.fromJSDate(date).toLocaleString() : defaultString)\n              setSelectedDate(date ? date : new Date())\n              onChange(date)\n            }}\n          />\n        </Box>\n      )}\n    </Box>\n  )\n}\n\nexport default VADatePicker\n";var r=n(38909);const l={},s=void 0,c={unversionedId:"UX/ComponentsSection/Selection and Input/Pickers/VADatePicker",id:"UX/ComponentsSection/Selection and Input/Pickers/VADatePicker",title:"VADatePicker",description:"",source:"@site/docs/UX/ComponentsSection/Selection and Input/Pickers/VADatePicker.mdx",sourceDirName:"UX/ComponentsSection/Selection and Input/Pickers",slug:"/UX/ComponentsSection/Selection and Input/Pickers/VADatePicker",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Selection and Input/Pickers/VADatePicker",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"PickerList",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Selection and Input/Pickers/PickerList"},next:{title:"VAModalPicker",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Selection and Input/Pickers/VAModalPicker"}},d=[],m="<VADatePicker defaultString={'value'} onchange={(date) => {}} />",p={toc:d,exampleString:m},u="wrapper";function h(e){let{components:t,...n}=e;return(0,o.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(r.Z,{componentName:"VADatePicker",example:m,codeString:i,mdxType:"ComponentTopInfo"}))}h.isMDXComponent=!0}}]);