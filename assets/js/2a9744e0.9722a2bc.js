"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6872],{32666:(t,e,n)=>{n.d(e,{Z:()=>d});var o=n(67294),s=n(97405),r=n(22808),i=n(30433),a=n(41284),l=n(36005);const u=t=>{let{props:e}=t;return e?o.createElement(o.Fragment,null,l.ZP.isEmpty(e)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(e).map((t=>o.createElement("tr",{key:t},o.createElement("td",null,o.createElement("code",null,t)),o.createElement("td",{style:{minWidth:200}},e[t].type?.name),o.createElement("td",null,e[t].defaultValue&&e[t].defaultValue.value.toString()),o.createElement("td",null,e[t].required?"Yes":"No"),o.createElement("td",null,e[t].description))))))):null};function d(t){const e=(0,a.N)(t.componentName),{description:n,displayName:l,props:d}=e[0],c=`How to use the ${l} component`,p=`Full code for the ${l} component`;return o.createElement(o.Fragment,null,n,o.createElement("br",null),o.createElement("br",null),o.createElement(r.Z,null,o.createElement(i.Z,{value:"props",label:"Properties"},o.createElement(u,{props:d})),o.createElement(i.Z,{value:"example",label:"Example"},t.example&&o.createElement(s.Z,{title:c,className:"language-tsx test"},t.example)),o.createElement(i.Z,{value:"code",label:"Source Code"},t.codeString&&o.createElement(s.Z,{title:p,className:"language-tsx"},t.codeString)),o.createElement(i.Z,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},t.accessibilityInfo))))}},41284:(t,e,n)=>{n.d(e,{N:()=>s});var o=n(52426);const s=t=>(0,o.ZP)()["docusaurus-plugin-react-docgen-typescript"].default.filter((e=>e.displayName===t))},2768:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>l,default:()=>y,exampleString:()=>p,frontMatter:()=>a,metadata:()=>u,toc:()=>c});var o=n(87462),s=(n(67294),n(3905));n(8209),n(97405);const r="import { AccessibilityState, Pressable } from 'react-native'\nimport React, { FC, useState } from 'react'\n\nimport { Box, BoxProps, TextView, TextViewProps, VAIcon, VAIconProps } from './index'\nimport { VAButtonBackgroundColors, VAButtonTextColors } from 'styles/theme'\nimport { a11yHintProp, testIdProps } from 'utils/accessibility'\nimport { useTheme } from 'utils/hooks'\n\nexport type VAButtonBackgroundColorsVariant = keyof VAButtonBackgroundColors\n\nexport const ButtonTypesConstants: {\n  buttonPrimary: ButtonTypes\n  buttonSecondary: ButtonTypes\n  buttonDestructive: ButtonTypes\n  buttonWhite: ButtonTypes\n  brandedPrimary: ButtonTypes\n} = {\n  buttonPrimary: 'buttonPrimary',\n  buttonSecondary: 'buttonSecondary',\n  buttonDestructive: 'buttonDestructive',\n  buttonWhite: 'buttonWhite',\n  brandedPrimary: 'brandedPrimary',\n}\nexport type ButtonTypes = 'buttonPrimary' | 'buttonSecondary' | 'buttonDestructive' | 'buttonWhite' | 'brandedPrimary'\n\n/**\n * Props for the {@link VAButton}\n */\nexport type VAButtonProps = {\n  /** function called when button is pressed */\n  onPress: () => void\n  /** text appearing in the button */\n  label: string\n  /** specifies how the button will look - buttonPrimary has non white background, buttonSecondary has white background w/ colored border  */\n  buttonType: ButtonTypes\n  /** a string value used to set the buttons testID/accessibility label */\n  testID?: string\n  /** text to use as the accessibility hint */\n  a11yHint?: string\n  /** optional prop that disables the button when set to true */\n  disabled?: boolean\n  /** optional prop for text to display under the button if it is disabled **/\n  disabledText?: string\n  /** hides the border if set to true */\n  hideBorder?: boolean\n  /** optional accessibility state */\n  accessibilityState?: AccessibilityState\n  /** props for optional icon to display before text */\n  iconProps?: VAIconProps\n  /** props for optional min height */\n  minHeight?: number\n}\n\n/**\n * A common component to show a button that takes the full width of the view with gutters\n */\nconst VAButton: FC<VAButtonProps> = ({ onPress, label, disabled, buttonType, hideBorder, a11yHint, testID, accessibilityState, disabledText, iconProps, minHeight }) => {\n  const theme = useTheme()\n\n  const textViewProps: TextViewProps = {\n    variant: 'MobileBodyBold',\n    color: (disabled ? 'buttonDisabled' : buttonType) as keyof VAButtonTextColors,\n  }\n\n  const [isPressed, setIsPressed] = useState(false)\n\n  const _onPressIn = (): void => {\n    setIsPressed(true)\n  }\n\n  const _onPressOut = (): void => {\n    setIsPressed(false)\n  }\n\n  const getBorderOrBackgroundColor = (): VAButtonBackgroundColorsVariant => {\n    if (disabled) {\n      return 'buttonDisabled'\n    }\n\n    // animate 'buttonPrimary' when active\n    if (isPressed) {\n      if (buttonType === ButtonTypesConstants.buttonPrimary) {\n        return 'buttonPrimaryActive'\n      } else if (buttonType === ButtonTypesConstants.buttonDestructive) {\n        return 'buttonDestructiveActive'\n      } else if (buttonType === ButtonTypesConstants.buttonWhite) {\n        return 'buttonWhiteActive'\n      } else if (buttonType === ButtonTypesConstants.brandedPrimary) {\n        return 'brandedPrimaryActive'\n      } else {\n        return 'buttonSecondaryActive'\n      }\n    }\n\n    return buttonType\n  }\n\n  const hideButtonBorder = hideBorder || buttonType === ButtonTypesConstants.buttonPrimary || disabled\n\n  const boxProps: BoxProps = {\n    borderRadius: 5,\n    backgroundColor: getBorderOrBackgroundColor(),\n    alignItems: 'center',\n    p: theme.dimensions.buttonPadding,\n    borderWidth: hideButtonBorder ? undefined : theme.dimensions.buttonBorderWidth,\n    borderColor: hideButtonBorder ? undefined : getBorderOrBackgroundColor(),\n    minHeight: minHeight || undefined,\n  }\n\n  const hintProps = a11yHint ? a11yHintProp(a11yHint) : {}\n\n  const showDisabledText = disabled && disabledText\n\n  const disabledTextProps: TextViewProps = {\n    variant: 'HelperText',\n  }\n\n  return (\n    <>\n      <Pressable\n        onPress={onPress}\n        onPressIn={_onPressIn}\n        onPressOut={_onPressOut}\n        disabled={disabled}\n        {...testIdProps(testID || label)}\n        {...hintProps}\n        accessibilityRole=\"button\"\n        accessible={true}\n        accessibilityState={accessibilityState || {}}>\n        <Box {...boxProps}>\n          <Box display=\"flex\" flexDirection=\"row\" alignItems=\"center\">\n            {iconProps && (\n              <Box mr={theme.dimensions.textIconMargin}>\n                <VAIcon {...iconProps} />\n              </Box>\n            )}\n            <TextView {...textViewProps}>{label}</TextView>\n          </Box>\n        </Box>\n      </Pressable>\n      {showDisabledText && (\n        <Box my={theme.dimensions.condensedMarginBetween}>\n          <TextView {...disabledTextProps}>{disabledText}</TextView>\n        </Box>\n      )}\n    </>\n  )\n}\n\nexport default VAButton\n";var i=n(32666);const a={},l=void 0,u={unversionedId:"Flagship design library/Components/Buttons and Links/VAButton",id:"Flagship design library/Components/Buttons and Links/VAButton",title:"VAButton",description:"",source:"@site/docs/Flagship design library/Components/Buttons and Links/VAButton.mdx",sourceDirName:"Flagship design library/Components/Buttons and Links",slug:"/Flagship design library/Components/Buttons and Links/VAButton",permalink:"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/VAButton",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"SignoutButton",permalink:"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/SignoutButton"},next:{title:"Veterans Crisis Line button",permalink:"/va-mobile-app/docs/Flagship design library/Components/Buttons and Links/VeteransCrisisLineButton"}},d={},c=[],p="<VAButton \nonPress={() => { console.log('button pressed') }} \nlabel={'my button'} \ntextColor=\"primaryContrast\" \nbackgroundColor=\"button\" \ndisabledText=\"my instructions to enable this button\" \niconProps={{ name: 'PaperClip', width: 16, height: 18 }} />",b={toc:c,exampleString:p},m="wrapper";function y(t){let{components:e,...n}=t;return(0,s.kt)(m,(0,o.Z)({},b,n,{components:e,mdxType:"MDXLayout"}),(0,s.kt)(i.Z,{componentName:"VAButton",example:p,codeString:r,mdxType:"ComponentTopInfo"}))}y.isMDXComponent=!0}}]);