"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8785],{5552:function(e,o,n){n.r(o),n.d(o,{contentTitle:function(){return a},default:function(){return b},exampleString:function(){return m},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return p}});var t=n(7462),r=n(3366),c=(n(7294),n(3905)),i=(n(9055),n(8909)),s=["components"],l={},a=void 0,d={unversionedId:"FrontEnd/ComponentsSection/FormComponents/VASelector",id:"FrontEnd/ComponentsSection/FormComponents/VASelector",isDocsHomePage:!1,title:"VASelector",description:"",source:"@site/docs/FrontEnd/ComponentsSection/FormComponents/VASelector.mdx",sourceDirName:"FrontEnd/ComponentsSection/FormComponents",slug:"/FrontEnd/ComponentsSection/FormComponents/VASelector",permalink:"/va-mobile-app/index.html/docs/FrontEnd/ComponentsSection/FormComponents/VASelector",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"VAModalPicker",permalink:"/va-mobile-app/index.html/docs/FrontEnd/ComponentsSection/FormComponents/VAModalPicker"},next:{title:"VATextInput",permalink:"/va-mobile-app/index.html/docs/FrontEnd/ComponentsSection/FormComponents/VATextInput"}},p=[],m="<VASelector text={'Text to display'} selected={selected} setSelected={setSelected}/>",h={toc:p,exampleString:m};function b(e){var o=e.components,n=(0,r.Z)(e,s);return(0,c.kt)("wrapper",(0,t.Z)({},h,n,{components:o,mdxType:"MDXLayout"}),(0,c.kt)(i.Z,{componentName:"VASelector",example:m,codeString:"import { TouchableWithoutFeedback } from 'react-native'\nimport React, { FC } from 'react'\n\nimport { Box, TextView, VAIcon, VAIconProps } from '../../index'\nimport { a11yHintProp, testIdProps } from 'utils/accessibility'\nimport { renderInputError } from './formFieldUtils'\nimport { useTheme, useTranslation } from 'utils/hooks'\n\nexport enum SelectorType {\n  Checkbox = 'Checkbox',\n  Radio = 'Radio',\n}\n\n/**\n * Signifies props for the component {@link VASelector}\n */\nexport type VASelectorProps = {\n  /** render checkbox or radio button */\n  selectorType?: SelectorType\n  /** when true displays the filled checkbox/radio , when false displays the empty checkbox/radio */\n  selected: boolean\n  /** sets the value of selected on click of the checkbox/radio */\n  onSelectionChange: (selected: boolean) => void\n  /** translated labelKey displayed next to the checkbox/radio */\n  labelKey: string\n  /** optional arguments to pass in with the labelKey during translation */\n  labelArgs?: { [key: string]: string }\n  /** optional boolean that disables the VASelector/radio when set to true */\n  disabled?: boolean\n  /** optional accessibilityLabel */\n  a11yLabel?: string\n  /** optional accessibilityHint */\n  a11yHint?: string\n  /** optional error to display for the checkbox */\n  error?: string\n  /** optional callback to set the error message */\n  setError?: (value?: string) => void\n  /** optional boolean that marks the component as required */\n  isRequiredField?: boolean\n}\n\n/**A common component to display a checkbox with text*/\nconst VASelector: FC<VASelectorProps> = ({\n  selectorType = SelectorType.Checkbox,\n  selected,\n  onSelectionChange,\n  labelKey,\n  labelArgs,\n  disabled,\n  a11yLabel,\n  a11yHint,\n  error,\n  setError,\n  isRequiredField,\n}) => {\n  const theme = useTheme()\n  const t = useTranslation()\n  const {\n    dimensions: { selectorWidth, selectorHeight, checkboxLabelMargin },\n  } = theme\n\n  const selectorOnPress = (): void => {\n    if (!disabled) {\n      setError && setError('')\n\n      // if its a required checkbox and its being unchecked, display the error\n      if (isRequiredField && selected && setError && selectorType === SelectorType.Checkbox) {\n        setError()\n      }\n\n      onSelectionChange(!selected)\n    }\n  }\n\n  const getCheckBoxIcon = (): React.ReactNode => {\n    if (disabled && selectorType === SelectorType.Radio) {\n      return <VAIcon name=\"DisabledRadio\" width={selectorWidth} height={selectorHeight} {...testIdProps('DisabledRadio')} />\n    }\n\n    if (!!error && selectorType === SelectorType.Checkbox) {\n      return <VAIcon name=\"ErrorCheckBox\" width={selectorWidth} height={selectorHeight} {...testIdProps('ErrorCheckBox')} />\n    }\n\n    const filledName = selectorType === SelectorType.Checkbox ? 'FilledCheckBox' : 'FilledRadio'\n    const emptyName = selectorType === SelectorType.Checkbox ? 'EmptyCheckBox' : 'EmptyRadio'\n\n    const name = selected ? filledName : emptyName\n    const fill = selected ? 'checkboxEnabledPrimary' : 'checkboxDisabledContrast'\n    const stroke = selected ? 'checkboxEnabledPrimary' : 'checkboxDisabled'\n\n    const selectorIconProps: VAIconProps = {\n      name,\n      width: selectorWidth,\n      height: selectorHeight,\n      fill,\n      stroke,\n    }\n\n    return <VAIcon {...selectorIconProps} {...testIdProps(name)} />\n  }\n\n  const hintProp = a11yHint ? a11yHintProp(a11yHint) : {}\n  const a11yRole = selectorType === SelectorType.Checkbox ? 'checkbox' : 'radio'\n  const a11yState = selectorType === SelectorType.Checkbox ? { checked: selected } : { selected }\n\n  return (\n    <TouchableWithoutFeedback\n      onPress={selectorOnPress}\n      accessibilityState={a11yState}\n      accessibilityRole={a11yRole}\n      {...hintProp}\n      {...testIdProps(a11yLabel || t(labelKey, labelArgs))}>\n      <Box>\n        {!!error && <Box ml={checkboxLabelMargin + selectorWidth}>{renderInputError(theme, error)}</Box>}\n        <Box flexDirection=\"row\">\n          <Box {...testIdProps('checkbox-with-label')}>{getCheckBoxIcon()}</Box>\n          <Box flex={1} ml={checkboxLabelMargin}>\n            <TextView variant=\"VASelector\" color={disabled ? 'checkboxDisabled' : 'primary'}>\n              {t(labelKey, labelArgs)}\n            </TextView>\n          </Box>\n        </Box>\n      </Box>\n    </TouchableWithoutFeedback>\n  )\n}\n\nexport default VASelector\n",mdxType:"ComponentTopInfo"}))}b.isMDXComponent=!0}}]);