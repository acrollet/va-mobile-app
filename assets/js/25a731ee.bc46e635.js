"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[17],{7209:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return l},default:function(){return f},exampleString:function(){return p},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return m}});var i=t(7462),o=t(3366),r=(t(7294),t(3905)),a=(t(9055),t(8909)),s=["components"],c={},l=void 0,d={unversionedId:"Engineering/FrontEnd/ComponentsSection/HeaderTitle",id:"Engineering/FrontEnd/ComponentsSection/HeaderTitle",isDocsHomePage:!1,title:"HeaderTitle",description:"export const exampleString = `useEffect(() => {",source:"@site/docs/Engineering/FrontEnd/ComponentsSection/HeaderTitle.mdx",sourceDirName:"Engineering/FrontEnd/ComponentsSection",slug:"/Engineering/FrontEnd/ComponentsSection/HeaderTitle",permalink:"/docs/Engineering/FrontEnd/ComponentsSection/HeaderTitle",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"FooterButton",permalink:"/docs/Engineering/FrontEnd/ComponentsSection/FooterButton"},next:{title:"LargeNavButton",permalink:"/docs/Engineering/FrontEnd/ComponentsSection/LargeNavButton"}},m=[],p="useEffect(() => {\n    navigation.setOptions({\n      // using react-navigation internal HeaderTitle component to easily maintain font and styling while being able to add an accessibilityLabel\n      headerTitle: (header) => <HeaderTitle {...testIdProps('contactVA.title.a11yLabel')} headerTitle={header.children} />,\n    })\n})",u={toc:m,exampleString:p};function f(e){var n=e.components,t=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,i.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(a.Z,{componentName:"HeaderTitle",example:p,codeString:"import { StyleSheet, View } from 'react-native'\nimport { TextView } from 'components'\nimport { useTheme } from 'utils/hooks'\nimport React, { FC, Ref } from 'react'\n\nexport type HeaderTitleProps = {\n  /** ref for this component*/\n  focusRef?: Ref<View>\n  /**sets the header title*/\n  headerTitle?: string\n  /** sets if it is accessible*/\n  accessible?: boolean\n  /** sets the test id*/\n  testID?: string\n  /**sets the accessibility label*/\n  accessabilityLabel?: string\n}\n\n/**Common component used for the navigation header title*/\nconst HeaderTitle: FC<HeaderTitleProps> = ({ focusRef, headerTitle, testID, accessabilityLabel, accessible = true }) => {\n  const {\n    dimensions: { headerHeight },\n  } = useTheme()\n\n  const combinestyle = StyleSheet.flatten([{ height: headerHeight }, defaultStyle.headerText])\n  return (\n    <View ref={focusRef} accessibilityRole=\"header\" accessible={accessible} style={combinestyle} testID={testID} accessibilityLabel={accessabilityLabel}>\n      <TextView accessible={false} importantForAccessibility={'no'} color={'primaryContrast'} allowFontScaling={false}>\n        {headerTitle}\n      </TextView>\n    </View>\n  )\n}\n\nconst defaultStyle = StyleSheet.create({\n  headerText: {\n    alignItems: 'center',\n    display: 'flex',\n    flexDirection: 'row',\n  },\n})\nexport default HeaderTitle\n",mdxType:"ComponentTopInfo"}))}f.isMDXComponent=!0}}]);