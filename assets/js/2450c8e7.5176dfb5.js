"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3172],{794:function(n,e,t){t.r(e),t.d(e,{contentTitle:function(){return c},default:function(){return T},exampleString:function(){return d},frontMatter:function(){return a},metadata:function(){return p},toc:function(){return m}});var i=t(7462),o=t(3366),r=(t(7294),t(3905)),s=(t(9055),t(8909)),x=["components"],a={},c=void 0,p={unversionedId:"Engineering/FrontEnd/ComponentsSection/TextLines",id:"Engineering/FrontEnd/ComponentsSection/TextLines",title:"TextLines",description:"",source:"@site/docs/Engineering/FrontEnd/ComponentsSection/TextLines.mdx",sourceDirName:"Engineering/FrontEnd/ComponentsSection",slug:"/Engineering/FrontEnd/ComponentsSection/TextLines",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/TextLines",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"TextLineWithIcon",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/TextLineWithIcon"},next:{title:"TextView",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/TextView"}},m=[],d="<TextLines listOfText={[{ text: 'my text', isBold: true}]} />",l={toc:m,exampleString:d};function T(n){var e=n.components,t=(0,o.Z)(n,x);return(0,r.kt)("wrapper",(0,i.Z)({},l,t,{components:e,mdxType:"MDXLayout"}),(0,r.kt)(s.Z,{componentName:"TextLines",example:d,codeString:"import React, { FC } from 'react'\n\nimport { TextLine } from './types'\nimport Box from './Box'\nimport MessagesSentReadTag from './MessagesSentReadTag'\nimport TextLineWithIcon, { TextLineWithIconProps } from './TextLineWithIcon'\nimport TextView from './TextView'\n\ntype TextLinesProps = {\n  /** List of text for the button */\n  listOfText?: Array<TextLine | TextLineWithIconProps>\n}\n\n/**Component to render individual lines of text. Each text line will wrap as needed and subsequent lines will be on the next line*/\nexport const TextLines: FC<TextLinesProps> = ({ listOfText }) => {\n  return (\n    <Box flex={1}>\n      <Box flexDirection=\"column\">\n        {listOfText?.map((textObj: TextLine | TextLineWithIconProps, index: number) => {\n          if ('iconProps' in textObj && textObj.iconProps !== undefined) {\n            return <TextLineWithIcon key={index} {...textObj} />\n          } else {\n            const { text, variant = 'MobileBody', color = 'primary', textAlign = 'left', isTextTag = false } = textObj\n            if (isTextTag) {\n              return <MessagesSentReadTag text={text} key={index} />\n            }\n            return (\n              <TextView variant={variant} textAlign={textAlign} color={color} key={index}>\n                {text}\n              </TextView>\n            )\n          }\n        })}\n      </Box>\n    </Box>\n  )\n}\n",mdxType:"ComponentTopInfo"}))}T.isMDXComponent=!0}}]);