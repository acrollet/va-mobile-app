"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8623],{38909:(e,n,t)=>{t.d(n,{Z:()=>c});var a=t(67294),l=t(19055),o=t(26396),r=t(58215),s=t(82224),i=t(36005);const p=e=>{let{props:n}=e;return n?a.createElement(a.Fragment,null,i.ZP.isEmpty(n)?a.createElement("pre",{className:"preText"},"This component does not have props defined"):a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Name"),a.createElement("th",null,"Type"),a.createElement("th",null,"Default Value"),a.createElement("th",null,"Required"),a.createElement("th",null,"Description"))),a.createElement("tbody",null,Object.keys(n).map((e=>a.createElement("tr",{key:e},a.createElement("td",null,a.createElement("code",null,e)),a.createElement("td",{style:{minWidth:200}},n[e].type?.name),a.createElement("td",null,n[e].defaultValue&&n[e].defaultValue.value.toString()),a.createElement("td",null,n[e].required?"Yes":"No"),a.createElement("td",null,n[e].description))))))):null};function c(e){const n=(0,s.N)(e.componentName),{description:t,displayName:i,props:c}=n[0],m=`How to use the ${i} component`,g=`Full code for the ${i} component`;return a.createElement(a.Fragment,null,t,a.createElement("br",null),a.createElement("br",null),a.createElement(o.Z,null,a.createElement(r.Z,{value:"props",label:"Properties"},a.createElement(p,{props:c})),a.createElement(r.Z,{value:"example",label:"Example"},e.example&&a.createElement(l.Z,{title:m,className:"language-tsx test"},e.example)),a.createElement(r.Z,{value:"code",label:"Source Code"},e.codeString&&a.createElement(l.Z,{title:g,className:"language-tsx"},e.codeString)),a.createElement(r.Z,{value:"accessibility",label:"Accessibility"},a.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},82224:(e,n,t)=>{t.d(n,{N:()=>l});var a=t(28084);const l=e=>(0,a.default)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},45293:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>i,default:()=>b,exampleString:()=>m,frontMatter:()=>s,metadata:()=>p,toc:()=>c});var a=t(87462),l=(t(67294),t(3905));t(95657),t(19055);const o="import { Pressable, PressableProps } from 'react-native'\nimport React, { FC } from 'react'\n\nimport { useTheme } from 'utils/hooks'\nimport Box, { BoxProps } from './Box'\nimport TextView from './TextView'\nimport VAIcon, { VAIconProps } from './VAIcon'\n\nexport const LabelTagTypeConstants: {\n  tagBlue: LabelTagTypes\n  tagInactive: LabelTagTypes\n  tagYellow: LabelTagTypes\n  tagGreen: LabelTagTypes\n} = {\n  tagBlue: 'tagBlue',\n  tagInactive: 'tagInactive',\n  tagYellow: 'tagYellow',\n  tagGreen: 'tagGreen',\n}\n\nexport type LabelTagTypes = 'tagBlue' | 'tagInactive' | 'tagYellow' | 'tagGreen'\n\nexport type LabelTagProps = {\n  /** Message to be shown on the tag*/\n  text: string\n\n  /** Defines the color and look of the tag */\n  labelType: LabelTagTypes\n\n  /** Optional accessibility label */\n  a11yLabel?: string\n\n  /** Optional method called when tag is pressed */\n  onPress?: () => void\n\n  /** Optional accessibility hint if there is an on press */\n  a11yHint?: string\n}\n\n/**Common component to show a text inside a tag*/\nconst LabelTag: FC<LabelTagProps> = ({ text, labelType, onPress, a11yHint, a11yLabel }) => {\n  const theme = useTheme()\n\n  const textView = (\n    <TextView flexWrap={'wrap'} color={'labelTag'} variant={'LabelTag'} px={12} py={4}>\n      {text}\n    </TextView>\n  )\n\n  let wrapperProps: BoxProps = {\n    minWidth: theme.dimensions.tagMinWidth,\n    minHeight: theme.dimensions.touchableMinHeight,\n    justifyContent: 'center',\n    alignSelf: 'flex-start',\n    alignItems: 'center',\n    flexDirection: 'row',\n    backgroundColor: labelType,\n    borderColor: labelType,\n    borderWidth: 1,\n    borderRadius: 100,\n  }\n\n  const getContent = () => {\n    if (!onPress) {\n      if (a11yLabel) {\n        wrapperProps = {\n          ...wrapperProps,\n          accessibilityLabel: a11yLabel,\n        }\n      }\n\n      return <Box {...wrapperProps}>{textView}</Box>\n    }\n\n    let pressableProps: PressableProps = {\n      onPress: onPress,\n      accessible: true,\n      accessibilityRole: 'button',\n    }\n\n    if (a11yHint) {\n      pressableProps = {\n        ...pressableProps,\n        accessibilityHint: a11yHint,\n      }\n    }\n\n    if (a11yLabel) {\n      pressableProps = {\n        ...pressableProps,\n        accessibilityLabel: a11yLabel,\n      }\n    }\n\n    const infoIconProps: VAIconProps = {\n      name: 'InfoIcon',\n      fill: 'tagInfoIcon',\n      height: 16,\n      width: 16,\n      mr: 10,\n    }\n\n    return (\n      <Pressable {...pressableProps}>\n        <Box {...wrapperProps}>\n          {textView}\n          <VAIcon {...infoIconProps} />\n        </Box>\n      </Pressable>\n    )\n  }\n\n  return getContent()\n}\n\nexport default LabelTag\n";var r=t(38909);const s={},i=void 0,p={unversionedId:"UX/ComponentsSection/Tags/LabelTag",id:"UX/ComponentsSection/Tags/LabelTag",title:"LabelTag",description:"",source:"@site/docs/UX/ComponentsSection/Tags/LabelTag.mdx",sourceDirName:"UX/ComponentsSection/Tags",slug:"/UX/ComponentsSection/Tags/LabelTag",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Tags/LabelTag",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Tags",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Tags/"},next:{title:"MessagesCountTag",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Tags/MessagesCountTag"}},c=[],m="<LabelTag text={'value'} />",g={toc:c,exampleString:m},u="wrapper";function b(e){let{components:n,...t}=e;return(0,l.kt)(u,(0,a.Z)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)(r.Z,{componentName:"LabelTag",example:m,codeString:o,mdxType:"ComponentTopInfo"}))}b.isMDXComponent=!0}}]);