"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4285],{38909:function(e,t,n){n.d(t,{Z:function(){return p}});var r=n(67294),o=n(19055),l=n(26396),a=n(58215),i=n(82224),s=n(36005),c=function(e){var t=e.props;return t?r.createElement(r.Fragment,null,s.ZP.isEmpty(t)?r.createElement("pre",{className:"preText"},"This component does not have props defined"):r.createElement("table",null,r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Name"),r.createElement("th",null,"Type"),r.createElement("th",null,"Default Value"),r.createElement("th",null,"Required"),r.createElement("th",null,"Description"))),r.createElement("tbody",null,Object.keys(t).map((function(e){var n;return r.createElement("tr",{key:e},r.createElement("td",null,r.createElement("code",null,e)),r.createElement("td",{style:{minWidth:200}},null==(n=t[e].type)?void 0:n.name),r.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),r.createElement("td",null,t[e].required?"Yes":"No"),r.createElement("td",null,t[e].description))}))))):null};function p(e){var t=(0,i.N)(e.componentName)[0],n=t.description,s=t.displayName,p=t.props,m="How to use the "+s+" component",u="Full code for the "+s+" component";return r.createElement(r.Fragment,null,n,r.createElement("br",null),r.createElement("br",null),r.createElement(l.Z,null,r.createElement(a.Z,{value:"props",label:"Properties"},r.createElement(c,{props:p})),r.createElement(a.Z,{value:"example",label:"Example"},e.example&&r.createElement(o.Z,{title:m,className:"language-tsx test"},e.example)),r.createElement(a.Z,{value:"code",label:"Source Code"},e.codeString&&r.createElement(o.Z,{title:u,className:"language-tsx"},e.codeString)),r.createElement(a.Z,{value:"accessibility",label:"Accessibility"},r.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},82224:function(e,t,n){n.d(t,{N:function(){return o}});var r=n(28084),o=function(e){return(0,r.default)()["docusaurus-plugin-react-docgen-typescript"].default.filter((function(t){return t.displayName===e}))}},40698:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return c},default:function(){return y},exampleString:function(){return u},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var r=n(87462),o=n(63366),l=(n(67294),n(3905)),a=(n(19055),n(38909)),i=["components"],s={},c=void 0,p={unversionedId:"UX/ComponentsSection/Errors/CallHelpCenter",id:"UX/ComponentsSection/Errors/CallHelpCenter",title:"CallHelpCenter",description:"export const exampleString = `<CallHelpCenter",source:"@site/docs/UX/ComponentsSection/Errors/CallHelpCenter.mdx",sourceDirName:"UX/ComponentsSection/Errors",slug:"/UX/ComponentsSection/Errors/CallHelpCenter",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Errors/CallHelpCenter",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BasicError",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Errors/BasicError"},next:{title:"DowntimeError",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Errors/DowntimeError"}},m=[],u="<CallHelpCenter\n    titleText={t('profile:disabilityRating.errorTitle')}\n    titleA11yHint={t('profile:disabilityRating.errorTitleA11y')}\n    callPhone={t('profile:disabilityRating.errorPhoneNumber')}\n/>",d={toc:m,exampleString:u};function y(e){var t=e.components,n=(0,o.Z)(e,i);return(0,l.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(a.Z,{componentName:"CallHelpCenter",example:u,codeString:"import { ViewStyle } from 'react-native'\nimport { useTranslation } from 'react-i18next'\nimport React, { FC } from 'react'\n\nimport { AlertBox, Box, ButtonTypesConstants, ClickToCallPhoneNumber, TextView, VAButton, VAScrollView } from 'components'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { useTheme } from 'utils/hooks'\n\nexport type CallHelpCenterProps = {\n  /** optional function called when the Try again button is pressed */\n  onTryAgain?: () => void\n  /** optional text for the title */\n  titleText?: string\n  /** optional title a11y hint*/\n  titleA11yHint?: string\n  /** optional text for the error */\n  errorText?: string\n  /** optional a11y hint for the error */\n  errorA11y?: string\n  /** optional phone number */\n  callPhone?: string\n}\n\n/**A common component to show the help center contact info for when an error happens*/\nconst CallHelpCenter: FC<CallHelpCenterProps> = ({ onTryAgain, titleText, titleA11yHint, errorText, errorA11y, callPhone }) => {\n  const { t } = useTranslation(NAMESPACE.COMMON)\n  const theme = useTheme()\n\n  const scrollStyles: ViewStyle = {\n    justifyContent: 'center',\n  }\n\n  const containerStyles = {\n    mt: theme.dimensions.contentMarginTop,\n    mb: theme.dimensions.contentMarginBottom,\n  }\n\n  const standardMarginBetween = theme.dimensions.standardMarginBetween\n\n  return (\n    <VAScrollView contentContainerStyle={scrollStyles}>\n      <Box justifyContent=\"center\" {...containerStyles}>\n        <AlertBox\n          title={titleText ? titleText : t('errors.callHelpCenter.vaAppNotWorking')}\n          titleA11yLabel={titleA11yHint ? titleA11yHint : t('errors.callHelpCenter.vaAppNotWorking')}\n          text={onTryAgain ? t('errors.callHelpCenter.sorryWithRefresh') : t('errors.callHelpCenter.sorry')}\n          border=\"error\">\n          <Box>\n            <TextView variant=\"MobileBody\" my={standardMarginBetween} accessibilityLabel={errorA11y ? errorA11y : t('errors.callHelpCenter.informationLine.a11yLabel')}>\n              {errorText ? errorText : t('errors.callHelpCenter.informationLine')}\n            </TextView>\n            <ClickToCallPhoneNumber\n              displayedText={callPhone ? undefined : t('errors.callHelpCenter.informationLine.numberDisplayed')}\n              phone={callPhone ? callPhone : t('errors.callHelpCenter.informationLine.number')}\n            />\n            {onTryAgain && (\n              <Box mt={standardMarginBetween} accessibilityRole=\"button\">\n                <VAButton\n                  onPress={onTryAgain}\n                  label={t('refresh')}\n                  buttonType={ButtonTypesConstants.buttonPrimary}\n                  testID={t('refresh')}\n                  a11yHint={t('errors.callHelpCenter.button.a11yHint')}\n                />\n              </Box>\n            )}\n          </Box>\n        </AlertBox>\n      </Box>\n    </VAScrollView>\n  )\n}\n\nexport default CallHelpCenter\n",mdxType:"ComponentTopInfo"}))}y.isMDXComponent=!0}}]);