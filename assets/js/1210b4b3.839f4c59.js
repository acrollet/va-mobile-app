"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1208],{77800:(e,n,t)=>{t.d(n,{Z:()=>u});var a=t(67294),r=t(19055),l=t(26396),s=t(58215),o=t(82224),c=t(36005);const m=e=>{let{props:n}=e;return n?a.createElement(a.Fragment,null,c.ZP.isEmpty(n)?a.createElement("pre",{className:"preText"},"This component does not have param defined"):a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Param / Return"),a.createElement("th",null,"Description"))),a.createElement("tbody",null,Object.keys(n).map((e=>a.createElement("tr",{key:e},a.createElement("td",null,a.createElement("code",null,e)),a.createElement("td",null,"param"===e?n[e].split("\n").map(((e,n)=>{let t=e.split("-");return a.createElement("div",{key:n},a.createElement("code",null,t[0].trim()+":"),"\ufeff"+t[1])})):n[e]))))))):null};function u(e){const n=(0,o.N)(e.componentName),{description:t,displayName:c,tags:u}=n[0],d=`How to use the ${c} component`;return a.createElement(a.Fragment,null,a.createElement(l.Z,null,a.createElement(s.Z,{value:"description",label:"Description"},a.createElement("pre",{className:"preText"},t)),a.createElement(s.Z,{value:"params",label:"Params and Return"},a.createElement(m,{props:u})),a.createElement(s.Z,{value:"example",label:"Example"},e.example&&a.createElement(r.Z,{title:d,className:"language-tsx test"},e.example))))}},82224:(e,n,t)=>{t.d(n,{N:()=>r});var a=t(28084);const r=e=>(0,a.default)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},22953:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>o,default:()=>p,exampleString:()=>u,frontMatter:()=>s,metadata:()=>c,toc:()=>m});var a=t(87462),r=(t(67294),t(3905)),l=(t(95657),t(77800));const s={},o=void 0,c={unversionedId:"Engineering/FrontEnd/CustomHooks/useIsScreenReaderEnabled",id:"Engineering/FrontEnd/CustomHooks/useIsScreenReaderEnabled",title:"useIsScreenReaderEnabled",description:"export const exampleString = `const screenReaderEnabled = useIsScreenReaderEnabled()\\n",source:"@site/docs/Engineering/FrontEnd/CustomHooks/useIsScreenReaderEnabled.mdx",sourceDirName:"Engineering/FrontEnd/CustomHooks",slug:"/Engineering/FrontEnd/CustomHooks/useIsScreenReaderEnabled",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useIsScreenReaderEnabled",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useHeaderStyles",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useHeaderStyles"},next:{title:"useMessageWithSignature",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/CustomHooks/useMessageWithSignature"}},m=[],u="const screenReaderEnabled = useIsScreenReaderEnabled()\n\nconst setFocus = useCallback(() => {\n    if (ref.current && screenReaderEnabled) {}\n}",d={toc:m,exampleString:u},i="wrapper";function p(e){let{components:n,...t}=e;return(0,r.kt)(i,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(l.Z,{componentName:"useIsScreenReaderEnabled",example:u,mdxType:"HooksInfo"}))}p.isMDXComponent=!0}}]);