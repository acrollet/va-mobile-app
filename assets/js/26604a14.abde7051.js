"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7082],{5268:function(n,t,e){e.r(t),e.d(t,{contentTitle:function(){return d},default:function(){return S},exampleString:function(){return p},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return m}});var o=e(7462),a=e(3366),i=(e(7294),e(3905)),s=(e(9055),e(8909)),r=["components"],c={},d=void 0,u={unversionedId:"FrontEnd/ComponentsSection/SaveButton",id:"FrontEnd/ComponentsSection/SaveButton",isDocsHomePage:!1,title:"SaveButton",description:"",source:"@site/docs/FrontEnd/ComponentsSection/SaveButton.mdx",sourceDirName:"FrontEnd/ComponentsSection",slug:"/FrontEnd/ComponentsSection/SaveButton",permalink:"/docs/FrontEnd/ComponentsSection/SaveButton",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Pagination",permalink:"/docs/FrontEnd/ComponentsSection/Pagination"},next:{title:"SegmentedControl",permalink:"/docs/FrontEnd/ComponentsSection/SegmentedControl"}},m=[],p="<SaveButton onPress={() => { console.log('save pressed') }} disabled={false} />",l={toc:m,exampleString:p};function S(n){var t=n.components,e=(0,a.Z)(n,r);return(0,i.kt)("wrapper",(0,o.Z)({},l,e,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(s.Z,{componentName:"SaveButton",example:p,codeString:"import { TouchableWithoutFeedback, TouchableWithoutFeedbackProps } from 'react-native'\nimport React, { FC } from 'react'\n\nimport { Box } from './index'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { a11yHintProp, testIdProps } from 'utils/accessibility'\nimport { useTheme, useTranslation } from 'utils/hooks'\nimport TextView from './TextView'\n\ntype SaveButtonProps = {\n  /**function to run on save pressed*/\n  onSave: () => void\n  /**disables this component */\n  disabled: boolean\n  /**a11y hint for this component */\n  a11yHint?: string\n}\n\n/**A common component for the save button located at the header. */\nconst SaveButton: FC<SaveButtonProps> = ({ onSave, disabled, a11yHint }) => {\n  const t = useTranslation(NAMESPACE.COMMON)\n  const theme = useTheme()\n\n  const color = disabled ? 'primaryContrastDisabled' : 'primaryContrast'\n\n  const props: TouchableWithoutFeedbackProps = {\n    onPress: onSave,\n    disabled,\n    accessibilityRole: 'button',\n    accessible: true,\n    accessibilityState: disabled ? { disabled: true } : { disabled: false },\n  }\n\n  return (\n    <TouchableWithoutFeedback {...props} {...testIdProps('save')} {...a11yHintProp(a11yHint || t('save.a11yHint'))}>\n      <Box pr={theme.dimensions.headerButtonMargin} height={theme.dimensions.headerHeight} justifyContent={'center'} pl={theme.dimensions.headerButtonPadding}>\n        <TextView variant=\"ActionBar\" color={color} allowFontScaling={false} accessible={false}>\n          {t('save')}\n        </TextView>\n      </Box>\n    </TouchableWithoutFeedback>\n  )\n}\n\nexport default SaveButton\n",mdxType:"ComponentTopInfo"}))}S.isMDXComponent=!0}}]);