"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4415],{38909:(e,t,n)=>{n.d(t,{Z:()=>p});var o=n(67294),r=n(19055),a=n(26396),l=n(58215),s=n(82224),c=n(36005);const i=e=>{let{props:t}=e;return t?o.createElement(o.Fragment,null,c.ZP.isEmpty(t)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(t).map((e=>o.createElement("tr",{key:e},o.createElement("td",null,o.createElement("code",null,e)),o.createElement("td",{style:{minWidth:200}},t[e].type?.name),o.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),o.createElement("td",null,t[e].required?"Yes":"No"),o.createElement("td",null,t[e].description))))))):null};function p(e){const t=(0,s.N)(e.componentName),{description:n,displayName:c,props:p}=t[0],m=`How to use the ${c} component`,u=`Full code for the ${c} component`;return o.createElement(o.Fragment,null,n,o.createElement("br",null),o.createElement("br",null),o.createElement(a.Z,null,o.createElement(l.Z,{value:"props",label:"Properties"},o.createElement(i,{props:p})),o.createElement(l.Z,{value:"example",label:"Example"},e.example&&o.createElement(r.Z,{title:m,className:"language-tsx test"},e.example)),o.createElement(l.Z,{value:"code",label:"Source Code"},e.codeString&&o.createElement(r.Z,{title:u,className:"language-tsx"},e.codeString)),o.createElement(l.Z,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},82224:(e,t,n)=>{n.d(t,{N:()=>r});var o=n(28084);const r=e=>(0,o.default)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},25432:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>c,default:()=>x,exampleString:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>p});var o=n(87462),r=(n(67294),n(3905));n(95657),n(19055);const a="import { TouchableWithoutFeedback } from 'react-native'\nimport { useTheme } from 'utils/hooks'\nimport React, { FC } from 'react'\n\nimport Box, { BoxProps } from './Box'\n\n/**\n *  Signifies the props that need to be passed in to {@link TextArea}\n */\nexport type TextAreaProps = {\n  /** onPress callback */\n  onPress?: () => void\n  /** prop to remove border */\n  noBorder?: boolean\n}\n\n/**\n * Text area block for content\n *\n * @returns TextView component\n */\nconst TextArea: FC<TextAreaProps> = ({ onPress, noBorder, children }) => {\n  const theme = useTheme()\n\n  const borderProps: BoxProps = noBorder\n    ? {}\n    : {\n        borderStyle: 'solid',\n        borderBottomWidth: 'default',\n        borderBottomColor: 'primary',\n        borderTopWidth: 'default',\n        borderTopColor: 'primary',\n      }\n\n  const boxProps: BoxProps = {\n    backgroundColor: 'contentBox',\n    p: theme.dimensions.cardPadding,\n  }\n\n  const _onPress = (): void => {\n    if (onPress) {\n      onPress()\n    }\n  }\n\n  if (onPress) {\n    return (\n      <TouchableWithoutFeedback onPress={_onPress}>\n        <Box {...boxProps}>{children}</Box>\n      </TouchableWithoutFeedback>\n    )\n  }\n\n  return (\n    <Box {...boxProps} {...borderProps}>\n      {children}\n    </Box>\n  )\n}\n\nexport default TextArea\n";var l=n(38909);const s={},c=void 0,i={unversionedId:"UX/ComponentsSection/TextViews/TextArea",id:"UX/ComponentsSection/TextViews/TextArea",title:"TextArea",description:"export const exampleString = `",source:"@site/docs/UX/ComponentsSection/TextViews/TextArea.mdx",sourceDirName:"UX/ComponentsSection/TextViews",slug:"/UX/ComponentsSection/TextViews/TextArea",permalink:"/va-mobile-app/docs/UX/ComponentsSection/TextViews/TextArea",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Text views",permalink:"/va-mobile-app/docs/UX/ComponentsSection/TextViews/"},next:{title:"TextLineWithIcon",permalink:"/va-mobile-app/docs/UX/ComponentsSection/TextViews/TextLineWithIcon"}},p=[],m="<TextArea>\n    <VAButton \n    onPress={resetInAppReview} \n    label={'Reset In-App Review Actions'} \n    buttonType={ButtonTypesConstants.buttonPrimary} />\n</TextArea>",u={toc:p,exampleString:m},d="wrapper";function x(e){let{components:t,...n}=e;return(0,r.kt)(d,(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(l.Z,{componentName:"TextArea",example:m,codeString:a,mdxType:"ComponentTopInfo"}))}x.isMDXComponent=!0}}]);