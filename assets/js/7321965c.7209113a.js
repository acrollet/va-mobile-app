"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9333],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=d(n),m=r,h=c["".concat(s,".").concat(m)]||c[m]||u[m]||o;return n?a.createElement(h,l(l({ref:t},p),{},{components:n})):a.createElement(h,l({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=c;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var d=2;d<o;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},64928:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return c},frontMatter:function(){return i},metadata:function(){return d},toc:function(){return p}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),l=["components"],i={sidebar_position:5,sidebar_label:"Other Workflows"},s="Other Workflows",d={unversionedId:"Engineering/DevOps/Automation Code Docs/GitHub Actions/OtherWorkflows",id:"Engineering/DevOps/Automation Code Docs/GitHub Actions/OtherWorkflows",title:"Other Workflows",description:"This is a list of all the reusable workflows in GitHub Actions and what they do.",source:"@site/docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/OtherWorkflows.md",sourceDirName:"Engineering/DevOps/Automation Code Docs/GitHub Actions",slug:"/Engineering/DevOps/Automation Code Docs/GitHub Actions/OtherWorkflows",permalink:"/va-mobile-app/docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/OtherWorkflows",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,sidebar_label:"Other Workflows"},sidebar:"tutorialSidebar",previous:{title:"Code Quality Workflows",permalink:"/va-mobile-app/docs/Engineering/DevOps/Automation Code Docs/GitHub Actions/CodeQualityWorkflows"},next:{title:"Scripts, Etc.",permalink:"/va-mobile-app/docs/Engineering/DevOps/Automation Code Docs/Scripts"}},p=[{value:"Add User to va-mobile-team repo (<code>add_new_user</code>)",id:"add-user-to-va-mobile-team-repo-add_new_user",children:[{value:"Description",id:"description",children:[],level:3},{value:"Trigger",id:"trigger",children:[],level:3},{value:"Steps/Source",id:"stepssource",children:[],level:3}],level:2},{value:"Slash Command Dispatch (<code>slash_commands</code>)",id:"slash-command-dispatch-slash_commands",children:[{value:"Description",id:"description-1",children:[],level:3},{value:"Trigger",id:"trigger-1",children:[],level:3}],level:2},{value:"Start Slack Thread (<code>start_slack_thread</code>)",id:"start-slack-thread-start_slack_thread",children:[{value:"Description",id:"description-2",children:[],level:3},{value:"Trigger",id:"trigger-2",children:[],level:3},{value:"Parameters",id:"parameters",children:[],level:3},{value:"Outputs",id:"outputs",children:[{value:"Steps/Source",id:"stepssource-1",children:[],level:4}],level:3}],level:2},{value:"Documentation Site Workflows",id:"documentation-site-workflows",children:[{value:"Deploy Site (<code>documentation_deploy</code>)",id:"deploy-site-documentation_deploy",children:[{value:"Description",id:"description-3",children:[],level:4},{value:"Trigger",id:"trigger-3",children:[],level:4}],level:3},{value:"Steps/Source",id:"stepssource-2",children:[],level:3},{value:"Test Build (<code>documentation_test_build</code>)",id:"test-build-documentation_test_build",children:[{value:"Description",id:"description-4",children:[],level:4},{value:"Trigger",id:"trigger-4",children:[],level:4},{value:"Steps/Source",id:"stepssource-3",children:[],level:4}],level:3}],level:2}],u={toc:p};function c(e){var t=e.components,n=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"other-workflows"},"Other Workflows"),(0,o.kt)("p",null,"This is a list of all the reusable workflows in GitHub Actions and what they do."),(0,o.kt)("p",null,"In an effort to reduce the page size, large workflow code will be linked instead of being provided here."),(0,o.kt)("h2",{id:"add-user-to-va-mobile-team-repo-add_new_user"},"Add User to va-mobile-team repo (",(0,o.kt)("inlineCode",{parentName:"h2"},"add_new_user"),")"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/va-mobile-app/actions/workflows/add_new_user.yml"},"View on GitHub Actions")),(0,o.kt)("h3",{id:"description"},"Description"),(0,o.kt)("p",null,"Workflow used to add a new user to the ",(0,o.kt)("inlineCode",{parentName:"p"},"flagship-mobile-team")," in GitHub, which grants write and read access tot he ",(0,o.kt)("inlineCode",{parentName:"p"},"va-mobile-app")," repository and to our ZenHub instance. "),(0,o.kt)("h3",{id:"trigger"},"Trigger"),(0,o.kt)("p",null,"Creation of ",(0,o.kt)("inlineCode",{parentName:"p"},"Add User to VA Flagship Mobile Team")," ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/va-mobile-app/issues/new/choose"},"template")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"va-mobile-app")," repository. "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"on:\n  issues:\n    types: [labeled]\n")),(0,o.kt)("h3",{id:"stepssource"},"Steps/Source"),(0,o.kt)("p",null," Click for full source"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-javascript"},'...\nconst extractUsernameRegex = /@[a-zA-Z-_0-9]+/;\nconst username = getFirstMatch(extractUsernameRegex, context.payload.issue.body).substring(1);\n\n\nif(username) {\n  await inviteToTeam(username)\n  await addComment("User added successfully")\n  await addLabels("complete")\n  await closeIssue()\n} else {\n  // error\n  const errorMessage = "Invalid username. Requires manual addition to team"\n  // assign for manual approval and addition, add error label\n  await addAssignees(EXCEPTION_ASSIGNEES)\n  await addLabels("needs-approval")\n  await addComment(errorMessage)\n}\n...\n')),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"slash-command-dispatch-slash_commands"},"Slash Command Dispatch (",(0,o.kt)("inlineCode",{parentName:"h2"},"slash_commands"),")"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/va-mobile-app/actions/workflows/slash_commands.yml"},"View on GitHub Actions")),(0,o.kt)("h3",{id:"description-1"},"Description"),(0,o.kt)("p",null,"Workflow sets up any slash commands that have been created to run in a newly created issue. "),(0,o.kt)("p",null,"Uses the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/peter-evans/slash-command-dispatch"},"Slash Command Dispatch Action")," from GitHub Marketplace"),(0,o.kt)("p",null,'This can be used to add any more "chat ops"-type automations in the future by adding to the ',(0,o.kt)("inlineCode",{parentName:"p"},"commands:")," option"),(0,o.kt)("h3",{id:"trigger-1"},"Trigger"),(0,o.kt)("p",null,"Runs on every issue created comment and fires any slash commands installed if found."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"on:\n  issue_comment:\n    types: [created]\n")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"start-slack-thread-start_slack_thread"},"Start Slack Thread (",(0,o.kt)("inlineCode",{parentName:"h2"},"start_slack_thread"),")"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/va-mobile-app/actions/workflows/start_slack_thread.yml"},"View on GitHub Actions")),(0,o.kt)("h3",{id:"description-2"},"Description"),(0,o.kt)("p",null,"Reusable job that sends a message to a specified channel in DSVA slack and starts a thread to keep from cluttering the Slack feed."),(0,o.kt)("h3",{id:"trigger-2"},"Trigger"),(0,o.kt)("p",null,"Runs when called by another workflow"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"on:\n  workflow_call:\n")),(0,o.kt)("h3",{id:"parameters"},"Parameters"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"type"),(0,o.kt)("th",{parentName:"tr",align:null},"default?"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"channel_name"),(0,o.kt)("td",{parentName:"tr",align:null},"Name of the Slack channel where the thread should be started"),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"message"),(0,o.kt)("td",{parentName:"tr",align:null},"String value of the message that will serve as the top of the thread in Slack channel"),(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"none")))),(0,o.kt)("h3",{id:"outputs"},"Outputs"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"type"),(0,o.kt)("th",{parentName:"tr",align:null},"default?"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"thread_ts"),(0,o.kt)("td",{parentName:"tr",align:null},"Timestamp of the Slack thread that was created. Gets passed to other steps for future use."),(0,o.kt)("td",{parentName:"tr",align:null}),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("hr",null),(0,o.kt)("h4",{id:"stepssource-1"},"Steps/Source"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/va-mobile-app/blob/develop/.github/workflows/update_testrail_run.yml"},"See in repository")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"documentation-site-workflows"},"Documentation Site Workflows"),(0,o.kt)("h3",{id:"deploy-site-documentation_deploy"},"Deploy Site (",(0,o.kt)("inlineCode",{parentName:"h3"},"documentation_deploy"),")"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/va-mobile-app/actions/workflows/documentation_deploy.yml"},"View on GitHub Actions")),(0,o.kt)("h4",{id:"description-3"},"Description"),(0,o.kt)("p",null,"Workflow that runs every day to update this documentation site with any approved changes."),(0,o.kt)("h4",{id:"trigger-3"},"Trigger"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'on:\n  workflow_dispatch:\n  schedule:\n    - cron: "0 3 * * *" # Runs at 03:00 AM (UTC) every day (Check https://crontab.guru/)\n')),(0,o.kt)("p",null,"Runs every day at 0300 UTC"),(0,o.kt)("h3",{id:"stepssource-2"},"Steps/Source"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/va-mobile-app/blob/develop/.github/workflows/documentation_deploy.yml"},"See in repository")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"test-build-documentation_test_build"},"Test Build (",(0,o.kt)("inlineCode",{parentName:"h3"},"documentation_test_build"),")"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/department-of-veterans-affairs/va-mobile-app/actions/workflows/documentation_test_build.yml"},"View on GitHub Actions")),(0,o.kt)("h4",{id:"description-4"},"Description"),(0,o.kt)("p",null,"Automated workflow that runs on every PR that touches autogenerated content for this documentation site to make sure that not of the changes breaks the automatic build and deploy of the site. "),(0,o.kt)("h4",{id:"trigger-4"},"Trigger"),(0,o.kt)("p",null,"Runs on every pull request to ",(0,o.kt)("inlineCode",{parentName:"p"},"develop")," branch that touches the following paths:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"VAMobile/src/components/**")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"VAMobile/documentation/**")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"VAMobile/src/utils/hooks.tsx"))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"on:\n  pull_request:\n    branches: [develop]\n    paths: \n      - VAMobile/src/components/**\n      - VAMobile/documentation/**\n      - VAMobile/src/utils/hooks.tsx\n")),(0,o.kt)("h4",{id:"stepssource-3"},"Steps/Source"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"test-deploy:\n  name: Test\n  runs-on: ubuntu-latest\n  steps:\n    - uses: actions/checkout@v2\n    - uses: actions/setup-node@v2\n      with:\n        node-version: 14.x\n        cache: yarn\n        cache-dependency-path: VAMobile/yarn.lock\n    - name: Test build\n      working-directory: VAMobile\n      run: |\n        yarn install --frozen-lockfile\n        cd documentation\n        yarn install --frozen-lockfile\n        yarn build\n")))}c.isMDXComponent=!0}}]);