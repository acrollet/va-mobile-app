"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5715],{7800:function(e,t,n){n.d(t,{Z:function(){return c}});var s=n(7294),o=n(9055),a=n(6396),r=n(8215),l=n(2224),m=n(3490),i=function(e){var t=e.props;return t?s.createElement(s.Fragment,null,m.ZP.isEmpty(t)?s.createElement("pre",{className:"preText"},"This component does not have param defined"):s.createElement("table",null,s.createElement("thead",null,s.createElement("tr",null,s.createElement("th",null,"Param / Return"),s.createElement("th",null,"Description"))),s.createElement("tbody",null,Object.keys(t).map((function(e){return s.createElement("tr",{key:e},s.createElement("td",null,s.createElement("code",null,e)),s.createElement("td",null,"param"===e?t[e].split("\n").map((function(e,t){var n=e.split("-");return s.createElement("div",{key:t},s.createElement("code",null,n[0].trim()+":"),"\ufeff"+n[1])})):t[e]))}))))):null};function c(e){var t=(0,l.N)(e.componentName)[0],n=t.description,m=t.displayName,c=t.tags,u="How to use the "+m+" component";return s.createElement(s.Fragment,null,s.createElement(a.Z,null,s.createElement(r.Z,{value:"description",label:"Description"},s.createElement("pre",{className:"preText"},n)),s.createElement(r.Z,{value:"params",label:"Params and Return"},s.createElement(i,{props:c})),s.createElement(r.Z,{value:"example",label:"Example"},e.example&&s.createElement(o.Z,{title:u,className:"language-tsx test"},e.example))))}},5664:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return m},contentTitle:function(){return i},metadata:function(){return c},toc:function(){return u},exampleString:function(){return d},default:function(){return p}});var s=n(7462),o=n(3366),a=(n(7294),n(3905)),r=n(7800),l=["components"],m={},i=void 0,c={unversionedId:"FrontEnd/CustomHooks/useAutoScrollToElement",id:"FrontEnd/CustomHooks/useAutoScrollToElement",isDocsHomePage:!1,title:"useAutoScrollToElement",description:"export const exampleString = `const [scrollRef, messageRef, scrollToSelectedMessage] = useAutoScrollToElement()\\n",source:"@site/docs/FrontEnd/CustomHooks/useAutoScrollToElement.mdx",sourceDirName:"FrontEnd/CustomHooks",slug:"/FrontEnd/CustomHooks/useAutoScrollToElement",permalink:"/va-mobile-app/index.html/docs/FrontEnd/CustomHooks/useAutoScrollToElement",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"useAttachments",permalink:"/va-mobile-app/index.html/docs/FrontEnd/CustomHooks/useAttachments"},next:{title:"useDestructiveAlert",permalink:"/va-mobile-app/index.html/docs/FrontEnd/CustomHooks/useDestructiveAlert"}},u=[],d="const [scrollRef, messageRef, scrollToSelectedMessage] = useAutoScrollToElement()\n\nuseEffect(() => {\n    if (!loading && isTransitionComplete) {\n      scrollToSelectedMessage()\n    }\n}, [loading, isTransitionComplete, scrollToSelectedMessage])\n\nexport const renderMessages = (message: SecureMessagingMessageAttributes, messagesById: SecureMessagingMessageMap, thread: Array<number>, messageRef?: Ref<View>): ReactNode => {\n  const threadMessages = thread.map((messageID) => messagesById[messageID]).sort((message1, message2) => (message1.sentDate < message2.sentDate ? -1 : 1))\n  return threadMessages.map(\n    (m) =>\n      m &&\n      m.messageId && (\n        <CollapsibleMessage\n          key={m.messageId}\n          message={m}\n          isInitialMessage={m.messageId === message.messageId}\n          collapsibleMessageRef={m.messageId === message.messageId ? messageRef : undefined}\n        />\n      ),\n  )\n}\n\nreturn (\n<>\n    <VAScrollView {...testIdProps('ViewMessage-page')} scrollViewRef={scrollRef}>\n    <Box mt={theme.dimensions.standardMarginBetween} mb={theme.dimensions.condensedMarginBetween}>\n        <Box borderColor={'primary'} borderBottomWidth={'default'} p={theme.dimensions.cardPadding}>\n        <TextView variant=\"BitterBoldHeading\" accessibilityRole={'header'}>\n            {formatSubject(category, subject, t)}\n        </TextView>\n        </Box>\n        {renderMessages(message, messagesById, thread, messageRef)}\n    </Box>\n    {replyExpired && (\n        <Box mt={theme.dimensions.standardMarginBetween} mx={theme.dimensions.gutter} mb={theme.dimensions.contentMarginBottom}>\n        <AlertBox background={'noCardBackground'} border={'warning'} title={t('secureMessaging.reply.youCanNoLonger')} text={t('secureMessaging.reply.olderThan45Days')}>\n            <Box mt={theme.dimensions.standardMarginBetween}>\n            <VAButton\n                label={t('secureMessaging.composeMessage.new')}\n                onPress={onPressCompose}\n                buttonType={'buttonPrimary'}\n                a11yHint={t('secureMessaging.composeMessage.new.a11yHint')}\n            />\n            </Box>\n        </AlertBox>\n        </Box>\n    )}\n    </VAScrollView>\n    {!replyExpired && <ReplyMessageFooter messageID={messageID} />}\n</>\n)",g={toc:u,exampleString:d};function p(e){var t=e.components,n=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,s.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)(r.Z,{componentName:"useAutoScrollToElement",example:d,mdxType:"HooksInfo"}))}p.isMDXComponent=!0}}]);