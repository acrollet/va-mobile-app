"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7002],{8627:function(e,n,o){o.r(n),o.d(n,{contentTitle:function(){return c},default:function(){return h},exampleString:function(){return m},frontMatter:function(){return d},metadata:function(){return l},toc:function(){return p}});var t=o(7462),r=o(3366),a=(o(7294),o(3905)),i=(o(9055),o(8909)),s=["components"],d={},c=void 0,l={unversionedId:"FrontEnd/ComponentsSection/AccordionCollapsible",id:"FrontEnd/ComponentsSection/AccordionCollapsible",isDocsHomePage:!1,title:"AccordionCollapsible",description:"export const exampleString =`<AccordionCollapsible",source:"@site/docs/FrontEnd/ComponentsSection/AccordionCollapsible.mdx",sourceDirName:"FrontEnd/ComponentsSection",slug:"/FrontEnd/ComponentsSection/AccordionCollapsible",permalink:"/va-mobile-app/index.html/docs/FrontEnd/ComponentsSection/AccordionCollapsible",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"VATextInput",permalink:"/va-mobile-app/index.html/docs/FrontEnd/ComponentsSection/FormComponents/VATextInput"},next:{title:"AlertBox",permalink:"/va-mobile-app/index.html/docs/FrontEnd/ComponentsSection/AlertBox"}},p=[],m="<AccordionCollapsible \n header={accordionHeader()} \n expandedContent={accordionContent()} \n testID={'headerText'} \n alertBorder={'warning'} \n a11yHint={'a11yHint'} />\n ",x={toc:p,exampleString:m};function h(e){var n=e.components,o=(0,r.Z)(e,s);return(0,a.kt)("wrapper",(0,t.Z)({},x,o,{components:n,mdxType:"MDXLayout"}),(0,a.kt)(i.Z,{componentName:"AccordionCollapsible",example:m,codeString:"import { Pressable, PressableProps, View } from 'react-native'\nimport React, { FC, ReactNode, Ref, useState } from 'react'\n\nimport { Box, BoxProps, TextArea, VAIcon, VA_ICON_MAP } from './index'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { VABorderColors } from 'styles/theme'\nimport { testIdProps } from 'utils/accessibility'\nimport { useTheme, useTranslation } from 'utils/hooks'\n\nexport type AccordionCollapsibleProps = {\n  /** component to display as header of accordion */\n  header: ReactNode\n  /** component to display only when the accordion is expanded */\n  expandedContent: ReactNode\n  /** testID for the header */\n  testID?: string\n  /** a11yHint for the header */\n  a11yHint?: string\n  /** component to display on when the accordion is collapsed */\n  collapsedContent?: ReactNode\n  /** if true hides the accordion arrow and only displays header & collapsed content */\n  hideArrow?: boolean\n  /** custom on press call if more action is needed when expanding/collapsing the accordion */\n  customOnPress?: (expandedValue?: boolean) => void\n  /** sets the initial value of expanded if an accordion should already be expanded on render */\n  expandedInitialValue?: boolean\n  /** gets rid of border of TextArea so the top and bottom borders don't double up in message threads when accordion is opened */\n  noBorder?: boolean\n  /** applies a border to create the alert effect on the view */\n  alertBorder?: keyof VABorderColors\n  /** Ref for the header section */\n  headerRef?: Ref<View>\n}\n\n/**\n * A common component to show content inside of a collapsible accordion.\n */\nconst AccordionCollapsible: FC<AccordionCollapsibleProps> = ({\n  header,\n  expandedContent,\n  collapsedContent,\n  hideArrow,\n  testID,\n  customOnPress,\n  expandedInitialValue,\n  noBorder,\n  children,\n  alertBorder,\n  a11yHint,\n  headerRef,\n}) => {\n  const t = useTranslation(NAMESPACE.COMMON)\n  const theme = useTheme()\n  const [expanded, setExpanded] = useState(expandedInitialValue || false)\n\n  const onPress = (): void => {\n    if (customOnPress) {\n      customOnPress(!expanded)\n    }\n\n    setExpanded(!expanded)\n  }\n\n  const pressableProps: PressableProps = {\n    onPress,\n    accessibilityState: { expanded },\n    accessibilityHint: a11yHint || t('viewMoreDetails'),\n    accessibilityRole: 'spinbutton',\n  }\n\n  const iconName: keyof typeof VA_ICON_MAP = expanded ? 'ArrowUp' : 'ArrowDown'\n\n  const renderHeader = () => {\n    const data = (\n      <Box flexDirection=\"row\">\n        <Box flex={1}>{header}</Box>\n        {!hideArrow && (\n          <Box mt={theme.dimensions.condensedMarginBetween}>\n            <VAIcon name={iconName} fill={theme.colors.icon.chevronCollapsible} width={16} height={10} />\n          </Box>\n        )}\n      </Box>\n    )\n\n    if (hideArrow) {\n      return <Box {...testIdProps(testID || '')}>{data}</Box>\n    }\n\n    return (\n      <Pressable {...pressableProps} {...testIdProps(testID || '')} ref={headerRef}>\n        {data}\n      </Pressable>\n    )\n  }\n\n  const leftBorderProps = alertBorder\n    ? {\n        borderLeftWidth: theme.dimensions.alertBorderWidth,\n        borderLeftColor: alertBorder,\n      }\n    : {}\n\n  const boxProps: BoxProps = {\n    ...leftBorderProps,\n    borderBottomColor: 'primary',\n    borderBottomWidth: theme.dimensions.borderWidth,\n  }\n\n  return (\n    <Box {...boxProps} {...testIdProps('accordion-wrapper', true)} importantForAccessibility={'no'}>\n      <TextArea noBorder={noBorder}>\n        {renderHeader()}\n        {!expanded && collapsedContent}\n        {expanded && expandedContent}\n        {children}\n      </TextArea>\n    </Box>\n  )\n}\n\nexport default AccordionCollapsible\n",mdxType:"ComponentTopInfo"}))}h.isMDXComponent=!0}}]);