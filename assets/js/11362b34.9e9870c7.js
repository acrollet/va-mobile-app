"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2037],{38909:function(e,n,t){t.d(n,{Z:function(){return d}});var o=t(67294),r=t(19055),s=t(26396),i=t(58215),l=t(82224),a=t(36005),c=function(e){var n=e.props;return n?o.createElement(o.Fragment,null,a.ZP.isEmpty(n)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(n).map((function(e){var t;return o.createElement("tr",{key:e},o.createElement("td",null,o.createElement("code",null,e)),o.createElement("td",{style:{minWidth:200}},null==(t=n[e].type)?void 0:t.name),o.createElement("td",null,n[e].defaultValue&&n[e].defaultValue.value.toString()),o.createElement("td",null,n[e].required?"Yes":"No"),o.createElement("td",null,n[e].description))}))))):null};function d(e){var n=(0,l.N)(e.componentName)[0],t=n.description,a=n.displayName,d=n.props,m="How to use the "+a+" component",p="Full code for the "+a+" component";return o.createElement(o.Fragment,null,t,o.createElement("br",null),o.createElement("br",null),o.createElement(s.Z,null,o.createElement(i.Z,{value:"props",label:"Properties"},o.createElement(c,{props:d})),o.createElement(i.Z,{value:"example",label:"Example"},e.example&&o.createElement(r.Z,{title:m,className:"language-tsx test"},e.example)),o.createElement(i.Z,{value:"code",label:"Source Code"},e.codeString&&o.createElement(r.Z,{title:p,className:"language-tsx"},e.codeString)),o.createElement(i.Z,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},32538:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return b},exampleString:function(){return p},frontMatter:function(){return a},metadata:function(){return d},toc:function(){return m}});var o=t(87462),r=t(63366),s=(t(67294),t(3905)),i=(t(19055),t(38909)),l=["components"],a={},c=void 0,d={unversionedId:"Engineering/FrontEnd/ComponentsSection/MultiTouchCard",id:"Engineering/FrontEnd/ComponentsSection/MultiTouchCard",title:"MultiTouchCard",description:"export const exampleString = `const middleTextLines: Array =",source:"@site/docs/Engineering/FrontEnd/ComponentsSection/MultiTouchCard.mdx",sourceDirName:"Engineering/FrontEnd/ComponentsSection",slug:"/Engineering/FrontEnd/ComponentsSection/MultiTouchCard",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/MultiTouchCard",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MessagesCountTag",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/MessagesCountTag"},next:{title:"NavigationTabBar",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/NavigationTabBar"}},m=[],p="const middleTextLines: Array<TextLine> =\n[\n  {\n    text: 'line 1',\n    variant: 'MobileBodyBold'\n  },\n]\n\nconst bottomText: Array<TextLine> = [{ text: 'bottom line 1', variant: 'MobileBodyBold' }]\n\nconst props: MultiTouchCardProps = {\n    topText: 'top part',\n    topTextColor: 'primaryContrast',\n    a11yValue: 'Prescription 1 of 1',\n    topA11yHint: 'Review status definition',\n    topIconColor: 'infoIconContrast',\n    middleContent: <TextLines listOfText={middleTextLines} />,\n    middleA11yHint: 'Review prescription details',\n    topBackgroundColor: 'completedPhase',\n    bottomContent: <TextLines listOfText={bottomText} />,\n    bottomA11yHint: 'Review tracking details',\n}\n\n<MultiTouchCard {...props} />",u={toc:m,exampleString:p};function b(e){var n=e.components,t=(0,r.Z)(e,l);return(0,s.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,s.kt)(i.Z,{componentName:"MultiTouchCard",example:p,codeString:"import { Pressable, PressableProps } from 'react-native'\nimport React, { FC, ReactElement, useState } from 'react'\n\nimport { ButtonDecorator } from './BaseListItem'\nimport { VAButtonTextColors, VAIconColors, VATextColors } from 'styles/theme'\nimport { useTheme } from '../utils/hooks'\nimport Box, { BackgroundVariant, BoxProps } from './Box'\nimport TextView, { TextViewProps } from './TextView'\nimport VAIcon, { VAIconProps } from './VAIcon'\n\nexport type MultiTouchCardProps = {\n  /** called when the top button is pressed */\n  topOnPress?: () => void\n  /** Text to display in the top button */\n  topText?: string\n  /** color of the text in the top bar */\n  topTextColor?: keyof VATextColors | keyof VAButtonTextColors\n  /** background color of the top button */\n  topBackgroundColor?: BackgroundVariant\n  /** color of the icon if necessary to contrast the background */\n  topIconColor?: keyof VAIconColors\n  /** accessibility value used by all three buttons */\n  a11yValue?: string\n  /** hint for the top button action */\n  topA11yHint?: string\n  /** called when the middle button is pressed */\n  middleOnPress?: () => void\n  /** hint for the middle button action */\n  middleA11yHint?: string\n  /** content to display in the middle button */\n  middleContent: ReactElement\n  /** called when the bottom button is pressed */\n  bottomOnPress?: () => void\n  /** content to display in the bottom button */\n  bottomContent?: ReactElement\n  /** hint for the bottom button action */\n  bottomA11yHint?: string\n}\n\nconst MultiTouchCard: FC<MultiTouchCardProps> = ({\n  topText,\n  topTextColor,\n  topBackgroundColor,\n  a11yValue,\n  topA11yHint,\n  topIconColor,\n  topOnPress,\n  middleContent,\n  middleA11yHint,\n  middleOnPress,\n  bottomContent,\n  bottomOnPress,\n  bottomA11yHint,\n}) => {\n  const theme = useTheme()\n  const [isPressed, setIsPressed] = useState(false)\n\n  const _onPressIn = (): void => {\n    setIsPressed(true)\n  }\n\n  const _onPressOut = (): void => {\n    setIsPressed(false)\n  }\n\n  const hasBottomContent = !!bottomContent\n  const hasTopContent = !!topText\n\n  const background = 'list'\n  const activeBackground = 'listActive'\n\n  const topPressableProps: PressableProps = {\n    onPress: topOnPress,\n    accessible: true,\n    accessibilityRole: 'button',\n    accessibilityValue: { text: a11yValue },\n    accessibilityHint: topA11yHint,\n  }\n\n  const topTextProps: TextViewProps = topTextColor\n    ? {\n        color: topTextColor,\n      }\n    : {}\n\n  const topBoxProps: BoxProps = {\n    backgroundColor: topBackgroundColor ? topBackgroundColor : background,\n    py: theme.dimensions.buttonPadding,\n    px: theme.dimensions.gutter,\n    borderBottomWidth: topBackgroundColor ? 0 : theme.dimensions.borderWidth,\n    borderColor: 'primary',\n    borderStyle: 'solid',\n    display: 'flex',\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    borderRadiusTop: 8,\n  }\n\n  const topIcon: VAIconProps = {\n    name: 'InfoIcon',\n    fill: topIconColor || 'infoIcon',\n    height: 16,\n    width: 16,\n  }\n\n  const middlePressableProps: PressableProps = {\n    onPress: middleOnPress,\n    onPressIn: _onPressIn,\n    onPressOut: _onPressOut,\n    accessible: true,\n    accessibilityRole: 'button',\n    accessibilityValue: { text: a11yValue },\n    accessibilityHint: middleA11yHint,\n  }\n\n  const middleBoxProps: BoxProps = {\n    width: '100%',\n    minHeight: theme.dimensions.touchableMinHeight,\n    py: theme.dimensions.buttonPadding,\n    px: theme.dimensions.gutter,\n    borderBottomWidth: hasBottomContent ? theme.dimensions.borderWidth : 0,\n    borderColor: 'primary',\n    borderStyle: 'solid',\n    justifyContent: 'space-between',\n    flexDirection: 'row',\n    alignItems: 'center',\n    backgroundColor: isPressed ? activeBackground : background,\n    borderRadiusTop: hasTopContent ? 0 : 8,\n    borderRadiusBottom: hasBottomContent ? 0 : 8,\n  }\n\n  const bottomPressableProps: PressableProps = {\n    onPress: bottomOnPress,\n    accessible: true,\n    accessibilityRole: 'button',\n    accessibilityValue: { text: a11yValue },\n    accessibilityHint: bottomA11yHint,\n  }\n\n  const bottomBoxProps: BoxProps = {\n    py: theme.dimensions.buttonPadding,\n    px: theme.dimensions.gutter,\n    backgroundColor: background,\n    borderRadiusBottom: 8,\n  }\n\n  return (\n    <>\n      {hasTopContent && (\n        <Pressable {...topPressableProps}>\n          <Box {...topBoxProps}>\n            <TextView {...topTextProps}>{topText}</TextView>\n            <Box>\n              <VAIcon {...topIcon} />\n            </Box>\n          </Box>\n        </Pressable>\n      )}\n      <Pressable {...middlePressableProps}>\n        <Box {...middleBoxProps}>\n          {middleContent}\n          <Box ml={theme.dimensions.listItemDecoratorMarginLeft}>\n            <ButtonDecorator />\n          </Box>\n        </Box>\n      </Pressable>\n      {hasBottomContent && (\n        <Pressable {...bottomPressableProps}>\n          <Box {...bottomBoxProps}>{bottomContent}</Box>\n        </Pressable>\n      )}\n    </>\n  )\n}\n\nexport default MultiTouchCard\n",mdxType:"ComponentTopInfo"}))}b.isMDXComponent=!0}}]);