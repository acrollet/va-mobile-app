"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7375],{38909:function(e,t,n){n.d(t,{Z:function(){return d}});var i=n(67294),o=n(19055),r=n(26396),a=n(58215),c=n(82224),l=n(36005),s=function(e){var t=e.props;return t?i.createElement(i.Fragment,null,l.ZP.isEmpty(t)?i.createElement("pre",{className:"preText"},"This component does not have props defined"):i.createElement("table",null,i.createElement("thead",null,i.createElement("tr",null,i.createElement("th",null,"Name"),i.createElement("th",null,"Type"),i.createElement("th",null,"Default Value"),i.createElement("th",null,"Required"),i.createElement("th",null,"Description"))),i.createElement("tbody",null,Object.keys(t).map((function(e){var n;return i.createElement("tr",{key:e},i.createElement("td",null,i.createElement("code",null,e)),i.createElement("td",{style:{minWidth:200}},null==(n=t[e].type)?void 0:n.name),i.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),i.createElement("td",null,t[e].required?"Yes":"No"),i.createElement("td",null,t[e].description))}))))):null};function d(e){var t=(0,c.N)(e.componentName)[0],n=t.description,l=t.displayName,d=t.props,u="How to use the "+l+" component",p="Full code for the "+l+" component";return i.createElement(i.Fragment,null,n,i.createElement("br",null),i.createElement("br",null),i.createElement(r.Z,null,i.createElement(a.Z,{value:"props",label:"Properties"},i.createElement(s,{props:d})),i.createElement(a.Z,{value:"example",label:"Example"},e.example&&i.createElement(o.Z,{title:u,className:"language-tsx test"},e.example)),i.createElement(a.Z,{value:"code",label:"Source Code"},e.codeString&&i.createElement(o.Z,{title:p,className:"language-tsx"},e.codeString)),i.createElement(a.Z,{value:"accessibility",label:"Accessibility"},i.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},67454:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return s},default:function(){return g},exampleString:function(){return p},frontMatter:function(){return l},metadata:function(){return d},toc:function(){return u}});var i=n(87462),o=n(63366),r=(n(67294),n(3905)),a=(n(19055),n(38909)),c=["components"],l={},s=void 0,d={unversionedId:"Engineering/FrontEnd/ComponentsSection/Uncategorized/NotificationManger",id:"Engineering/FrontEnd/ComponentsSection/Uncategorized/NotificationManger",title:"NotificationManger",description:"export const exampleString =`return (",source:"@site/docs/Engineering/FrontEnd/ComponentsSection/Uncategorized/NotificationManger.mdx",sourceDirName:"Engineering/FrontEnd/ComponentsSection/Uncategorized",slug:"/Engineering/FrontEnd/ComponentsSection/Uncategorized/NotificationManger",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/Uncategorized/NotificationManger",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CollapsibleView",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/Uncategorized/CollapsibleView"},next:{title:"Switch",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/Uncategorized/Switch"}},u=[],p='return (\n    <ActionSheetProvider>\n      <ThemeProvider theme={theme}>\n        <Provider store={store}>\n          <I18nextProvider i18n={i18n}>\n            <NavigationContainer ref={navigationRef} onReady={navOnReady} onStateChange={onNavStateChange}>\n              <NotificationManger>\n                <SafeAreaProvider>\n                  <StatusBar barStyle="light-content" backgroundColor={theme.colors.icon.active} />\n                  <AuthGuard />\n                </SafeAreaProvider>\n              </NotificationManger>\n            </NavigationContainer>\n          </I18nextProvider>\n        </Provider>\n      </ThemeProvider>\n    </ActionSheetProvider>\n  )',m={toc:u,exampleString:p};function g(e){var t=e.components,n=(0,o.Z)(e,c);return(0,r.kt)("wrapper",(0,i.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(a.Z,{componentName:"NotificationManger",example:p,codeString:"import { AuthState } from 'store/slices'\nimport { NotificationBackgroundFetchResult, Notifications } from 'react-native-notifications'\nimport { RootState } from 'store'\nimport { View } from 'react-native'\nimport { registerDevice } from 'store/slices/notificationSlice'\nimport { useAppDispatch } from 'utils/hooks'\nimport { useSelector } from 'react-redux'\nimport React, { FC, useEffect, useState } from 'react'\n\n/**\n * notification manager component to handle all push logic\n */\nconst NotificationManger: FC = ({ children }) => {\n  const { loggedIn } = useSelector<RootState, AuthState>((state) => state.auth)\n  const dispatch = useAppDispatch()\n  const [eventsRegistered, setEventsRegistered] = useState(false)\n  useEffect(() => {\n    const register = () => {\n      Notifications.events().registerRemoteNotificationsRegistered((event) => {\n        console.debug('Device Token Received', event.deviceToken)\n        dispatch(registerDevice(event.deviceToken))\n      })\n      Notifications.events().registerRemoteNotificationsRegistrationFailed((event) => {\n        //TODO: Log this error in crashlytics?\n        console.error(event)\n        dispatch(registerDevice())\n      })\n      Notifications.registerRemoteNotifications()\n    }\n\n    if (loggedIn) {\n      register()\n    }\n  }, [dispatch, loggedIn])\n\n  const registerNotificationEvents = () => {\n    // Register callbacks for notifications that happen when the app is in the foreground\n    Notifications.events().registerNotificationReceivedForeground((notification, completion) => {\n      console.debug('Notification Received - Foreground', notification)\n      // Calling completion on iOS with `alert: true` will present the native iOS inApp notification.\n      completion({ alert: true, sound: true, badge: true })\n    })\n\n    // Register callback for opened notifications\n    Notifications.events().registerNotificationOpened((notification, completion) => {\n      /** this should be logged in firebase automatically. Anything here should be actions the app takes when it\n       * opens like deep linking, etc\n       */\n      console.debug('Notification opened by device user', notification)\n      console.debug(`Notification opened with an action identifier: ${notification.identifier}`)\n      completion()\n    })\n\n    // Register callbacks for notifications that happen when the app is in the background\n    Notifications.events().registerNotificationReceivedBackground((notification, completion) => {\n      console.debug('Notification Received - Background', notification)\n      // Calling completion on iOS with `alert: true` will present the native iOS inApp notification.\n      completion(NotificationBackgroundFetchResult.NEW_DATA)\n    })\n\n    // Callback in case there is need to do something with initial notification before it goes to system tray\n    Notifications.getInitialNotification()\n      .then((notification) => {\n        console.debug('Initial notification was:', notification || 'N/A')\n      })\n      .catch((err) => console.error('getInitialNotification() failed', err))\n  }\n\n  if (!eventsRegistered) {\n    registerNotificationEvents()\n    setEventsRegistered(true)\n  }\n\n  const s = { flex: 1 }\n  return <View style={s}>{children}</View>\n}\n\nexport default NotificationManger\n",mdxType:"ComponentTopInfo"}))}g.isMDXComponent=!0}}]);