"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7906],{2644:function(n,e,o){o.r(e),o.d(e,{contentTitle:function(){return c},default:function(){return u},exampleString:function(){return g},frontMatter:function(){return p},metadata:function(){return d},toc:function(){return l}});var t=o(7462),i=o(3366),r=(o(7294),o(3905)),a=(o(9055),o(8909)),s=["components"],p={},c=void 0,d={unversionedId:"Engineering/FrontEnd/ComponentsSection/Pagination",id:"Engineering/FrontEnd/ComponentsSection/Pagination",title:"Pagination",description:"",source:"@site/docs/Engineering/FrontEnd/ComponentsSection/Pagination.mdx",sourceDirName:"Engineering/FrontEnd/ComponentsSection",slug:"/Engineering/FrontEnd/ComponentsSection/Pagination",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/Pagination",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"NotificationManger",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/NotificationManger"},next:{title:"SaveButton",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/SaveButton"}},l=[],g="<Pagination page={1} onNext={() => {}} onPrev={() => {}} totalEntries={12} pageSize={10} />",m={toc:l,exampleString:g};function u(n){var e=n.components,o=(0,i.Z)(n,s);return(0,r.kt)("wrapper",(0,t.Z)({},m,o,{components:e,mdxType:"MDXLayout"}),(0,r.kt)(a.Z,{componentName:"Pagination",example:g,codeString:"import { Pressable, PressableProps } from 'react-native'\nimport React, { FC } from 'react'\n\nimport { NAMESPACE } from 'constants/namespaces'\nimport { testIdProps } from 'utils/accessibility'\nimport { useTheme, useTranslation } from 'utils/hooks'\nimport Box, { BoxProps } from './Box'\nimport TextView from './TextView'\nimport VAIcon, { VAIconProps } from './VAIcon'\n\nexport type PaginationProps = {\n  /** page number */\n  page: number\n  /** total number of items */\n  totalEntries: number\n  /** pageSize */\n  pageSize: number\n  /** function to be called when previous is selected */\n  onPrev: () => void\n  /** function to be called when next is selected */\n  onNext: () => void\n}\n\ntype PaginationArrowProps = {\n  /** function called when pressed */\n  onPress: () => void\n  /** optional accessibility hint */\n  a11yHint?: string\n  /** whether or not this button is disabled */\n  disabled: boolean\n  /** test id */\n  testID: string\n  /** props for icon */\n  iconProps: VAIconProps\n}\n\nexport const PaginationArrow: FC<PaginationArrowProps> = ({ onPress, a11yHint, iconProps, testID, disabled }) => {\n  const theme = useTheme()\n\n  const pressableProps: PressableProps = {\n    onPress: onPress,\n    accessibilityRole: 'link',\n    disabled,\n    accessible: true,\n    accessibilityHint: a11yHint,\n    accessibilityState: disabled ? { disabled: true } : {},\n  }\n\n  const boxProps: BoxProps = {\n    backgroundColor: disabled ? 'buttonSecondaryDisabled' : 'buttonPrimary',\n    minHeight: theme.dimensions.touchableMinHeight,\n    p: theme.dimensions.paginationButtonPadding,\n    borderRadius: 5,\n  }\n  return (\n    <Pressable {...pressableProps} {...testIdProps(testID)}>\n      <Box {...boxProps}>\n        <VAIcon fill={theme.colors.icon.pagination} width={16} height={16} preventScaling={true} {...iconProps} />\n      </Box>\n    </Pressable>\n  )\n}\n/**A common component for showing pagination on the page. Displays previous arrow, next arrow, and copy message based on current page and item. */\nconst Pagination: FC<PaginationProps> = ({ page, pageSize, totalEntries, onPrev, onNext }) => {\n  const theme = useTheme()\n  const t = useTranslation(NAMESPACE.COMMON)\n\n  const boxProps: BoxProps = {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    width: '100%',\n    minHeight: theme.dimensions.touchableMinHeight,\n  }\n\n  const previousProps: PaginationArrowProps = {\n    onPress: onPrev,\n    testID: 'previous-page',\n    a11yHint: t('pagination.previous'),\n    iconProps: { name: 'ArrowLeft', fill: theme.colors.icon.pagination },\n    disabled: page === 1,\n  }\n\n  const nextProps: PaginationArrowProps = {\n    onPress: onNext,\n    testID: 'next-page',\n    a11yHint: t('pagination.next'),\n    iconProps: { name: 'ArrowRight', fill: theme.colors.icon.pagination },\n    disabled: page * pageSize >= totalEntries,\n  }\n  const beginIdx = (page - 1) * pageSize + 1\n  let endIdx = page * pageSize\n  // if more than total entries then calculate actual index\n  if (endIdx > totalEntries) {\n    endIdx = endIdx - (endIdx - totalEntries)\n  }\n\n  if (totalEntries <= pageSize) {\n    return <></>\n  }\n\n  return (\n    <Box {...boxProps}>\n      <PaginationArrow {...previousProps} />\n      <TextView flex={1} variant={'MobileBody'} px={theme.dimensions.buttonPadding} textAlign={'center'}>\n        {t('pagination.info', { beginIdx, endIdx, totalEntries })}\n      </TextView>\n      <PaginationArrow {...nextProps} />\n    </Box>\n  )\n}\n\nexport default Pagination\n",mdxType:"ComponentTopInfo"}))}u.isMDXComponent=!0}}]);