"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8004],{7782:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return c},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return x},exampleString:function(){return m},default:function(){return u}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),l=(n(9055),n(2809)),s=n(8909),a=["components"],c={},d=void 0,p={unversionedId:"FrontEnd/ComponentsSection/AlertBox",id:"FrontEnd/ComponentsSection/AlertBox",isDocsHomePage:!1,title:"AlertBox",description:"export const exampleString = `<AlertBox",source:"@site/docs/FrontEnd/ComponentsSection/AlertBox.mdx",sourceDirName:"FrontEnd/ComponentsSection",slug:"/FrontEnd/ComponentsSection/AlertBox",permalink:"/va-mobile-app/docs/FrontEnd/ComponentsSection/AlertBox",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"AccordionCollapsible",permalink:"/va-mobile-app/docs/FrontEnd/ComponentsSection/AccordionCollapsible"},next:{title:"AppVersionAndBuild",permalink:"/va-mobile-app/docs/FrontEnd/ComponentsSection/AppVersionAndBuild"}},x=[],m="<AlertBox \ntitle={'alertTitle'} \ntext={'alertText'} \ntextA11yLabel={'alertTextA11yLabel'} \nborder={'error'}\nbackground={'noCardBackground'} />",b={toc:x,exampleString:m};function u(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},b,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(s.Z,{componentName:"AlertBox",example:m,codeString:l.Z,mdxType:"ComponentTopInfo"}))}u.isMDXComponent=!0},2809:function(e,t){t.Z="import { AccessibilityRole } from 'react-native'\nimport React, { FC } from 'react'\n\nimport { Box, BoxProps, TextView } from './index'\nimport { VAAlertBoxColors, VABorderColors } from 'styles/theme'\nimport { testIdProps } from 'utils/accessibility'\nimport { useTheme } from 'utils/hooks'\n\nexport type AlertBoxProps = {\n  /** color of the border */\n  border: keyof VABorderColors\n  /** color of the background */\n  background: keyof VAAlertBoxColors\n  /** body of the alert */\n  text?: string\n  /** optional bolded title text */\n  title?: string\n  /** optional accessibility label for the text */\n  textA11yLabel?: string\n  /** optional accessibility label for the title */\n  titleA11yLabel?: string\n  /** optional accessibility role for the title */\n  titleRole?: AccessibilityRole\n}\n\n/**\n * Displays content in a box styled as an alert\n */\nconst AlertBox: FC<AlertBoxProps> = ({ border, background, children, title, text, textA11yLabel, titleA11yLabel, titleRole }) => {\n  const theme = useTheme()\n\n  const boxProps: BoxProps = {\n    backgroundColor: background,\n    borderLeftWidth: theme.dimensions.alertBorderWidth,\n    borderLeftColor: border,\n    py: theme.dimensions.alertPaddingY,\n    px: theme.dimensions.alertPaddingX,\n  }\n\n  const titleAccessibilityRole = titleRole ? titleRole : text || children ? 'header' : undefined\n\n  return (\n    <Box {...boxProps}>\n      {title && (\n        <Box {...testIdProps(titleA11yLabel || title)} accessibilityRole={titleAccessibilityRole} accessible={true}>\n          <TextView variant=\"MobileBodyBold\" mb={text ? theme.dimensions.standardMarginBetween : 0}>\n            {title}\n          </TextView>\n        </Box>\n      )}\n      {text && (\n        <Box accessible={true}>\n          <TextView {...testIdProps(textA11yLabel || text)} variant=\"MobileBody\">\n            {text}\n          </TextView>\n        </Box>\n      )}\n      {children}\n    </Box>\n  )\n}\n\nexport default AlertBox\n"}}]);