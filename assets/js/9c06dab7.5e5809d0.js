"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[4943],{32666:(e,r,n)=>{n.d(r,{Z:()=>c});var t=n(67294),o=n(97405),a=n(22808),s=n(30433),l=n(41284),i=n(36005);const m=e=>{let{props:r}=e;return r?t.createElement(t.Fragment,null,i.ZP.isEmpty(r)?t.createElement("pre",{className:"preText"},"This component does not have props defined"):t.createElement("table",null,t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,"Name"),t.createElement("th",null,"Type"),t.createElement("th",null,"Default Value"),t.createElement("th",null,"Required"),t.createElement("th",null,"Description"))),t.createElement("tbody",null,Object.keys(r).map((e=>t.createElement("tr",{key:e},t.createElement("td",null,t.createElement("code",null,e)),t.createElement("td",{style:{minWidth:200}},r[e].type?.name),t.createElement("td",null,r[e].defaultValue&&r[e].defaultValue.value.toString()),t.createElement("td",null,r[e].required?"Yes":"No"),t.createElement("td",null,r[e].description))))))):null};function c(e){const r=(0,l.N)(e.componentName),{description:n,displayName:i,props:c}=r[0],p=`How to use the ${i} component`,E=`Full code for the ${i} component`;return t.createElement(t.Fragment,null,n,t.createElement("br",null),t.createElement("br",null),t.createElement(a.Z,null,t.createElement(s.Z,{value:"props",label:"Properties"},t.createElement(m,{props:c})),t.createElement(s.Z,{value:"example",label:"Example"},e.example&&t.createElement(o.Z,{title:p,className:"language-tsx test"},e.example)),t.createElement(s.Z,{value:"code",label:"Source Code"},e.codeString&&t.createElement(o.Z,{title:E,className:"language-tsx"},e.codeString)),t.createElement(s.Z,{value:"accessibility",label:"Accessibility"},t.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},41284:(e,r,n)=>{n.d(r,{N:()=>o});var t=n(52426);const o=e=>(0,t.ZP)()["docusaurus-plugin-react-docgen-typescript"].default.filter((r=>r.displayName===e))},26115:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>c,contentTitle:()=>i,default:()=>C,exampleString:()=>E,frontMatter:()=>l,metadata:()=>m,toc:()=>p});var t=n(87462),o=(n(67294),n(3905));n(8209),n(97405);const a="import { useSelector } from 'react-redux'\nimport { useTranslation } from 'react-i18next'\nimport React, { FC } from 'react'\n\nimport { CallHelpCenter, DowntimeError, NetworkConnectionError } from 'components'\nimport { CommonErrorTypesConstants } from 'constants/errors'\nimport { DowntimeScreenIDToFeature, ScreenIDTypes } from 'store/api/types'\nimport { ErrorsState } from 'store/slices'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { RootState } from 'store'\nimport { useDowntime } from 'utils/hooks'\n\nexport type ErrorComponentProps = {\n  /**The screen id for the screen that has the errors*/\n  screenID: ScreenIDTypes\n  /** optional function called when the Try again button is pressed */\n  onTryAgain?: () => void\n  /**Override the feature name in the event that a feature happens to share the same api error(ex:contact information and personal information) */\n  overrideFeatureName?: string\n}\n\n/**Main error handling component. This component will show the proper screen according to the type of error.*/\nconst ErrorComponent: FC<ErrorComponentProps> = (props) => {\n  const { errorsByScreenID, tryAgain: storeTryAgain } = useSelector<RootState, ErrorsState>((state) => state.errors)\n  const { t } = useTranslation([NAMESPACE.COMMON, NAMESPACE.HEALTH])\n  const isInDowntime = useDowntime(DowntimeScreenIDToFeature[props.screenID])\n\n  const getSpecificErrorComponent: FC<ErrorComponentProps> = ({ onTryAgain, screenID, overrideFeatureName }) => {\n    const tryAgain = onTryAgain ? onTryAgain : storeTryAgain\n    const errorType = errorsByScreenID[screenID] || ''\n\n    if (isInDowntime) {\n      return <DowntimeError screenID={screenID} overrideFeatureName={overrideFeatureName} />\n    }\n    // check which specific error occurred and return the corresponding error element\n    switch (errorType) {\n      case CommonErrorTypesConstants.NETWORK_CONNECTION_ERROR:\n        return <NetworkConnectionError onTryAgain={tryAgain} />\n      case CommonErrorTypesConstants.APP_LEVEL_ERROR:\n        return <CallHelpCenter />\n      case CommonErrorTypesConstants.APP_LEVEL_ERROR_WITH_REFRESH:\n        return <CallHelpCenter onTryAgain={tryAgain} />\n      case CommonErrorTypesConstants.APP_LEVEL_ERROR_HEALTH_LOAD:\n        return (\n          <CallHelpCenter\n            onTryAgain={tryAgain}\n            errorText={t('health:secureMessaging.sendError.ifTheAppStill')}\n            errorA11y={t('health:secureMessaging.sendError.ifTheAppStill.a11y')}\n            callPhone={t('common:8773270022.displayText')}\n          />\n        )\n      case CommonErrorTypesConstants.APP_LEVEL_ERROR_DISABILITY_RATING:\n        return (\n          <CallHelpCenter\n            titleText={t('common:disabilityRating.errorTitle')}\n            titleA11yHint={t('common:disabilityRating.errorTitleA11y')}\n            callPhone={t('common:disabilityRating.errorPhoneNumber')}\n          />\n        )\n      case CommonErrorTypesConstants.APP_LEVEL_ERROR_VACCINE:\n        return <CallHelpCenter onTryAgain={tryAgain} titleText={t('common:errors.callHelpCenter.vaAppNotWorking')} callPhone={t('common:8006982411.displayText')} />\n      default:\n        return <CallHelpCenter onTryAgain={tryAgain} />\n    }\n  }\n\n  return getSpecificErrorComponent(props)\n}\n\nexport default ErrorComponent\n";var s=n(32666);const l={},i=void 0,m={unversionedId:"Flagship design library/Components/Errors/ErrorComponent",id:"Flagship design library/Components/Errors/ErrorComponent",title:"ErrorComponent",description:"",source:"@site/docs/Flagship design library/Components/Errors/ErrorComponent.mdx",sourceDirName:"Flagship design library/Components/Errors",slug:"/Flagship design library/Components/Errors/ErrorComponent",permalink:"/va-mobile-app/docs/Flagship design library/Components/Errors/ErrorComponent",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DowntimeError",permalink:"/va-mobile-app/docs/Flagship design library/Components/Errors/DowntimeError"},next:{title:"NetworkConnectionError",permalink:"/va-mobile-app/docs/Flagship design library/Components/Errors/NetworkConnectionError"}},c={},p=[],E="<ErrorComponent screenID={ScreenIDTypesConstants.APPEAL_DETAILS_SCREEN_ID} />",u={toc:p,exampleString:E},d="wrapper";function C(e){let{components:r,...n}=e;return(0,o.kt)(d,(0,t.Z)({},u,n,{components:r,mdxType:"MDXLayout"}),(0,o.kt)(s.Z,{componentName:"ErrorComponent",example:E,codeString:a,mdxType:"ComponentTopInfo"}))}C.isMDXComponent=!0}}]);