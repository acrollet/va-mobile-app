"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[9923],{38909:(e,t,n)=>{n.d(t,{Z:()=>u});var o=n(67294),r=n(19055),l=n(26396),a=n(58215),s=n(82224),i=n(36005);const p=e=>{let{props:t}=e;return t?o.createElement(o.Fragment,null,i.ZP.isEmpty(t)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(t).map((e=>o.createElement("tr",{key:e},o.createElement("td",null,o.createElement("code",null,e)),o.createElement("td",{style:{minWidth:200}},t[e].type?.name),o.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),o.createElement("td",null,t[e].required?"Yes":"No"),o.createElement("td",null,t[e].description))))))):null};function u(e){const t=(0,s.N)(e.componentName),{description:n,displayName:i,props:u}=t[0],c=`How to use the ${i} component`,d=`Full code for the ${i} component`;return o.createElement(o.Fragment,null,n,o.createElement("br",null),o.createElement("br",null),o.createElement(l.Z,null,o.createElement(a.Z,{value:"props",label:"Properties"},o.createElement(p,{props:u})),o.createElement(a.Z,{value:"example",label:"Example"},e.example&&o.createElement(r.Z,{title:c,className:"language-tsx test"},e.example)),o.createElement(a.Z,{value:"code",label:"Source Code"},e.codeString&&o.createElement(r.Z,{title:d,className:"language-tsx"},e.codeString)),o.createElement(a.Z,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},82224:(e,t,n)=>{n.d(t,{N:()=>r});var o=n(28084);const r=e=>(0,o.default)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},15913:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>i,default:()=>x,exampleString:()=>c,frontMatter:()=>s,metadata:()=>p,toc:()=>u});var o=n(87462),r=(n(67294),n(3905));n(95657),n(19055);const l="import { KeyboardTypeOptions, TextInput, TextInputProps } from 'react-native'\nimport { useTranslation } from 'react-i18next'\nimport React, { FC, ReactElement, RefObject, useEffect, useRef, useState } from 'react'\n\nimport { Box, BoxProps } from '../../index'\nimport { getInputBorderColor, getInputBorderWidth, getInputWrapperProps, removeInputErrorMessage, renderInputError, renderInputLabelSection } from './formFieldUtils'\nimport { isIOS } from 'utils/platform'\nimport { useTheme } from 'utils/hooks'\n\nexport type VATextInputTypes = 'none' | 'email' | 'phone'\n\nexport type VATextInputProps = {\n  /** Type of the input. Will determine the keyboard used */\n  inputType: VATextInputTypes\n  /** Initial value of the input. If blank it will show the placeholder */\n  value?: string\n  /** i18n key for the label */\n  labelKey?: string\n  /** Handle the change in input value */\n  onChange: (val: string) => void\n  /** Maximum length of the input */\n  maxLength?: number\n  /** Handle input once the user is done typing */\n  onEndEditing?: () => void\n  /** optional testID for the overall component */\n  testID?: string\n  /** optional ref value */\n  inputRef?: RefObject<TextInput>\n  /** optional boolean that displays required text next to label if set to true */\n  isRequiredField?: boolean\n  /** optional key for string to display underneath label */\n  helperTextKey?: string\n  /** optional callback to update the error message if there is an error */\n  setError?: (error?: string) => void\n  /** if this exists updates input styles to error state */\n  error?: string\n  /** optional boolean that when true displays a text area rather than a single line text input */\n  isTextArea?: boolean\n  /** optional boolean to set the cursor to the beginning of a string value */\n  setInputCursorToBeginning?: boolean\n}\n\n/**\n * Text input with a label\n */\nconst VATextInput: FC<VATextInputProps> = (props: VATextInputProps) => {\n  const {\n    inputType,\n    value,\n    labelKey,\n    onChange,\n    maxLength,\n    onEndEditing,\n    testID,\n    inputRef,\n    isRequiredField,\n    helperTextKey,\n    setError,\n    error,\n    isTextArea,\n    setInputCursorToBeginning,\n  } = props\n  const { t } = useTranslation()\n  const theme = useTheme()\n  const startTextPositon = { start: 0, end: 0 }\n  const [focusUpdated, setFocusUpdated] = useState(false)\n  const [isFocused, setIsFocused] = useState(false)\n  const [selection, setSelection] = useState<{ start: number; end?: number } | undefined>(setInputCursorToBeginning ? startTextPositon : undefined)\n  const ref = useRef<TextInput>(null)\n\n  useEffect(() => {\n    removeInputErrorMessage(isFocused, error, setError, focusUpdated, setFocusUpdated)\n  }, [isFocused, error, setError, focusUpdated])\n\n  let textContentType: 'emailAddress' | 'telephoneNumber' | 'none' = 'none'\n  let keyboardType: KeyboardTypeOptions = 'default'\n\n  switch (inputType) {\n    case 'email': {\n      textContentType = 'emailAddress'\n      keyboardType = 'email-address'\n      break\n    }\n    case 'phone': {\n      textContentType = 'telephoneNumber'\n      keyboardType = isIOS() ? 'number-pad' : 'numeric'\n      break\n    }\n  }\n\n  const onBlur = (): void => {\n    setIsFocused(false)\n    setFocusUpdated(true)\n  }\n\n  const onFocus = () => {\n    setIsFocused(true)\n    if (setInputCursorToBeginning) {\n      setSelection(undefined)\n    }\n  }\n\n  const inputBorderWidth = getInputBorderWidth(theme, error, isFocused)\n  const textAreaHeight = 201\n\n  const inputProps: TextInputProps = {\n    value: value,\n    textContentType,\n    keyboardType,\n    maxLength,\n    disableFullscreenUI: true,\n    placeholderTextColor: theme.colors.text.placeholder,\n    onChangeText: (newVal) => {\n      if ((newVal.length > 0 && keyboardType === 'number-pad') || keyboardType === 'numeric') {\n        onChange(newVal.replace(/\\D/g, ''))\n      } else {\n        onChange(newVal)\n      }\n    },\n    onEndEditing,\n    testID,\n    style: {\n      fontSize: theme.fontSizes.MobileBody.fontSize,\n      fontFamily: theme.fontFace.regular,\n      marginRight: 40,\n      color: isFocused ? theme.colors.text.inputFocused : theme.colors.text.input,\n      height: isTextArea ? textAreaHeight - inputBorderWidth * 2 : undefined,\n    },\n    onFocus,\n    onBlur,\n    selection,\n    multiline: isTextArea ? true : false,\n  }\n\n  const textAreaWrapperProps: BoxProps = {\n    backgroundColor: 'textBox',\n    height: textAreaHeight,\n    borderColor: getInputBorderColor(error, isFocused),\n    borderWidth: inputBorderWidth,\n    pl: 8,\n  }\n\n  const renderTextInput = (): ReactElement => {\n    const wrapperProps = isTextArea ? textAreaWrapperProps : getInputWrapperProps(theme, error, isFocused)\n\n    const textInputBox = (\n      <Box {...wrapperProps}>\n        <Box width=\"100%\">\n          <TextInput {...inputProps} ref={inputRef || ref} />\n        </Box>\n      </Box>\n    )\n\n    const content = (\n      <Box>\n        {labelKey && renderInputLabelSection(error, isRequiredField, labelKey, t, helperTextKey)}\n        {!!error && renderInputError(error)}\n        {textInputBox}\n      </Box>\n    )\n\n    return <Box>{content}</Box>\n  }\n\n  return renderTextInput()\n}\n\nexport default VATextInput\n";var a=n(38909);const s={},i=void 0,p={unversionedId:"UX/ComponentsSection/Selection and Input/Form Elements/VATextInput",id:"UX/ComponentsSection/Selection and Input/Form Elements/VATextInput",title:"VATextInput",description:"export const exampleString = `<VATextInput",source:"@site/docs/UX/ComponentsSection/Selection and Input/Form Elements/VATextInput.mdx",sourceDirName:"UX/ComponentsSection/Selection and Input/Form Elements",slug:"/UX/ComponentsSection/Selection and Input/Form Elements/VATextInput",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Selection and Input/Form Elements/VATextInput",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"VASelector",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Selection and Input/Form Elements/VASelector"},next:{title:"Tags",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Tags/"}},u=[],c="<VATextInput \ninputType={'email'} \nvalue={selected} \nonChange={(textValue) => { setSelected(textValue) }} \nisTextArea={false}/>",d={toc:u,exampleString:c},m="wrapper";function x(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(a.Z,{componentName:"VATextInput",example:c,codeString:l,mdxType:"ComponentTopInfo"}))}x.isMDXComponent=!0}}]);