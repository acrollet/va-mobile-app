"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3552],{32666:(e,t,n)=>{n.d(t,{Z:()=>c});var r=n(67294),o=n(97405),a=n(22808),l=n(30433),s=n(41284),i=n(36005);const m=e=>{let{props:t}=e;return t?r.createElement(r.Fragment,null,i.ZP.isEmpty(t)?r.createElement("pre",{className:"preText"},"This component does not have props defined"):r.createElement("table",null,r.createElement("thead",null,r.createElement("tr",null,r.createElement("th",null,"Name"),r.createElement("th",null,"Type"),r.createElement("th",null,"Default Value"),r.createElement("th",null,"Required"),r.createElement("th",null,"Description"))),r.createElement("tbody",null,Object.keys(t).map((e=>r.createElement("tr",{key:e},r.createElement("td",null,r.createElement("code",null,e)),r.createElement("td",{style:{minWidth:200}},t[e].type?.name),r.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),r.createElement("td",null,t[e].required?"Yes":"No"),r.createElement("td",null,t[e].description))))))):null};function c(e){const t=(0,s.N)(e.componentName),{description:n,displayName:i,props:c}=t[0],p=`How to use the ${i} component`,u=`Full code for the ${i} component`;return r.createElement(r.Fragment,null,n,r.createElement("br",null),r.createElement("br",null),r.createElement(a.Z,null,r.createElement(l.Z,{value:"props",label:"Properties"},r.createElement(m,{props:c})),r.createElement(l.Z,{value:"example",label:"Example"},e.example&&r.createElement(o.Z,{title:p,className:"language-tsx test"},e.example)),r.createElement(l.Z,{value:"code",label:"Source Code"},e.codeString&&r.createElement(o.Z,{title:u,className:"language-tsx"},e.codeString)),r.createElement(l.Z,{value:"accessibility",label:"Accessibility"},r.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},41284:(e,t,n)=>{n.d(t,{N:()=>o});var r=n(52426);const o=e=>(0,r.ZP)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},5567:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>f,exampleString:()=>u,frontMatter:()=>s,metadata:()=>m,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));n(8209),n(97405);const a="import { ViewStyle } from 'react-native'\nimport { useTranslation } from 'react-i18next'\nimport React, { FC } from 'react'\n\nimport { AlertBox, Box, VAScrollView } from 'components'\nimport { DowntimeScreenIDToFeature, ScreenIDTypes } from 'store/api/types'\nimport { ErrorsState } from 'store/slices'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { RootState } from 'store'\nimport { useSelector } from 'react-redux'\nimport { useTheme } from 'utils/hooks'\n\nexport type DowntimeErrorProps = {\n  /**The screen id for the screen that has the errors*/\n  screenID: ScreenIDTypes\n  /**Override the feature name in the event that a feature happens to share the same api error(ex:contact information and personal information) */\n  overrideFeatureName?: string\n}\n\n/**Common component to show an alert when the service is down*/\nconst DowntimeError: FC<DowntimeErrorProps> = ({ screenID, overrideFeatureName }) => {\n  const { t } = useTranslation(NAMESPACE.COMMON)\n  const theme = useTheme()\n\n  const scrollStyles: ViewStyle = {\n    justifyContent: 'center',\n  }\n\n  const containerStyles = {\n    mt: theme.dimensions.contentMarginTop,\n    mb: theme.dimensions.contentMarginBottom,\n  }\n  const { downtimeWindowsByFeature } = useSelector<RootState, ErrorsState>((state) => state.errors)\n  const feature = DowntimeScreenIDToFeature[screenID]\n  const featureName = overrideFeatureName ? overrideFeatureName : downtimeWindowsByFeature[feature]?.featureName\n  const endTime = downtimeWindowsByFeature[feature]?.endTime.toFormat('fff')\n\n  return (\n    <VAScrollView contentContainerStyle={scrollStyles}>\n      <Box justifyContent=\"center\" {...containerStyles}>\n        <AlertBox\n          title={t('downtime.title')}\n          titleA11yLabel={t('downtime.title')}\n          text={t('downtime.message', { featureName, endTime })}\n          textA11yLabel={t('downtime.message', { featureName, endTime })}\n          border=\"warning\"\n        />\n      </Box>\n    </VAScrollView>\n  )\n}\n\nexport default DowntimeError\n";var l=n(32666);const s={},i=void 0,m={unversionedId:"Flagship design library/Components/Errors/DowntimeError",id:"Flagship design library/Components/Errors/DowntimeError",title:"DowntimeError",description:"",source:"@site/docs/Flagship design library/Components/Errors/DowntimeError.mdx",sourceDirName:"Flagship design library/Components/Errors",slug:"/Flagship design library/Components/Errors/DowntimeError",permalink:"/va-mobile-app/docs/Flagship design library/Components/Errors/DowntimeError",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CallHelpCenter",permalink:"/va-mobile-app/docs/Flagship design library/Components/Errors/CallHelpCenter"},next:{title:"ErrorComponent",permalink:"/va-mobile-app/docs/Flagship design library/Components/Errors/ErrorComponent"}},c={},p=[],u="<DowntimeError screenID={screenID} />",d={toc:p,exampleString:u},E="wrapper";function f(e){let{components:t,...n}=e;return(0,o.kt)(E,(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)(l.Z,{componentName:"DowntimeError",example:u,codeString:a,mdxType:"ComponentTopInfo"}))}f.isMDXComponent=!0}}]);