"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1465],{38909:function(e,n,t){t.d(n,{Z:function(){return u}});var a=t(67294),o=t(19055),r=t(26396),i=t(58215),s=t(82224),l=t(36005),c=function(e){var n=e.props;return n?a.createElement(a.Fragment,null,l.ZP.isEmpty(n)?a.createElement("pre",{className:"preText"},"This component does not have props defined"):a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Name"),a.createElement("th",null,"Type"),a.createElement("th",null,"Default Value"),a.createElement("th",null,"Required"),a.createElement("th",null,"Description"))),a.createElement("tbody",null,Object.keys(n).map((function(e){var t;return a.createElement("tr",{key:e},a.createElement("td",null,a.createElement("code",null,e)),a.createElement("td",{style:{minWidth:200}},null==(t=n[e].type)?void 0:t.name),a.createElement("td",null,n[e].defaultValue&&n[e].defaultValue.value.toString()),a.createElement("td",null,n[e].required?"Yes":"No"),a.createElement("td",null,n[e].description))}))))):null};function u(e){var n=(0,s.N)(e.componentName)[0],t=n.description,l=n.displayName,u=n.props,m="How to use the "+l+" component",d="Full code for the "+l+" component";return a.createElement(a.Fragment,null,t,a.createElement("br",null),a.createElement("br",null),a.createElement(r.Z,null,a.createElement(i.Z,{value:"props",label:"Properties"},a.createElement(c,{props:u})),a.createElement(i.Z,{value:"example",label:"Example"},e.example&&a.createElement(o.Z,{title:m,className:"language-tsx test"},e.example)),a.createElement(i.Z,{value:"code",label:"Source Code"},e.codeString&&a.createElement(o.Z,{title:d,className:"language-tsx"},e.codeString)),a.createElement(i.Z,{value:"accessibility",label:"Accessibility"},a.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},82224:function(e,n,t){t.d(n,{N:function(){return o}});var a=t(28084),o=function(e){return(0,a.default)()["docusaurus-plugin-react-docgen-typescript"].default.filter((function(n){return n.displayName===e}))}},410:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return b},exampleString:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return m}});var a=t(87462),o=t(63366),r=(t(67294),t(3905)),i=(t(19055),t(38909)),s=["components"],l={},c=void 0,u={unversionedId:"Engineering/FrontEnd/ComponentsSection/Navigation/CarouselTabBar",id:"Engineering/FrontEnd/ComponentsSection/Navigation/CarouselTabBar",title:"CarouselTabBar",description:"export const exampleString = `<CarouselTabNav.Navigator",source:"@site/docs/Engineering/FrontEnd/ComponentsSection/Navigation/CarouselTabBar.mdx",sourceDirName:"Engineering/FrontEnd/ComponentsSection/Navigation",slug:"/Engineering/FrontEnd/ComponentsSection/Navigation/CarouselTabBar",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/Navigation/CarouselTabBar",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Carousel",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/Navigation/Carousel"},next:{title:"FocusedNavHeaderText",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/Navigation/FocusedNavHeaderText"}},m=[],d='<CarouselTabNav.Navigator \ntabBar={(props): \nReact.ReactNode => <CarouselTabBar {...props} \nonCarouselEnd={onCarouselEnd} \ntranslation={translation} \nscreenList={screenList} />}>\n    <CarouselTabNav.Screen \n    name="Main" \n    children={(): ReactElement => <CarouselStackComponent screenList={screenList} />} \n    options={{ headerShown: false }} />\n</CarouselTabNav.Navigator>',p={toc:m,exampleString:d};function b(e){var n=e.components,t=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(i.Z,{componentName:"CarouselTabBar",example:d,codeString:"import { Pressable } from 'react-native'\nimport React, { FC, ReactElement, useState } from 'react'\n\nimport { BottomTabNavigationEventMap } from '@react-navigation/bottom-tabs/lib/typescript/src/types'\nimport { NavigationHelpers, ParamListBase } from '@react-navigation/native'\nimport { SafeAreaView } from 'react-native-safe-area-context'\nimport { TFunction } from 'i18next'\nimport _ from 'underscore'\nimport styled from 'styled-components'\n\nimport { Box, BoxProps, TextView } from '../index'\nimport { CarouselScreen } from './Carousel'\nimport { a11yHintProp, testIdProps } from 'utils/accessibility'\nimport { themeFn } from 'utils/theme'\nimport { useTheme } from 'utils/hooks'\n\nconst StyledSafeAreaView = styled(SafeAreaView)`\n  background-color: ${themeFn((theme) => theme.colors.background.carousel)};\n`\n\nconst StyledPressable = styled(Pressable)`\n  min-height: ${themeFn((theme) => theme.dimensions.touchableMinHeight)}px;\n  justify-content: center;\n`\n\ntype CarouselTabBarProps = {\n  /** the tab navigators navigation helpers */\n  navigation: NavigationHelpers<ParamListBase, BottomTabNavigationEventMap>\n\n  /** called when the skip button is clicked or the user has gone through all the carousel components */\n  onCarouselEnd: () => void\n\n  /** useTranslations t function to translate the labels */\n  translation: TFunction\n\n  /** list of screens with the screen name and the component in each item */\n  screenList: Array<CarouselScreen>\n}\n\n/**A common component with the carousel tab bar content. Displays skip button, continue button, and a progress bar*/\nconst CarouselTabBar: FC<CarouselTabBarProps> = ({ navigation, onCarouselEnd, screenList, translation }) => {\n  const theme = useTheme()\n  const [currentScreenIndex, setCurrentScreenIndex] = useState(0)\n  const a11yHints = screenList[currentScreenIndex].a11yHints\n\n  const onContinue = (): void => {\n    const updatedIndex = currentScreenIndex + 1\n\n    if (updatedIndex === screenList.length) {\n      onCarouselEnd()\n      return\n    }\n\n    setCurrentScreenIndex(updatedIndex)\n    navigation.navigate(screenList[updatedIndex].name)\n  }\n\n  const goBack = (): void => {\n    const updatedIndex = currentScreenIndex - 1\n    setCurrentScreenIndex(updatedIndex)\n    navigation.navigate(screenList[updatedIndex].name)\n  }\n\n  const getProgressBar = (): ReactElement[] => {\n    return _.map(screenList, (screen, index) => {\n      const boxProps: BoxProps = {\n        width: 12,\n        height: 12,\n        borderRadius: 6,\n        opacity: index === currentScreenIndex ? 1 : 0.5,\n        m: 6,\n        backgroundColor: 'carouselTab',\n      }\n\n      return <Box {...boxProps} key={index} />\n    })\n  }\n\n  const goBackOrSkipBtn = () => {\n    let onPressCallback: TFunction\n    let buttonText: string\n    let allyHint: string | undefined\n\n    if (currentScreenIndex === 0) {\n      onPressCallback = onCarouselEnd\n      buttonText = 'common:skip'\n      allyHint = a11yHints?.skipHint\n    } else {\n      onPressCallback = goBack\n      buttonText = 'common:back'\n      allyHint = a11yHints?.backHint\n    }\n\n    return (\n      <StyledPressable onPress={onPressCallback} accessibilityRole=\"button\" {...testIdProps(translation(buttonText))} {...a11yHintProp(allyHint || '')}>\n        <TextView variant=\"MobileBody\" color=\"primaryContrast\" allowFontScaling={false} mr=\"auto\" selectable={false}>\n          {translation(buttonText)}\n        </TextView>\n      </StyledPressable>\n    )\n  }\n\n  const nextOrDoneBtn = () => {\n    let buttonText: string\n    let allyHint: string | undefined\n\n    if (currentScreenIndex === screenList.length - 1) {\n      buttonText = 'common:done'\n      allyHint = a11yHints?.doneHint\n    } else {\n      buttonText = 'common:next'\n      allyHint = a11yHints?.continueHint\n    }\n\n    return (\n      <StyledPressable onPress={onContinue} accessibilityRole=\"button\" {...testIdProps(translation(buttonText))} {...a11yHintProp(allyHint || '')}>\n        <TextView variant=\"MobileBodyBold\" color=\"primaryContrast\" allowFontScaling={false} ml=\"auto\" selectable={false}>\n          {translation(buttonText)}\n        </TextView>\n      </StyledPressable>\n    )\n  }\n\n  const progressBarContainerProps: BoxProps = {\n    flex: 1,\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center',\n    flexDirection: 'row',\n    accessibilityRole: 'progressbar',\n    accessible: true,\n    minHeight: theme.dimensions.touchableMinHeight,\n  }\n\n  return (\n    <StyledSafeAreaView edges={['bottom']}>\n      <Box display=\"flex\" flexDirection=\"row\" height={70} backgroundColor=\"carousel\" alignItems=\"center\" mx={theme.dimensions.gutter}>\n        <Box flex={1} display=\"flex\" justifyContent=\"center\">\n          {goBackOrSkipBtn()}\n        </Box>\n        <Box {...testIdProps(translation('common:carouselIndicators'))} {...a11yHintProp(a11yHints?.carouselIndicatorsHint || '')} {...progressBarContainerProps}>\n          {getProgressBar()}\n        </Box>\n        <Box flex={1} display=\"flex\" justifyContent=\"center\">\n          {nextOrDoneBtn()}\n        </Box>\n      </Box>\n    </StyledSafeAreaView>\n  )\n}\n\nexport default CarouselTabBar\n",mdxType:"ComponentTopInfo"}))}b.isMDXComponent=!0}}]);