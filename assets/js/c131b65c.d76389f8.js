"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3483],{32666:(e,n,o)=>{o.d(n,{Z:()=>m});var t=o(67294),s=o(97405),r=o(22808),i=o(30433),l=o(41284),a=o(36005);const c=e=>{let{props:n}=e;return n?t.createElement(t.Fragment,null,a.ZP.isEmpty(n)?t.createElement("pre",{className:"preText"},"This component does not have props defined"):t.createElement("table",null,t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,"Name"),t.createElement("th",null,"Type"),t.createElement("th",null,"Default Value"),t.createElement("th",null,"Required"),t.createElement("th",null,"Description"))),t.createElement("tbody",null,Object.keys(n).map((e=>t.createElement("tr",{key:e},t.createElement("td",null,t.createElement("code",null,e)),t.createElement("td",{style:{minWidth:200}},n[e].type?.name),t.createElement("td",null,n[e].defaultValue&&n[e].defaultValue.value.toString()),t.createElement("td",null,n[e].required?"Yes":"No"),t.createElement("td",null,n[e].description))))))):null};function m(e){const n=(0,l.N)(e.componentName),{description:o,displayName:a,props:m}=n[0],p=`How to use the ${a} component`,g=`Full code for the ${a} component`;return t.createElement(t.Fragment,null,o,t.createElement("br",null),t.createElement("br",null),t.createElement(r.Z,null,t.createElement(i.Z,{value:"props",label:"Properties"},t.createElement(c,{props:m})),t.createElement(i.Z,{value:"example",label:"Example"},e.example&&t.createElement(s.Z,{title:p,className:"language-tsx test"},e.example)),t.createElement(i.Z,{value:"code",label:"Source Code"},e.codeString&&t.createElement(s.Z,{title:g,className:"language-tsx"},e.codeString)),t.createElement(i.Z,{value:"accessibility",label:"Accessibility"},t.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},41284:(e,n,o)=>{o.d(n,{N:()=>s});var t=o(52426);const s=e=>(0,t.ZP)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},45740:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>m,contentTitle:()=>a,default:()=>f,exampleString:()=>g,frontMatter:()=>l,metadata:()=>c,toc:()=>p});var t=o(87462),s=(o(67294),o(3905));o(8209),o(97405);const r="import { AppState, AppStateStatus } from 'react-native'\nimport { SvgProps } from 'react-native-svg'\nimport { isFinite } from 'underscore'\nimport React, { FC, useEffect } from 'react'\n\nimport { AccessibilityState } from 'store/slices'\nimport { Box, BoxProps } from 'components'\nimport { RootState } from 'store'\nimport { VAIconColors, VATextColors } from 'styles/theme'\nimport { updateFontScale } from 'utils/accessibility'\nimport { useAppDispatch, useFontScale, useTheme } from 'utils/hooks'\nimport { useSelector } from 'react-redux'\n\n// See VAIcon function documentation below for guidance on adding new SVGs\n\n// Navigation\nimport BenefitsSelected from './svgs/navIcon/BenefitsSelected.svg'\nimport BenefitsUnselected from './svgs/navIcon/BenefitsUnselected.svg'\nimport HealthSelected from './svgs/navIcon/HealthSelected.svg'\nimport HealthUnselected from './svgs/navIcon/HealthUnselected.svg'\nimport HomeSelected from './svgs/navIcon/HomeSelected.svg'\nimport HomeUnselected from './svgs/navIcon/HomeUnselected.svg'\nimport PaymentsSelected from './svgs/navIcon/PaymentsSelected.svg'\nimport PaymentsUnselected from './svgs/navIcon/PaymentsUnselected.svg'\nimport ProfileSelected from './svgs/navIcon/ProfileSelected.svg'\n\n// Chevrons\nimport ChevronDown from './svgs/ChevronDown.svg'\nimport ChevronLeft from './svgs/ChevronLeft.svg'\nimport ChevronRight from './svgs/ChevronRight.svg'\nimport ChevronUp from './svgs/ChevronUp.svg'\n\n// Branch icons\nimport AirForce from './svgs/dodBranch/AirForce.svg'\nimport Army from './svgs/dodBranch/Army.svg'\nimport CoastGuard from './svgs/dodBranch/CoastGuard.svg'\nimport MarineCorps from './svgs/dodBranch/MarineCorps.svg'\nimport Navy from './svgs/dodBranch/Navy.svg'\n\n// Links\nimport Calendar from './svgs/links/Calendar.svg'\nimport Chat from './svgs/links/Chat.svg'\nimport CircleExternalLink from './svgs/links/CircleExternalLink.svg'\nimport CirclePhone from './svgs/links/CirclePhone.svg'\nimport Directions from './svgs/links/Directions.svg'\nimport PhoneTTY from './svgs/links/PhoneTTY.svg'\nimport RightArrowInCircle from './svgs/links/right-arrow-blue-circle.svg'\nimport Text from './svgs/links/Text.svg'\n\n// VASelector\nimport CheckBoxEmpty from './svgs/checkbox/CheckBoxEmpty.svg'\nimport CheckBoxError from './svgs/checkbox/CheckBoxError.svg'\nimport CheckBoxFilled from './svgs/checkbox/CheckBoxFilled.svg'\nimport CheckBoxIntermediate from './svgs/checkbox/CheckBoxIntermediate.svg'\nimport RadioEmpty from './svgs/radio/RadioEmpty.svg'\nimport RadioFilled from './svgs/radio/RadioFilled.svg'\n\n// Misc\nimport Add from './svgs/Add.svg'\nimport Building from './svgs/Building.svg'\nimport Bullet from './svgs/Bullet.svg'\nimport CheckMark from './svgs/CheckMark.svg'\nimport CircleCheckMark from './svgs/CircleCheckMark.svg'\nimport Compose from './svgs/Compose.svg'\nimport Ellipsis from './svgs/Ellipsis.svg'\nimport ExclamationTriangle from './svgs/ExclamationTriangle.svg'\nimport ExternalLink from './svgs/ExternalLink.svg'\nimport Folder from './svgs/Folder.svg'\nimport Inbox from './svgs/Inbox.svg'\nimport Info from './svgs/Info.svg'\nimport Lock from './svgs/Lock.svg'\nimport Logo from './svgs/vaParentLogo/Logo.svg'\nimport Minus from './svgs/Minus.svg'\nimport PaperClip from './svgs/PaperClip.svg'\nimport Phone from './svgs/Phone.svg'\nimport QuestionMark from './svgs/QuestionMark.svg'\nimport Redo from './svgs/Redo.svg'\nimport Remove from './svgs/Remove.svg'\nimport Reply from './svgs/Reply.svg'\nimport Sort from './svgs/Sort.svg'\nimport Trash from './svgs/Trash.svg'\nimport Truck from './svgs/Truck.svg'\nimport Unread from './svgs/Unread.svg'\nimport UploadPhoto from './svgs/UploadPhoto.svg'\nimport VideoCamera from './svgs/VideoCamera.svg'\n\nexport const VA_ICON_MAP = {\n  Add,\n  AirForce,\n  Army,\n  BenefitsSelected,\n  BenefitsUnselected,\n  Building,\n  Bullet,\n  Calendar,\n  Chat,\n  CheckBoxEmpty,\n  CheckBoxError,\n  CheckBoxFilled,\n  CheckBoxIntermediate,\n  CheckMark,\n  ChevronDown,\n  ChevronLeft,\n  ChevronRight,\n  ChevronUp,\n  CircleCheckMark,\n  CircleExternalLink,\n  CirclePhone,\n  CoastGuard,\n  Compose,\n  Directions,\n  Ellipsis,\n  ExclamationTriangle,\n  ExternalLink,\n  Folder,\n  HealthSelected,\n  HealthUnselected,\n  HomeSelected,\n  HomeUnselected,\n  Inbox,\n  Info,\n  Lock,\n  Logo,\n  MarineCorps,\n  Minus,\n  Navy,\n  PaperClip,\n  PaymentsSelected,\n  PaymentsUnselected,\n  Phone,\n  PhoneTTY,\n  ProfileSelected,\n  QuestionMark,\n  RadioEmpty, // Also used for RadioDisabled content--same icon, different colors\n  RadioFilled,\n  Redo,\n  Remove,\n  Reply,\n  RightArrowInCircle, // TODO: Ticket 3402 (or separate implementation ticket) to remove this icon\n  Sort,\n  Text,\n  Trash,\n  Truck,\n  Unread,\n  UploadPhoto,\n  VideoCamera,\n}\n\n/**\n *  Props that need to be passed in to {@link VAIcon}\n */\nexport type VAIconProps = BoxProps & {\n  /**  enum name of the icon to use {@link VA_ICON_MAP} **/\n  name: keyof typeof VA_ICON_MAP\n\n  /** Fill color for the icon */\n  fill?: keyof VAIconColors | keyof VATextColors | string\n\n  /** Secondary fill color for duotone icons--fills icons inside main fill, defaults white */\n  fill2?: keyof VAIconColors | keyof VATextColors | string\n\n  /** Stroke color of the icon */\n  stroke?: keyof VAIconColors | string\n\n  /**  optional number use to set the width; otherwise defaults to svg's width */\n  width?: number\n\n  /**  optional number use to set the height; otherwise defaults to svg's height */\n  height?: number\n\n  /** optional boolean that prevents the icon from being scaled when set to true */\n  preventScaling?: boolean\n\n  /** Optional TestID */\n  testID?: string\n}\n\n/**\n * A common component to display assets (SVGs).\n *\n * For all icons in the SVG definitions, on the primary/only path:\n *    - Set `fill` to `#000` to inherit VAIcon's fill color prop\n * If the SVG icon is duotone, additionally:\n *    - Set `color` to `#fff` on the top level svg (not path)\n *    - Set `fill` to `currentColor` on the secondary path to inherit VAIcon's fill2 color prop\n * If the SVG icon uses stroke, additionally:\n *    - Set `stroke` to `#00F` to inherit VAIcon's stroke color prop\n *\n * Example icons of each classification:\n *    - One layer: HomeSelected.svg\n *    - Duotone: CircleCheckMark.svg\n *    - Stroke: RadioEmpty.svg\n *\n * @returns VAIcon component\n */\nconst VAIcon: FC<VAIconProps> = ({ name, width, height, fill, fill2, stroke, preventScaling, testID, ...boxProps }) => {\n  const theme = useTheme()\n  const fs: (val: number) => number = useFontScale()\n  const dispatch = useAppDispatch()\n  const { fontScale } = useSelector<RootState, AccessibilityState>((state) => state.accessibility)\n  let iconProps = Object.create({ name, width, height, stroke, preventScaling, fill })\n\n  useEffect(() => {\n    // Listener for the current app state, updates the font scale when app state is active and the font scale has changed\n    const sub = AppState.addEventListener('change', (newState: AppStateStatus): void => updateFontScale(newState, fontScale, dispatch))\n    return (): void => sub?.remove()\n  }, [dispatch, fontScale])\n\n  if (fill) {\n    iconProps = Object.assign({}, iconProps, { fill: theme.colors.icon[fill as keyof VAIconColors] || theme.colors.text[fill as keyof VATextColors] || fill })\n  }\n\n  if (fill2) {\n    iconProps = Object.assign({}, iconProps, { color: theme.colors.icon[fill2 as keyof VAIconColors] || theme.colors.text[fill2 as keyof VATextColors] || fill2 })\n  }\n\n  if (stroke) {\n    iconProps = Object.assign({}, iconProps, { stroke: theme.colors.icon[stroke as keyof VAIconColors] || stroke })\n  }\n\n  const Icon: FC<SvgProps> | undefined = VA_ICON_MAP[name]\n  if (!Icon) {\n    return <></>\n  }\n\n  if (width && isFinite(width)) {\n    iconProps = Object.assign({}, iconProps, { width: preventScaling ? width : fs(width) })\n  }\n\n  if (height && isFinite(height)) {\n    iconProps = Object.assign({}, iconProps, { height: preventScaling ? height : fs(height) })\n  }\n\n  return (\n    <Box testID={testID} {...boxProps}>\n      <Icon {...iconProps} />\n    </Box>\n  )\n}\n\nexport default VAIcon\n";var i=o(32666);const l={},a=void 0,c={unversionedId:"Flagship design library/Components/Uncategorized/VAIcon",id:"Flagship design library/Components/Uncategorized/VAIcon",title:"VAIcon",description:"",source:"@site/docs/Flagship design library/Components/Uncategorized/VAIcon.mdx",sourceDirName:"Flagship design library/Components/Uncategorized",slug:"/Flagship design library/Components/Uncategorized/VAIcon",permalink:"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/VAIcon",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"NotificationManager",permalink:"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/NotificationManager"},next:{title:"VAImage",permalink:"/va-mobile-app/docs/Flagship design library/Components/Uncategorized/VAImage"}},m={},p=[],g="<VAIcon name={'Logo'} />\n<VAIcon name={'ChevronUp'} fill={theme.colors.icon.inactive}/> // set icon color using theme\n ",d={toc:p,exampleString:g},v="wrapper";function f(e){let{components:n,...o}=e;return(0,s.kt)(v,(0,t.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,s.kt)(i.Z,{componentName:"VAIcon",example:g,codeString:r,mdxType:"ComponentTopInfo"}))}f.isMDXComponent=!0}}]);