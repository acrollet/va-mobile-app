"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8751],{44991:function(n,e,t){t.r(e),t.d(e,{contentTitle:function(){return p},default:function(){return d},exampleString:function(){return C},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return m}});var r=t(87462),o=t(63366),i=(t(67294),t(3905)),l=(t(19055),t(38909)),a=["components"],s={},p=void 0,c={unversionedId:"Engineering/FrontEnd/ComponentsSection/ErrorComponents/CallHelpCenter",id:"Engineering/FrontEnd/ComponentsSection/ErrorComponents/CallHelpCenter",title:"CallHelpCenter",description:"export const exampleString = `<CallHelpCenter",source:"@site/docs/Engineering/FrontEnd/ComponentsSection/ErrorComponents/CallHelpCenter.mdx",sourceDirName:"Engineering/FrontEnd/ComponentsSection/ErrorComponents",slug:"/Engineering/FrontEnd/ComponentsSection/ErrorComponents/CallHelpCenter",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/ErrorComponents/CallHelpCenter",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BasicError",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/ErrorComponents/BasicError"},next:{title:"DowntimeError",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/ErrorComponents/DowntimeError"}},m=[],C="<CallHelpCenter\n    titleText={t('profile:disabilityRating.errorTitle')}\n    titleA11yHint={t('profile:disabilityRating.errorTitleA11y')}\n    callPhone={t('profile:disabilityRating.errorPhoneNumber')}\n/>",u={toc:m,exampleString:C};function d(n){var e=n.components,t=(0,o.Z)(n,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)(l.Z,{componentName:"CallHelpCenter",example:C,codeString:"import { ViewStyle } from 'react-native'\nimport React, { FC } from 'react'\n\nimport { AlertBox, Box, ButtonTypesConstants, ClickToCallPhoneNumber, TextView, VAButton, VAScrollView } from 'components'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { useTheme, useTranslation } from 'utils/hooks'\n\nexport type CallHelpCenterProps = {\n  /** optional function called when the Try again button is pressed */\n  onTryAgain?: () => void\n  /** optional text for the title */\n  titleText?: string\n  /** optional title a11y hint*/\n  titleA11yHint?: string\n  /** optional text for the error */\n  errorText?: string\n  /** optional a11y hint for the error */\n  errorA11y?: string\n  /** optional phone number */\n  callPhone?: string\n}\n\n/**A common component to show the help center contact info for when an error happens*/\nconst CallHelpCenter: FC<CallHelpCenterProps> = ({ onTryAgain, titleText, titleA11yHint, errorText, errorA11y, callPhone }) => {\n  const t = useTranslation(NAMESPACE.COMMON)\n  const theme = useTheme()\n\n  const scrollStyles: ViewStyle = {\n    justifyContent: 'center',\n  }\n\n  const containerStyles = {\n    mx: theme.dimensions.gutter,\n    mt: theme.dimensions.contentMarginTop,\n    mb: theme.dimensions.contentMarginBottom,\n  }\n\n  const standardMarginBetween = theme.dimensions.standardMarginBetween\n\n  return (\n    <VAScrollView contentContainerStyle={scrollStyles}>\n      <Box justifyContent=\"center\" {...containerStyles}>\n        <AlertBox\n          title={titleText ? titleText : t('errors.callHelpCenter.notWorking')}\n          titleA11yLabel={titleA11yHint ? titleA11yHint : t('errors.callHelpCenter.notWorking.a11yLabel')}\n          text={onTryAgain ? t('errors.callHelpCenter.sorryWithRefresh') : t('errors.callHelpCenter.sorry')}\n          border=\"error\">\n          <Box>\n            <TextView\n              color=\"primary\"\n              variant=\"MobileBody\"\n              my={standardMarginBetween}\n              accessibilityLabel={errorA11y ? errorA11y : t('errors.callHelpCenter.informationLine.a11yLabel')}>\n              {errorText ? errorText : t('errors.callHelpCenter.informationLine')}\n            </TextView>\n            <ClickToCallPhoneNumber\n              displayedText={callPhone ? undefined : t('errors.callHelpCenter.informationLine.numberDisplayed')}\n              phone={callPhone ? callPhone : t('errors.callHelpCenter.informationLine.number')}\n            />\n            {onTryAgain && (\n              <Box mt={standardMarginBetween} accessibilityRole=\"button\">\n                <VAButton\n                  onPress={onTryAgain}\n                  label={t('refresh')}\n                  buttonType={ButtonTypesConstants.buttonPrimary}\n                  testID={t('refresh')}\n                  a11yHint={t('errors.callHelpCenter.button.a11yHint')}\n                />\n              </Box>\n            )}\n          </Box>\n        </AlertBox>\n      </Box>\n    </VAScrollView>\n  )\n}\n\nexport default CallHelpCenter\n",mdxType:"ComponentTopInfo"}))}d.isMDXComponent=!0}}]);