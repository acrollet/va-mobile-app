"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[6495],{92240:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return a},default:function(){return E},exampleString:function(){return l},frontMatter:function(){return c},metadata:function(){return p},toc:function(){return u}});var o=t(87462),r=t(63366),i=(t(67294),t(3905)),s=(t(19055),t(38909)),m=["components"],c={},a=void 0,p={unversionedId:"Engineering/FrontEnd/ComponentsSection/ErrorComponents/DowntimeError",id:"Engineering/FrontEnd/ComponentsSection/ErrorComponents/DowntimeError",isDocsHomePage:!1,title:"DowntimeError",description:"",source:"@site/docs/Engineering/FrontEnd/ComponentsSection/ErrorComponents/DowntimeError.mdx",sourceDirName:"Engineering/FrontEnd/ComponentsSection/ErrorComponents",slug:"/Engineering/FrontEnd/ComponentsSection/ErrorComponents/DowntimeError",permalink:"/docs/Engineering/FrontEnd/ComponentsSection/ErrorComponents/DowntimeError",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"CallHelpCenter",permalink:"/docs/Engineering/FrontEnd/ComponentsSection/ErrorComponents/CallHelpCenter"},next:{title:"ErrorComponent",permalink:"/docs/Engineering/FrontEnd/ComponentsSection/ErrorComponents/ErrorComponent"}},u=[],l="<DowntimeError screenID={screenID} />",d={toc:u,exampleString:l};function E(e){var n=e.components,t=(0,r.Z)(e,m);return(0,i.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(s.Z,{componentName:"DowntimeError",example:l,codeString:"import { ViewStyle } from 'react-native'\nimport React, { FC } from 'react'\n\nimport { AlertBox, Box, VAScrollView } from 'components'\nimport { DowntimeScreenIDToFeature, ScreenIDTypes } from 'store/api/types'\nimport { ErrorsState } from 'store/slices'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { RootState } from 'store'\nimport { useSelector } from 'react-redux'\nimport { useTheme, useTranslation } from 'utils/hooks'\n\nexport type DowntimeErrorProps = {\n  /**The screen id for the screen that has the errors*/\n  screenID: ScreenIDTypes\n}\n\n/**Common component to show an alert when the service is down*/\nconst DowntimeError: FC<DowntimeErrorProps> = ({ screenID }) => {\n  const t = useTranslation(NAMESPACE.COMMON)\n  const theme = useTheme()\n\n  const scrollStyles: ViewStyle = {\n    justifyContent: 'center',\n  }\n\n  const containerStyles = {\n    mx: theme.dimensions.gutter,\n    mt: theme.dimensions.contentMarginTop,\n    mb: theme.dimensions.contentMarginBottom,\n  }\n  const { downtimeWindowsByFeature } = useSelector<RootState, ErrorsState>((state) => state.errors)\n  const feature = DowntimeScreenIDToFeature[screenID]\n  const featureName = downtimeWindowsByFeature[feature]?.featureName\n  const endTime = downtimeWindowsByFeature[feature]?.endTime.toFormat('fff')\n\n  return (\n    <VAScrollView contentContainerStyle={scrollStyles}>\n      <Box justifyContent=\"center\" {...containerStyles}>\n        <AlertBox\n          title={t('downtime.title')}\n          titleA11yLabel={t('downtime.title')}\n          text={t('downtime.message', { featureName, endTime })}\n          textA11yLabel={t('downtime.message', { featureName, endTime })}\n          border=\"warning\"\n        />\n      </Box>\n    </VAScrollView>\n  )\n}\n\nexport default DowntimeError\n",mdxType:"ComponentTopInfo"}))}E.isMDXComponent=!0}}]);