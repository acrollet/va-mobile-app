"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[8533],{38909:function(e,t,n){n.d(t,{Z:function(){return c}});var a=n(67294),o=n(19055),r=n(26396),l=n(58215),s=n(82224),u=n(36005),i=function(e){var t=e.props;return t?a.createElement(a.Fragment,null,u.ZP.isEmpty(t)?a.createElement("pre",{className:"preText"},"This component does not have props defined"):a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Name"),a.createElement("th",null,"Type"),a.createElement("th",null,"Default Value"),a.createElement("th",null,"Required"),a.createElement("th",null,"Description"))),a.createElement("tbody",null,Object.keys(t).map((function(e){var n;return a.createElement("tr",{key:e},a.createElement("td",null,a.createElement("code",null,e)),a.createElement("td",{style:{minWidth:200}},null==(n=t[e].type)?void 0:n.name),a.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),a.createElement("td",null,t[e].required?"Yes":"No"),a.createElement("td",null,t[e].description))}))))):null};function c(e){var t=(0,s.N)(e.componentName)[0],n=t.description,u=t.displayName,c=t.props,m="How to use the "+u+" component",p="Full code for the "+u+" component";return a.createElement(a.Fragment,null,n,a.createElement("br",null),a.createElement("br",null),a.createElement(r.Z,null,a.createElement(l.Z,{value:"props",label:"Properties"},a.createElement(i,{props:c})),a.createElement(l.Z,{value:"example",label:"Example"},e.example&&a.createElement(o.Z,{title:m,className:"language-tsx test"},e.example)),a.createElement(l.Z,{value:"code",label:"Source Code"},e.codeString&&a.createElement(o.Z,{title:p,className:"language-tsx"},e.codeString)),a.createElement(l.Z,{value:"accessibility",label:"Accessibility"},a.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},82224:function(e,t,n){n.d(t,{N:function(){return o}});var a=n(28084),o=function(e){return(0,a.default)()["docusaurus-plugin-react-docgen-typescript"].default.filter((function(t){return t.displayName===e}))}},41092:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return i},default:function(){return g},exampleString:function(){return p},frontMatter:function(){return u},metadata:function(){return c},toc:function(){return m}});var a=n(87462),o=n(63366),r=(n(67294),n(3905)),l=(n(19055),n(38909)),s=["components"],u={},i=void 0,c={unversionedId:"UX/ComponentsSection/Tags/MessagesCountTag",id:"UX/ComponentsSection/Tags/MessagesCountTag",title:"MessagesCountTag",description:"",source:"@site/docs/UX/ComponentsSection/Tags/MessagesCountTag.mdx",sourceDirName:"UX/ComponentsSection/Tags",slug:"/UX/ComponentsSection/Tags/MessagesCountTag",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Tags/MessagesCountTag",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LabelTag",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Tags/LabelTag"},next:{title:"TextArea",permalink:"/va-mobile-app/docs/UX/ComponentsSection/TextViews/TextArea"}},m=[],p="<MessagesCountTag unread={tagCount} />",d={toc:m,exampleString:p};function g(e){var t=e.components,n=(0,o.Z)(e,s);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)(l.Z,{componentName:"MessagesCountTag",example:p,codeString:"import { testIdProps } from 'utils/accessibility'\nimport { useTheme } from 'utils/hooks'\nimport Box from './Box'\nimport React, { FC } from 'react'\nimport TextView from './TextView'\n\nexport type CountTagProps = {\n  /**number to be shown on the tag */\n  unread: number\n}\n\n/**A common component to show a count of a particular item within a page before clicking to enter that page. For example, this tag would be used to display the number of unread messages in one's inbox. */\nconst MessagesCountTag: FC<CountTagProps> = ({ unread }) => {\n  const theme = useTheme()\n  return (\n    <Box\n      minWidth={theme.dimensions.tagMinWidth}\n      justifyContent={'center'}\n      alignSelf={'center'}\n      backgroundColor=\"unreadMessagesTag\"\n      borderRadius={2}\n      {...testIdProps(unread.toString())}\n      accessible={true}>\n      <TextView flexWrap={'wrap'} variant=\"UnreadMessagesTag\" px={10} pt={3}>\n        {unread}\n      </TextView>\n    </Box>\n  )\n}\n\nexport default MessagesCountTag\n",mdxType:"ComponentTopInfo"}))}g.isMDXComponent=!0}}]);