"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[7013],{4175:function(t,n,e){e.r(n),e.d(n,{contentTitle:function(){return c},default:function(){return x},exampleString:function(){return d},frontMatter:function(){return m},metadata:function(){return p},toc:function(){return l}});var o=e(7462),i=e(3366),r=(e(7294),e(3905)),s=(e(9055),e(8909)),a=["components"],m={},c=void 0,p={unversionedId:"Engineering/FrontEnd/ComponentsSection/List",id:"Engineering/FrontEnd/ComponentsSection/List",isDocsHomePage:!1,title:"List",description:"const listExample: Array = [",source:"@site/docs/Engineering/FrontEnd/ComponentsSection/List.mdx",sourceDirName:"Engineering/FrontEnd/ComponentsSection",slug:"/Engineering/FrontEnd/ComponentsSection/List",permalink:"/docs/Engineering/FrontEnd/ComponentsSection/List",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"LargeNavButton",permalink:"/docs/Engineering/FrontEnd/ComponentsSection/LargeNavButton"},next:{title:"LoadingComponent",permalink:"/docs/Engineering/FrontEnd/ComponentsSection/LoadingComponent"}},l=[],d="import { List, ListItemObj } from 'components'\n    const listExample: Array<ListItemObj> = [\n        { content: <TextView>'My Title 1'</TextView>, a11yHintText: 'Hint 1', onPress: () => { console.log('button 1 pressed') } },\n        { content: <TextView>'My Title 2'</TextView>, a11yHintText: 'Hint 2', onPress: () => { console.log('button 2 pressed') } },\n    ]\n\n<List items={listExample} />",u={toc:l,exampleString:d};function x(t){var n=t.components,e=(0,i.Z)(t,a);return(0,r.kt)("wrapper",(0,o.Z)({},u,e,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(s.Z,{componentName:"List",example:d,codeString:"import React, { FC } from 'react'\n\nimport { SwitchProps } from './Switch'\nimport { TextView } from './index'\nimport { TextViewProps } from './TextView'\nimport { generateTestID } from 'utils/common'\nimport { testIdProps } from 'utils/accessibility'\nimport { useTheme } from 'utils/hooks'\nimport BaseListItem, { BaseListItemProps } from './BaseListItem'\nimport Box from './Box'\n\n/**\n * Signifies each item in the list of items in {@link ListProps}\n */\nexport type ListItemObj = {\n  /** optional text to use as the button's accessibility hint */\n  a11yHintText?: string\n\n  /** display content for the item */\n  content?: React.ReactNode\n\n  /** on press event */\n  onPress?: () => void\n} & Partial<BaseListItemProps>\n\n/**\n * Props for {@link List}\n */\nexport type ListProps = {\n  /** list of items of which a button will be rendered per item */\n  items: Array<ListItemObj>\n\n  /** optional title to use for the list */\n  title?: string\n\n  /**optional a11y hint for the title */\n  titleA11yLabel?: string\n}\n\n/**\n * A common component for showing a list of <ListItem>.\n */\nconst List: FC<ListProps> = ({ items, title, titleA11yLabel }) => {\n  const theme = useTheme()\n  const { gutter, condensedMarginBetween, standardMarginBetween } = theme.dimensions\n\n  const titleProps: TextViewProps = {\n    variant: 'TableHeaderBold',\n    mx: gutter,\n    mb: condensedMarginBetween,\n    mt: standardMarginBetween,\n    accessibilityRole: 'header',\n  }\n\n  const buttons = items.map((item, index) => {\n    const { content, a11yHintText, decoratorProps } = item\n    const dProps = decoratorProps as Partial<SwitchProps>\n\n    return (\n      <BaseListItem key={index} a11yHint={a11yHintText || dProps?.a11yHint || ''} {...item}>\n        {content}\n      </BaseListItem>\n    )\n  })\n\n  return (\n    <Box>\n      {title && (\n        <Box accessible={true} accessibilityRole={'header'}>\n          <TextView {...titleProps} {...testIdProps(generateTestID(titleA11yLabel ? titleA11yLabel : title, ''))}>\n            {title}\n          </TextView>\n        </Box>\n      )}\n      <Box borderTopWidth={theme.dimensions.borderWidth} borderStyle=\"solid\" borderColor=\"primary\">\n        <Box backgroundColor={'list'}>{buttons}</Box>\n      </Box>\n    </Box>\n  )\n}\n\nexport default List\n",mdxType:"ComponentTopInfo"}))}x.isMDXComponent=!0}}]);