"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5419],{38909:function(e,t,n){n.d(t,{Z:function(){return c}});var o=n(67294),r=n(19055),i=n(26396),a=n(58215),l=n(82224),s=n(36005),m=function(e){var t=e.props;return t?o.createElement(o.Fragment,null,s.ZP.isEmpty(t)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(t).map((function(e){var n;return o.createElement("tr",{key:e},o.createElement("td",null,o.createElement("code",null,e)),o.createElement("td",{style:{minWidth:200}},null==(n=t[e].type)?void 0:n.name),o.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),o.createElement("td",null,t[e].required?"Yes":"No"),o.createElement("td",null,t[e].description))}))))):null};function c(e){var t=(0,l.N)(e.componentName)[0],n=t.description,s=t.displayName,c=t.props,d="How to use the "+s+" component",u="Full code for the "+s+" component";return o.createElement(o.Fragment,null,n,o.createElement("br",null),o.createElement("br",null),o.createElement(i.Z,null,o.createElement(a.Z,{value:"props",label:"Properties"},o.createElement(m,{props:c})),o.createElement(a.Z,{value:"example",label:"Example"},e.example&&o.createElement(r.Z,{title:d,className:"language-tsx test"},e.example)),o.createElement(a.Z,{value:"code",label:"Source Code"},e.codeString&&o.createElement(r.Z,{title:u,className:"language-tsx"},e.codeString)),o.createElement(a.Z,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},58364:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return m},default:function(){return b},exampleString:function(){return u},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return d}});var o=n(87462),r=n(63366),i=(n(67294),n(3905)),a=(n(19055),n(38909)),l=["components"],s={},m=void 0,c={unversionedId:"Engineering/FrontEnd/ComponentsSection/Cards/MultiTouchCard",id:"Engineering/FrontEnd/ComponentsSection/Cards/MultiTouchCard",title:"MultiTouchCard",description:"export const exampleString = `const middleTextLines: Array =",source:"@site/docs/Engineering/FrontEnd/ComponentsSection/Cards/MultiTouchCard.mdx",sourceDirName:"Engineering/FrontEnd/ComponentsSection/Cards",slug:"/Engineering/FrontEnd/ComponentsSection/Cards/MultiTouchCard",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/Cards/MultiTouchCard",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"VAButton",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/Buttons and Links/VAButton"},next:{title:"Carousel",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/Carousel/"}},d=[],u="const middleTextLines: Array<TextLine> =\n[\n  {\n    text: 'line 1',\n    variant: 'MobileBodyBold'\n  },\n]\n\nconst bottomText: Array<TextLine> = [{ text: 'bottom line 1', variant: 'MobileBodyBold' }]\n\nconst props: MultiTouchCardProps = {\n    orderIdentifier: 'Prescription 1 of 1',\n    mainContent: <TextLines listOfText={middleTextLines} />,\n    mainA11yLabel: 'Review prescription details',\n    bottomContent: <TextLines listOfText={bottomText} />,\n    bottomA11yHint: 'Review tracking details',\n}\n\n<MultiTouchCard {...props} />",p={toc:d,exampleString:u};function b(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,o.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)(a.Z,{componentName:"MultiTouchCard",example:u,codeString:"import { Pressable, PressableProps } from 'react-native'\nimport React, { FC, ReactElement } from 'react'\n\nimport { HiddenA11yElement } from 'styles/common'\nimport { useTheme } from 'utils/hooks'\nimport Box, { BoxProps } from './Box'\n\nexport type MultiTouchCardProps = {\n  /** read by screen readers to identify the cards place in a list */\n  orderIdentifier?: string\n  /** accessibility label for the main section */\n  mainA11yLabel?: string\n  /** content to display in the main section */\n  mainContent: ReactElement\n  /** called when the bottom button is pressed */\n  bottomOnPress?: () => void\n  /** content to display in the bottom button */\n  bottomContent?: ReactElement\n  /** hint for the bottom button action */\n  bottomA11yHint?: string\n  /** accessibility label for the bottom section */\n  bottomA11yLabel?: string\n}\n\nconst MultiTouchCard: FC<MultiTouchCardProps> = ({ orderIdentifier, mainContent, bottomContent, bottomOnPress, bottomA11yHint, mainA11yLabel, bottomA11yLabel }) => {\n  const theme = useTheme()\n\n  const hasBottomContent = !!bottomContent\n\n  const background = 'list'\n\n  let mainBoxProps: BoxProps = {\n    width: '100%',\n    minHeight: theme.dimensions.touchableMinHeight,\n    py: theme.dimensions.buttonPadding,\n    px: theme.dimensions.gutter,\n    borderWidth: theme.dimensions.borderWidth,\n    borderColor: 'primary',\n    borderStyle: 'solid',\n    backgroundColor: background,\n    borderRadiusTop: 8,\n    borderRadiusBottom: hasBottomContent ? 0 : 8,\n  }\n\n  if (mainA11yLabel) {\n    mainBoxProps = { ...mainBoxProps, accessibilityLabel: mainA11yLabel }\n  }\n\n  let bottomPressableProps: PressableProps = {\n    onPress: bottomOnPress,\n    accessible: true,\n    accessibilityRole: 'button',\n    accessibilityHint: bottomA11yHint,\n  }\n\n  let bottomBoxProps: BoxProps = {\n    py: theme.dimensions.buttonPadding,\n    px: theme.dimensions.gutter,\n    backgroundColor: background,\n    borderRadiusBottom: 8,\n    borderTopWidth: 0,\n    borderWidth: theme.dimensions.borderWidth,\n    borderColor: 'primary',\n    borderStyle: 'solid',\n  }\n\n  const getBottomContent = () => {\n    if (bottomOnPress) {\n      if (bottomA11yLabel) {\n        bottomPressableProps = { ...mainBoxProps, accessibilityLabel: bottomA11yLabel }\n      }\n\n      return (\n        <Pressable {...bottomPressableProps}>\n          <Box {...bottomBoxProps}>{bottomContent}</Box>\n        </Pressable>\n      )\n    } else {\n      if (bottomA11yLabel) {\n        bottomBoxProps = { ...mainBoxProps, accessibilityLabel: bottomA11yLabel }\n      }\n\n      return <Box {...bottomBoxProps}>{bottomContent}</Box>\n    }\n  }\n\n  return (\n    <>\n      {orderIdentifier && <HiddenA11yElement accessibilityLabel={orderIdentifier}>{orderIdentifier}</HiddenA11yElement>}\n      <Box {...mainBoxProps}>{mainContent}</Box>\n      {hasBottomContent && getBottomContent()}\n    </>\n  )\n}\n\nexport default MultiTouchCard\n",mdxType:"ComponentTopInfo"}))}b.isMDXComponent=!0}}]);