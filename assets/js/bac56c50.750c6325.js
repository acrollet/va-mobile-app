"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[2369],{38909:(e,t,n)=>{n.d(t,{Z:()=>c});var s=n(67294),l=n(19055),i=n(26396),o=n(58215),a=n(82224),r=n(36005);const m=e=>{let{props:t}=e;return t?s.createElement(s.Fragment,null,r.ZP.isEmpty(t)?s.createElement("pre",{className:"preText"},"This component does not have props defined"):s.createElement("table",null,s.createElement("thead",null,s.createElement("tr",null,s.createElement("th",null,"Name"),s.createElement("th",null,"Type"),s.createElement("th",null,"Default Value"),s.createElement("th",null,"Required"),s.createElement("th",null,"Description"))),s.createElement("tbody",null,Object.keys(t).map((e=>s.createElement("tr",{key:e},s.createElement("td",null,s.createElement("code",null,e)),s.createElement("td",{style:{minWidth:200}},t[e].type?.name),s.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),s.createElement("td",null,t[e].required?"Yes":"No"),s.createElement("td",null,t[e].description))))))):null};function c(e){const t=(0,a.N)(e.componentName),{description:n,displayName:r,props:c}=t[0],u=`How to use the ${r} component`,p=`Full code for the ${r} component`;return s.createElement(s.Fragment,null,n,s.createElement("br",null),s.createElement("br",null),s.createElement(i.Z,null,s.createElement(o.Z,{value:"props",label:"Properties"},s.createElement(m,{props:c})),s.createElement(o.Z,{value:"example",label:"Example"},e.example&&s.createElement(l.Z,{title:u,className:"language-tsx test"},e.example)),s.createElement(o.Z,{value:"code",label:"Source Code"},e.codeString&&s.createElement(l.Z,{title:p,className:"language-tsx"},e.codeString)),s.createElement(o.Z,{value:"accessibility",label:"Accessibility"},s.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},82224:(e,t,n)=>{n.d(t,{N:()=>l});var s=n(28084);const l=e=>(0,s.default)()["docusaurus-plugin-react-docgen-typescript"].default.filter((t=>t.displayName===e))},15587:(e,t,n)=>{n.r(t),n.d(t,{contentTitle:()=>r,default:()=>L,exampleString:()=>u,frontMatter:()=>a,metadata:()=>m,toc:()=>c});var s=n(87462),l=(n(67294),n(3905));n(95657),n(19055);const i="import React, { FC } from 'react'\n\nimport { List, ListItemObj, ListProps } from './index'\nimport { TextLine } from './types'\nimport { TextLines } from './TextLines'\nimport { generateTestIDForTextList } from 'utils/common'\n\n/**\n * Signifies each item in the list of items in {@link DefaultListProps}\n */\nexport type DefaultListItemObj = {\n  /** lines of text to display */\n  textLines: Array<TextLine>\n} & Partial<ListItemObj>\n\n/**\n * Props for {@link DefaultList}\n */\nexport type DefaultListProps = {\n  /** list of items of which a button will be rendered per item */\n  items: Array<DefaultListItemObj>\n  /** if true the text will be selectable */\n  selectable?: boolean\n} & Partial<ListProps>\n\n/**\n *Component to show a list composed of lines of display text built using TextLines\n */\nconst DefaultList: FC<DefaultListProps> = ({ items, title, titleA11yLabel, selectable }) => {\n  const listItemObjs: Array<ListItemObj> = items.map((item) => {\n    // Move all of the properties except text lines to the standard list item object\n    const { textLines, testId, ...listItemObj } = { ...item }\n    const testIdToUse = testId ? testId : generateTestIDForTextList(textLines)\n\n    const content = <TextLines listOfText={textLines} selectable={selectable} />\n\n    return { ...listItemObj, content, testId: testIdToUse }\n  })\n\n  return <List items={listItemObjs} title={title} titleA11yLabel={titleA11yLabel} />\n}\n\nexport default DefaultList\n";var o=n(38909);const a={},r=void 0,m={unversionedId:"UX/ComponentsSection/Layout and Organization/List/DefaultList",id:"UX/ComponentsSection/Layout and Organization/List/DefaultList",title:"DefaultList",description:"export const exampleString =`const exampleList: Array =",source:"@site/docs/UX/ComponentsSection/Layout and Organization/List/DefaultList.mdx",sourceDirName:"UX/ComponentsSection/Layout and Organization/List",slug:"/UX/ComponentsSection/Layout and Organization/List/DefaultList",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Layout and Organization/List/DefaultList",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"BaseListItem",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Layout and Organization/List/BaseListItem"},next:{title:"MessageList",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Layout and Organization/List/MessageList"}},c=[],u="const exampleList: Array<DefaultListItemObj> = \n[\n    {\n        textLines: [{ text: 'line 1 on the first button' }, { text: 'line 2 on the first button' }],\n        a11yHintText: 'press this button to do something',\n        onPress: () => { console.log('button 1 pressed') },\n        testId: 'line-1-on-the-button',\n    },\n    {\n        textLines: [{ text: 'line 1 on the second button' }, { text: 'line 2 on the second button' }],\n        a11yHintText: 'press this button to do something',\n        onPress: () => { console.log('button 2 pressed') },\n        testId: 'line-1-on-the-second-button',\n    },\n]\n\n<DefaultList items={exampleList} />",p={toc:c,exampleString:u},d="wrapper";function L(e){let{components:t,...n}=e;return(0,l.kt)(d,(0,s.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(o.Z,{componentName:"DefaultList",example:u,codeString:i,mdxType:"ComponentTopInfo"}))}L.isMDXComponent=!0}}]);