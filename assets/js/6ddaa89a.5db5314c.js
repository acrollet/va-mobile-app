"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3071],{38909:function(e,n,r){r.d(n,{Z:function(){return m}});var t=r(67294),o=r(19055),a=r(26396),i=r(58215),l=r(82224),s=r(36005),c=function(e){var n=e.props;return n?t.createElement(t.Fragment,null,s.ZP.isEmpty(n)?t.createElement("pre",{className:"preText"},"This component does not have props defined"):t.createElement("table",null,t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,"Name"),t.createElement("th",null,"Type"),t.createElement("th",null,"Default Value"),t.createElement("th",null,"Required"),t.createElement("th",null,"Description"))),t.createElement("tbody",null,Object.keys(n).map((function(e){var r;return t.createElement("tr",{key:e},t.createElement("td",null,t.createElement("code",null,e)),t.createElement("td",{style:{minWidth:200}},null==(r=n[e].type)?void 0:r.name),t.createElement("td",null,n[e].defaultValue&&n[e].defaultValue.value.toString()),t.createElement("td",null,n[e].required?"Yes":"No"),t.createElement("td",null,n[e].description))}))))):null};function m(e){var n=(0,l.N)(e.componentName)[0],r=n.description,s=n.displayName,m=n.props,p="How to use the "+s+" component",E="Full code for the "+s+" component";return t.createElement(t.Fragment,null,r,t.createElement("br",null),t.createElement("br",null),t.createElement(a.Z,null,t.createElement(i.Z,{value:"props",label:"Properties"},t.createElement(c,{props:m})),t.createElement(i.Z,{value:"example",label:"Example"},e.example&&t.createElement(o.Z,{title:p,className:"language-tsx test"},e.example)),t.createElement(i.Z,{value:"code",label:"Source Code"},e.codeString&&t.createElement(o.Z,{title:E,className:"language-tsx"},e.codeString)),t.createElement(i.Z,{value:"accessibility",label:"Accessibility"},t.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},59706:function(e,n,r){r.r(n),r.d(n,{contentTitle:function(){return c},default:function(){return C},exampleString:function(){return E},frontMatter:function(){return s},metadata:function(){return m},toc:function(){return p}});var t=r(87462),o=r(63366),a=(r(67294),r(3905)),i=(r(19055),r(38909)),l=["components"],s={},c=void 0,m={unversionedId:"Engineering/FrontEnd/ComponentsSection/ErrorComponents/ErrorComponent",id:"Engineering/FrontEnd/ComponentsSection/ErrorComponents/ErrorComponent",title:"ErrorComponent",description:"",source:"@site/docs/Engineering/FrontEnd/ComponentsSection/ErrorComponents/ErrorComponent.mdx",sourceDirName:"Engineering/FrontEnd/ComponentsSection/ErrorComponents",slug:"/Engineering/FrontEnd/ComponentsSection/ErrorComponents/ErrorComponent",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/ErrorComponents/ErrorComponent",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DowntimeError",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/ErrorComponents/DowntimeError"},next:{title:"NetworkConnectionError",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/ErrorComponents/NetworkConnectionError"}},p=[],E="<ErrorComponent screenID={ScreenIDTypesConstants.APPEAL_DETAILS_SCREEN_ID} />",u={toc:p,exampleString:E};function C(e){var n=e.components,r=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,t.Z)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)(i.Z,{componentName:"ErrorComponent",example:E,codeString:"import { useSelector } from 'react-redux'\nimport { useTranslation } from 'react-i18next'\nimport React, { FC } from 'react'\n\nimport { CallHelpCenter, DowntimeError, NetworkConnectionError } from 'components'\nimport { CommonErrorTypesConstants } from 'constants/errors'\nimport { DowntimeScreenIDToFeature, ScreenIDTypes } from 'store/api/types'\nimport { ErrorsState } from 'store/slices'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { RootState } from 'store'\nimport { useDowntime } from 'utils/hooks'\n\nexport type ErrorComponentProps = {\n  /**The screen id for the screen that has the errors*/\n  screenID: ScreenIDTypes\n  /** optional function called when the Try again button is pressed */\n  onTryAgain?: () => void\n}\n\n/**Main error handling component. This component will show the proper screen according to the type of error.*/\nconst ErrorComponent: FC<ErrorComponentProps> = (props) => {\n  const { errorsByScreenID, tryAgain: storeTryAgain } = useSelector<RootState, ErrorsState>((state) => state.errors)\n  const { t } = useTranslation([NAMESPACE.COMMON, NAMESPACE.HEALTH, NAMESPACE.PROFILE])\n  const isInDowntime = useDowntime(DowntimeScreenIDToFeature[props.screenID])\n\n  const getSpecificErrorComponent: FC<ErrorComponentProps> = ({ onTryAgain, screenID }) => {\n    const tryAgain = onTryAgain ? onTryAgain : storeTryAgain\n    const errorType = errorsByScreenID[screenID] || ''\n\n    if (isInDowntime) {\n      return <DowntimeError screenID={screenID} />\n    }\n    // check which specific error occurred and return the corresponding error element\n    switch (errorType) {\n      case CommonErrorTypesConstants.NETWORK_CONNECTION_ERROR:\n        return <NetworkConnectionError onTryAgain={tryAgain} />\n      case CommonErrorTypesConstants.APP_LEVEL_ERROR:\n        return <CallHelpCenter />\n      case CommonErrorTypesConstants.APP_LEVEL_ERROR_WITH_REFRESH:\n        return <CallHelpCenter onTryAgain={tryAgain} />\n      case CommonErrorTypesConstants.APP_LEVEL_ERROR_HEALTH_LOAD:\n        return (\n          <CallHelpCenter\n            onTryAgain={tryAgain}\n            errorText={t('health:secureMessaging.sendError.ifTheAppStill')}\n            errorA11y={t('health:secureMessaging.sendError.ifTheAppStill.a11y')}\n            callPhone={t('common:8773270022.displayText')}\n          />\n        )\n      case CommonErrorTypesConstants.APP_LEVEL_ERROR_DISABILITY_RATING:\n        return (\n          <CallHelpCenter\n            titleText={t('profile:disabilityRating.errorTitle')}\n            titleA11yHint={t('profile:disabilityRating.errorTitleA11y')}\n            callPhone={t('profile:disabilityRating.errorPhoneNumber')}\n          />\n        )\n      case CommonErrorTypesConstants.APP_LEVEL_ERROR_VACCINE:\n        return <CallHelpCenter onTryAgain={tryAgain} titleText={t('common:errors.callHelpCenter.vaAppNotWorking')} callPhone={t('common:8006982411.displayText')} />\n      default:\n        return <CallHelpCenter onTryAgain={tryAgain} />\n    }\n  }\n\n  return getSpecificErrorComponent(props)\n}\n\nexport default ErrorComponent\n",mdxType:"ComponentTopInfo"}))}C.isMDXComponent=!0}}]);