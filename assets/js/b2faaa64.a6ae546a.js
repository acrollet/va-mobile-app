"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3783],{38909:function(e,n,t){t.d(n,{Z:function(){return c}});var o=t(67294),a=t(19055),i=t(26396),l=t(58215),r=t(82224),s=t(36005),p=function(e){var n=e.props;return n?o.createElement(o.Fragment,null,s.ZP.isEmpty(n)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(n).map((function(e){var t;return o.createElement("tr",{key:e},o.createElement("td",null,o.createElement("code",null,e)),o.createElement("td",{style:{minWidth:200}},null==(t=n[e].type)?void 0:t.name),o.createElement("td",null,n[e].defaultValue&&n[e].defaultValue.value.toString()),o.createElement("td",null,n[e].required?"Yes":"No"),o.createElement("td",null,n[e].description))}))))):null};function c(e){var n=(0,r.N)(e.componentName)[0],t=n.description,s=n.displayName,c=n.props,u="How to use the "+s+" component",d="Full code for the "+s+" component";return o.createElement(o.Fragment,null,t,o.createElement("br",null),o.createElement("br",null),o.createElement(i.Z,null,o.createElement(l.Z,{value:"props",label:"Properties"},o.createElement(p,{props:c})),o.createElement(l.Z,{value:"example",label:"Example"},e.example&&o.createElement(a.Z,{title:u,className:"language-tsx test"},e.example)),o.createElement(l.Z,{value:"code",label:"Source Code"},e.codeString&&o.createElement(a.Z,{title:d,className:"language-tsx"},e.codeString)),o.createElement(l.Z,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},36924:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return p},default:function(){return h},exampleString:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var o=t(87462),a=t(63366),i=(t(67294),t(3905)),l=(t(19055),t(38909)),r=["components"],s={},p=void 0,c={unversionedId:"Engineering/FrontEnd/ComponentsSection/FormComponents/RadioGroup",id:"Engineering/FrontEnd/ComponentsSection/FormComponents/RadioGroup",title:"RadioGroup",description:"export const exampleString = `const [optionValue, setOptionValue] = useState(options[0].value)",source:"@site/docs/Engineering/FrontEnd/ComponentsSection/FormComponents/RadioGroup.mdx",sourceDirName:"Engineering/FrontEnd/ComponentsSection/FormComponents",slug:"/Engineering/FrontEnd/ComponentsSection/FormComponents/RadioGroup",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/FormComponents/RadioGroup",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"PickerList",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/FormComponents/PickerList"},next:{title:"VAModalPicker",permalink:"/va-mobile-app/docs/Engineering/FrontEnd/ComponentsSection/FormComponents/VAModalPicker"}},u=[],d="const [optionValue, setOptionValue] = useState(options[0].value)\nconst handleRadioOnChange = (radioValue: number): void => {\n  setOptionValue(radioValue)\n}\n\nconst options = [\n  {\n    value: 1,\n    label: '1'\n  },\n  {\n    value: 2,\n    label: '2'\n  },\n]\n\nreturn <RadioGroup<number> options={options} value={optionValue} onChange={handleRadioOnChange} />",m={toc:u,exampleString:d};function h(e){var n=e.components,t=(0,a.Z)(e,r);return(0,i.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)(l.Z,{componentName:"RadioGroup",example:d,codeString:"import { isEqual, map } from 'underscore'\nimport React, { ReactElement, useEffect } from 'react'\n\nimport { Box, SelectorType, TextView, VASelector } from '../../index'\nimport { NAMESPACE } from 'constants/namespaces'\nimport { useTheme, useTranslation } from 'utils/hooks'\n\nexport type radioOption<T> = {\n  /** translated labelKey displayed next to the checkbox/radio */\n  labelKey: string\n  /** optional arguments to pass in with the labelKey during translation */\n  labelArgs?: { [key: string]: string }\n  /** value of the radio button */\n  value: T\n  /** string for the header if one needed */\n  headerText?: string\n}\n\n/**\n * Signifies props for the component {@link RadioGroup}\n */\nexport type RadioGroupProps<T> = {\n  /** Zero based array of options. An option is an object with both a value which is the relevant data, and a label which is displayed as a string to represent the value. */\n  options: Array<radioOption<T>>\n  /** Currently selected option. An initial value can be used or this can be left undefined which will have nothing initially selected.  */\n  value?: T\n  /** Call back function that passes the newly selected option's value as an argument to.*/\n  onChange: (val: T) => void\n  /** optional boolean that disables the radio group when set to true */\n  disabled?: boolean\n}\n\n/**A common component to display radio button selectors for a list of selectable items*/\nconst RadioGroup = <T,>({ options, value, onChange, disabled = false }: RadioGroupProps<T>): ReactElement => {\n  const theme = useTheme()\n  const t = useTranslation(NAMESPACE.PROFILE)\n  const hasSingleOption = options.length === 1\n\n  useEffect(() => {\n    // Auto select the first option if there is only one option\n    if (hasSingleOption && !value) {\n      onChange(options[0].value)\n    }\n  }, [hasSingleOption, value, options, onChange])\n\n  const getOption = (option: radioOption<T>): ReactElement => {\n    const { labelKey, labelArgs } = option\n\n    // Render option as simple text\n    if (hasSingleOption) {\n      return <TextView variant=\"VASelector\">{t(labelKey, labelArgs)}</TextView>\n    }\n\n    const selected = isEqual(option.value, value)\n    const onVASelectorChange = (_selected: boolean): void => {\n      onChange(option.value)\n    }\n\n    return <VASelector selectorType={SelectorType.Radio} selected={selected} onSelectionChange={onVASelectorChange} labelKey={labelKey} labelArgs={labelArgs} disabled={disabled} />\n  }\n\n  const getRadios = (): ReactElement => {\n    const radios = map(options, (option, index) => {\n      const { headerText } = option\n      return (\n        <Box key={index}>\n          {headerText && (\n            <Box>\n              <TextView variant=\"MobileBodyBold\" accessibilityRole=\"header\">\n                {headerText}\n              </TextView>\n            </Box>\n          )}\n          <Box mb={theme.dimensions.standardMarginBetween} key={index} mt={headerText ? theme.dimensions.contentMarginTop : 0}>\n            {getOption(option)}\n          </Box>\n        </Box>\n      )\n    })\n\n    return <Box>{radios}</Box>\n  }\n\n  return getRadios()\n}\n\nexport default RadioGroup\n",mdxType:"ComponentTopInfo"}))}h.isMDXComponent=!0}}]);