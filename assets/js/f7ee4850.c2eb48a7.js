"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[3337],{38909:function(e,t,n){n.d(t,{Z:function(){return u}});var o=n(67294),r=n(19055),l=n(26396),i=n(58215),a=n(82224),c=n(36005),s=function(e){var t=e.props;return t?o.createElement(o.Fragment,null,c.ZP.isEmpty(t)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(t).map((function(e){var n;return o.createElement("tr",{key:e},o.createElement("td",null,o.createElement("code",null,e)),o.createElement("td",{style:{minWidth:200}},null==(n=t[e].type)?void 0:n.name),o.createElement("td",null,t[e].defaultValue&&t[e].defaultValue.value.toString()),o.createElement("td",null,t[e].required?"Yes":"No"),o.createElement("td",null,t[e].description))}))))):null};function u(e){var t=(0,a.N)(e.componentName)[0],n=t.description,c=t.displayName,u=t.props,m="How to use the "+c+" component",d="Full code for the "+c+" component";return o.createElement(o.Fragment,null,n,o.createElement("br",null),o.createElement("br",null),o.createElement(l.Z,null,o.createElement(i.Z,{value:"props",label:"Properties"},o.createElement(s,{props:u})),o.createElement(i.Z,{value:"example",label:"Example"},e.example&&o.createElement(r.Z,{title:m,className:"language-tsx test"},e.example)),o.createElement(i.Z,{value:"code",label:"Source Code"},e.codeString&&o.createElement(r.Z,{title:d,className:"language-tsx"},e.codeString)),o.createElement(i.Z,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},82224:function(e,t,n){n.d(t,{N:function(){return r}});var o=n(28084),r=function(e){return(0,o.default)()["docusaurus-plugin-react-docgen-typescript"].default.filter((function(t){return t.displayName===e}))}},29821:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return u},default:function(){return b},exampleString:function(){return p},frontMatter:function(){return s},metadata:function(){return m},toc:function(){return d}});var o=n(87462),r=n(63366),l=(n(67294),n(3905)),i=(n(19055),n(2809)),a=n(38909),c=["components"],s={},u=void 0,m={unversionedId:"UX/ComponentsSection/Buttons and Links/AttachmentLink",id:"UX/ComponentsSection/Buttons and Links/AttachmentLink",title:"AttachmentLink",description:"export const exampleString = `<AttachmentLink",source:"@site/docs/UX/ComponentsSection/Buttons and Links/AttachmentLink.mdx",sourceDirName:"UX/ComponentsSection/Buttons and Links",slug:"/UX/ComponentsSection/Buttons and Links/AttachmentLink",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Buttons and Links/AttachmentLink",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Buttons and links",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Buttons and Links/"},next:{title:"BackButton",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Buttons and Links/BackButton"}},d=[],p="<AttachmentLink\nname={'filename'}\nformattedSize={'byteSize'}\na11yHint={'a11yHint'}\na11yValue={'a11yValue'}\nonPress={() => {console.log('press function')}}\nload={true}\n/>",f={toc:d,exampleString:p};function b(e){var t=e.components,n=(0,r.Z)(e,c);return(0,l.kt)("wrapper",(0,o.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)(a.Z,{componentName:"AttachmentLink",example:p,codeString:i.Z,mdxType:"ComponentTopInfo"}))}b.isMDXComponent=!0},2809:function(e,t){t.Z="import { AccessibilityRole, ScrollView, View } from 'react-native'\nimport React, { FC, RefObject, useEffect, useState } from 'react'\n\nimport { Box, BoxProps, TextView } from './index'\nimport { VABorderColors } from 'styles/theme'\nimport { triggerHaptic } from 'utils/haptics'\nimport { useAutoScrollToElement, useTheme } from 'utils/hooks'\n\nexport type AlertBoxProps = {\n  /** color of the border */\n  border: keyof VABorderColors\n  /** Optional boolean for determining when to focus on error alert boxes (e.g. onSaveClicked). */\n  focusOnError?: boolean\n  /** Optional ref for the parent scroll view. Used for scrolling to error alert boxes. */\n  scrollViewRef?: RefObject<ScrollView>\n  /** body of the alert */\n  text?: string\n  /** optional bolded title text */\n  title?: string\n  /** optional accessibility label for the text */\n  textA11yLabel?: string\n  /** optional accessibility label for the title */\n  titleA11yLabel?: string\n  /** optional accessibility role for the title */\n  titleRole?: AccessibilityRole\n}\n\n/**\n * Displays content in a box styled as an alert\n */\nconst AlertBox: FC<AlertBoxProps> = ({ border, children, focusOnError = true, scrollViewRef, title, text, textA11yLabel, titleA11yLabel, titleRole }) => {\n  const theme = useTheme()\n  const [scrollRef, viewRef, scrollToAlert] = useAutoScrollToElement()\n  const [shouldFocus, setShouldFocus] = useState(true)\n\n  const boxPadding = 20\n\n  useEffect(() => {\n    if (border === 'error' && scrollViewRef?.current && (title || text)) {\n      scrollRef.current = scrollViewRef.current\n      scrollToAlert(-boxPadding)\n    }\n    setShouldFocus(focusOnError)\n  }, [border, focusOnError, scrollRef, scrollToAlert, scrollViewRef, text, title])\n\n  const boxProps: BoxProps = {\n    backgroundColor: 'alertBox',\n    borderLeftWidth: theme.dimensions.alertBorderWidth,\n    borderLeftColor: border,\n    py: boxPadding,\n    px: boxPadding,\n  }\n\n  const vibrate = (): void => {\n    if (border === 'error') {\n      triggerHaptic('notificationError')\n    } else if (border === 'warning') {\n      triggerHaptic('notificationWarning')\n    }\n  }\n\n  const titleAccessibilityRole = titleRole ? titleRole : text || children ? 'header' : undefined\n\n  return (\n    <Box {...boxProps}>\n      {!!title && (\n        <View ref={viewRef} accessible={true} accessibilityLabel={titleA11yLabel || title} accessibilityRole={titleAccessibilityRole}>\n          <TextView variant=\"MobileBodyBold\" mb={text ? theme.dimensions.standardMarginBetween : 0}>\n            {title}\n          </TextView>\n        </View>\n      )}\n      {!!text && (\n        <View ref={!title ? viewRef : undefined} accessible={true} accessibilityLabel={textA11yLabel || text}>\n          <TextView variant=\"MobileBody\">{text}</TextView>\n        </View>\n      )}\n      {children}\n      {shouldFocus && vibrate()}\n    </Box>\n  )\n}\n\nexport default AlertBox\n"}}]);