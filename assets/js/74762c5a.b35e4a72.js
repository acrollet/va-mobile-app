"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5595],{38909:(e,n,t)=>{t.d(n,{Z:()=>u});var a=t(67294),o=t(19055),r=t(26396),s=t(58215),l=t(82224),c=t(36005);const i=e=>{let{props:n}=e;return n?a.createElement(a.Fragment,null,c.ZP.isEmpty(n)?a.createElement("pre",{className:"preText"},"This component does not have props defined"):a.createElement("table",null,a.createElement("thead",null,a.createElement("tr",null,a.createElement("th",null,"Name"),a.createElement("th",null,"Type"),a.createElement("th",null,"Default Value"),a.createElement("th",null,"Required"),a.createElement("th",null,"Description"))),a.createElement("tbody",null,Object.keys(n).map((e=>a.createElement("tr",{key:e},a.createElement("td",null,a.createElement("code",null,e)),a.createElement("td",{style:{minWidth:200}},n[e].type?.name),a.createElement("td",null,n[e].defaultValue&&n[e].defaultValue.value.toString()),a.createElement("td",null,n[e].required?"Yes":"No"),a.createElement("td",null,n[e].description))))))):null};function u(e){const n=(0,l.N)(e.componentName),{description:t,displayName:c,props:u}=n[0],m=`How to use the ${c} component`,p=`Full code for the ${c} component`;return a.createElement(a.Fragment,null,t,a.createElement("br",null),a.createElement("br",null),a.createElement(r.Z,null,a.createElement(s.Z,{value:"props",label:"Properties"},a.createElement(i,{props:u})),a.createElement(s.Z,{value:"example",label:"Example"},e.example&&a.createElement(o.Z,{title:m,className:"language-tsx test"},e.example)),a.createElement(s.Z,{value:"code",label:"Source Code"},e.codeString&&a.createElement(o.Z,{title:p,className:"language-tsx"},e.codeString)),a.createElement(s.Z,{value:"accessibility",label:"Accessibility"},a.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},82224:(e,n,t)=>{t.d(n,{N:()=>o});var a=t(28084);const o=e=>(0,a.default)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},78523:(e,n,t)=>{t.r(n),t.d(n,{contentTitle:()=>c,default:()=>C,exampleString:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>u});var a=t(87462),o=(t(67294),t(3905));t(95657),t(19055);const r="import React, { FC, ReactElement } from 'react'\n\nimport { CardStyleInterpolators, createStackNavigator } from '@react-navigation/stack'\nimport { TFunction } from 'i18next'\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs'\nimport _ from 'underscore'\n\nimport CarouselTabBar from './CarouselTabBar'\n\nconst CarouselTabNav = createBottomTabNavigator()\nconst CarouselStack = createStackNavigator()\n\nexport type CarouselScreen = {\n  /** name of component */\n  name: string\n\n  /** component to display in carousel */\n  component: FC<Record<string, unknown>>\n\n  /** optional accessibility hints for the skip button, continue button, and carousel indicators progress bar */\n  a11yHints?: {\n    skipHint?: string\n    carouselIndicatorsHint?: string\n    continueHint?: string\n    doneHint?: string\n    backHint?: string\n  }\n}\n\ntype CarouselStackComponentProps = {\n  /** list of screens with the screen name and the component in each item */\n  screenList: Array<CarouselScreen>\n}\n\nconst CarouselStackComponent: FC<CarouselStackComponentProps> = ({ screenList }) => {\n  return (\n    <CarouselStack.Navigator\n      screenOptions={{\n        headerShown: false,\n        cardStyleInterpolator: CardStyleInterpolators.forHorizontalIOS,\n        detachPreviousScreen: false,\n      }}>\n      {_.map(screenList, (screen, index) => {\n        return <CarouselStack.Screen name={screen.name as never} component={screen.component} key={index} />\n      })}\n    </CarouselStack.Navigator>\n  )\n}\n\ntype CarouselProps = {\n  /** list of screens with the screen name and the component in each item */\n  screenList: Array<CarouselScreen>\n\n  /** called when the skip button is clicked or the user has gone through all the carousel components */\n  onCarouselEnd: () => void\n\n  /** useTranslations t function to translate the labels */\n  translation: TFunction\n}\n\n/**A common component to set up a carousel of screens and display a carousel tab at the bottom of the screen, which displays a skip button, continue button, and a progress bar*/\nconst Carousel: FC<CarouselProps> = ({ screenList, onCarouselEnd, translation }) => {\n  return (\n    <CarouselTabNav.Navigator tabBar={(props): React.ReactNode => <CarouselTabBar {...props} onCarouselEnd={onCarouselEnd} translation={translation} screenList={screenList} />}>\n      <CarouselTabNav.Screen name=\"Main\" children={(): ReactElement => <CarouselStackComponent screenList={screenList} />} options={{ headerShown: false }} />\n    </CarouselTabNav.Navigator>\n  )\n}\n\nexport default Carousel\n";var s=t(38909);const l={},c=void 0,i={unversionedId:"UX/ComponentsSection/Navigation/Secondary/Carousel",id:"UX/ComponentsSection/Navigation/Secondary/Carousel",title:"Carousel",description:"",source:"@site/docs/UX/ComponentsSection/Navigation/Secondary/Carousel.mdx",sourceDirName:"UX/ComponentsSection/Navigation/Secondary",slug:"/UX/ComponentsSection/Navigation/Secondary/Carousel",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Navigation/Secondary/Carousel",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Secondary navigation",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Navigation/Secondary/"},next:{title:"CarouselTabBar",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Navigation/Secondary/CarouselTabBar"}},u=[],m="<Carousel screenList={screenList} onCarouselEnd={onCarouselEnd} translation={t} />",p={toc:u,exampleString:m},d="wrapper";function C(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)(s.Z,{componentName:"Carousel",example:m,codeString:r,mdxType:"ComponentTopInfo"}))}C.isMDXComponent=!0}}]);