"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[597],{38909:function(e,n,t){t.d(n,{Z:function(){return p}});var o=t(67294),a=t(19055),r=t(26396),l=t(58215),i=t(82224),s=t(36005),c=function(e){var n=e.props;return n?o.createElement(o.Fragment,null,s.ZP.isEmpty(n)?o.createElement("pre",{className:"preText"},"This component does not have props defined"):o.createElement("table",null,o.createElement("thead",null,o.createElement("tr",null,o.createElement("th",null,"Name"),o.createElement("th",null,"Type"),o.createElement("th",null,"Default Value"),o.createElement("th",null,"Required"),o.createElement("th",null,"Description"))),o.createElement("tbody",null,Object.keys(n).map((function(e){var t;return o.createElement("tr",{key:e},o.createElement("td",null,o.createElement("code",null,e)),o.createElement("td",{style:{minWidth:200}},null==(t=n[e].type)?void 0:t.name),o.createElement("td",null,n[e].defaultValue&&n[e].defaultValue.value.toString()),o.createElement("td",null,n[e].required?"Yes":"No"),o.createElement("td",null,n[e].description))}))))):null};function p(e){var n=(0,i.N)(e.componentName)[0],t=n.description,s=n.displayName,p=n.props,d="How to use the "+s+" component",u="Full code for the "+s+" component";return o.createElement(o.Fragment,null,t,o.createElement("br",null),o.createElement("br",null),o.createElement(r.Z,null,o.createElement(l.Z,{value:"props",label:"Properties"},o.createElement(c,{props:p})),o.createElement(l.Z,{value:"example",label:"Example"},e.example&&o.createElement(a.Z,{title:d,className:"language-tsx test"},e.example)),o.createElement(l.Z,{value:"code",label:"Source Code"},e.codeString&&o.createElement(a.Z,{title:u,className:"language-tsx"},e.codeString)),o.createElement(l.Z,{value:"accessibility",label:"Accessibility"},o.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},82224:function(e,n,t){t.d(n,{N:function(){return a}});var o=t(28084),a=function(e){return(0,o.default)()["docusaurus-plugin-react-docgen-typescript"].default.filter((function(n){return n.displayName===e}))}},92233:function(e,n,t){t.r(n),t.d(n,{contentTitle:function(){return c},default:function(){return x},exampleString:function(){return u},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var o=t(87462),a=t(63366),r=(t(67294),t(3905)),l=(t(19055),t(38909)),i=["components"],s={},c=void 0,p={unversionedId:"UX/ComponentsSection/Layout and Organization/CollapsibleView",id:"UX/ComponentsSection/Layout and Organization/CollapsibleView",title:"CollapsibleView",description:"expanded content revealed on click",source:"@site/docs/UX/ComponentsSection/Layout and Organization/CollapsibleView.mdx",sourceDirName:"UX/ComponentsSection/Layout and Organization",slug:"/UX/ComponentsSection/Layout and Organization/CollapsibleView",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Layout and Organization/CollapsibleView",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"NetworkConnectionError",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Errors/NetworkConnectionError"},next:{title:"LargeNavButton",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Layout and Organization/LargeNavButton"}},d=[],u="<CollapsibleView text={'title of dropdown'}> \n    <TextView>expanded content revealed on click</TextView> \n</CollapsibleView>",m={toc:d,exampleString:u};function x(e){var n=e.components,t=(0,a.Z)(e,i);return(0,r.kt)("wrapper",(0,o.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)(l.Z,{componentName:"CollapsibleView",example:u,codeString:"import React, { FC, useState } from 'react'\n\nimport { ColorVariant, TextArea } from './index'\nimport { Pressable, PressableProps, ViewStyle } from 'react-native'\nimport { a11yHintProp, testIdProps } from 'utils/accessibility'\nimport { useTheme } from 'utils/hooks'\nimport Box, { BoxProps } from './Box'\nimport TextView from './TextView'\nimport VAIcon, { VAIconProps } from './VAIcon'\n\n/**\n * Signifies props passed into {@link CollapsibleView}\n */\nexport type CollapsibleViewProps = {\n  /** text displayed on the touchable */\n  text: string\n  /** optional color for the touchable text */\n  textColor?: ColorVariant\n  /** optional param that renders the child content outside text area when set to false (defaults to true) */\n  contentInTextArea?: boolean\n  /** optional a11y hint */\n  a11yHint?: string\n  /** Whether to display any of the collapsible view in a text area. If false, contentInTextArea will have no effect. **/\n  showInTextArea?: boolean\n}\n\n/**\n * CollapsibleView that on click reveals content, which is hidden again on another click\n *\n * @returns CollapsibleView component\n */\nconst CollapsibleView: FC<CollapsibleViewProps> = ({ text, contentInTextArea = true, showInTextArea = true, a11yHint, textColor, children }) => {\n  const theme = useTheme()\n  const [expanded, setExpanded] = useState(false)\n\n  const onPress = (): void => {\n    setExpanded(!expanded)\n  }\n\n  const boxStyles: BoxProps = {\n    // flexShrink is necessary to keep textView from expanding too far and causing a gap between text contents and arrow icon\n    // also keeps textView from pushing arrow beyond right margin when large text is enabled\n    flexShrink: 1,\n    mr: 7,\n    borderBottomWidth: 2,\n    borderBottomColor: 'photoAdd', // todo rename photoAdd border color to be more abstract (talk to design)\n  }\n\n  const getArrowIcon = (): React.ReactNode => {\n    const iconProps: VAIconProps = {\n      fill: theme.colors.icon.chevronCollapsible,\n      name: expanded ? 'ArrowUp' : 'ArrowDown',\n      width: 9,\n      height: 7,\n    }\n    return <VAIcon {...iconProps} />\n  }\n\n  const pressableProps: PressableProps = {\n    onPress,\n    accessibilityState: { expanded },\n    accessibilityRole: 'tab',\n  }\n\n  const pressableStyles: ViewStyle = {\n    flexDirection: 'row',\n    alignItems: 'center',\n    minHeight: theme.dimensions.touchableMinHeight,\n  }\n\n  const childrenDisplayed = expanded && <Box>{children}</Box>\n\n  const touchableRow = (\n    <Box minHeight={theme.dimensions.touchableMinHeight}>\n      <Pressable {...testIdProps(text)} {...a11yHintProp(a11yHint || '')} style={pressableStyles} {...pressableProps}>\n        <Box {...boxStyles}>\n          <TextView color={textColor} variant={'MobileBody'}>\n            {text}\n          </TextView>\n        </Box>\n        {getArrowIcon()}\n      </Pressable>\n    </Box>\n  )\n\n  const a11yProps: BoxProps = {\n    accessibilityRole: 'tablist',\n  }\n\n  // If none of the content is shown in a text area\n  if (!showInTextArea) {\n    return (\n      <Box {...a11yProps}>\n        {touchableRow}\n        {childrenDisplayed}\n      </Box>\n    )\n  }\n\n  // If the pressable row and/or content is in a text area\n  return (\n    <Box {...a11yProps}>\n      <TextArea>\n        {touchableRow}\n        {contentInTextArea && childrenDisplayed}\n      </TextArea>\n      {!contentInTextArea && childrenDisplayed}\n    </Box>\n  )\n}\n\nexport default CollapsibleView\n",mdxType:"ComponentTopInfo"}))}x.isMDXComponent=!0}}]);