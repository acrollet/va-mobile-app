"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[5953],{38909:(e,n,o)=>{o.d(n,{Z:()=>m});var t=o(67294),s=o(19055),r=o(26396),i=o(58215),l=o(82224),c=o(36005);const a=e=>{let{props:n}=e;return n?t.createElement(t.Fragment,null,c.ZP.isEmpty(n)?t.createElement("pre",{className:"preText"},"This component does not have props defined"):t.createElement("table",null,t.createElement("thead",null,t.createElement("tr",null,t.createElement("th",null,"Name"),t.createElement("th",null,"Type"),t.createElement("th",null,"Default Value"),t.createElement("th",null,"Required"),t.createElement("th",null,"Description"))),t.createElement("tbody",null,Object.keys(n).map((e=>t.createElement("tr",{key:e},t.createElement("td",null,t.createElement("code",null,e)),t.createElement("td",{style:{minWidth:200}},n[e].type?.name),t.createElement("td",null,n[e].defaultValue&&n[e].defaultValue.value.toString()),t.createElement("td",null,n[e].required?"Yes":"No"),t.createElement("td",null,n[e].description))))))):null};function m(e){const n=(0,l.N)(e.componentName),{description:o,displayName:c,props:m}=n[0],p=`How to use the ${c} component`,d=`Full code for the ${c} component`;return t.createElement(t.Fragment,null,o,t.createElement("br",null),t.createElement("br",null),t.createElement(r.Z,null,t.createElement(i.Z,{value:"props",label:"Properties"},t.createElement(a,{props:m})),t.createElement(i.Z,{value:"example",label:"Example"},e.example&&t.createElement(s.Z,{title:p,className:"language-tsx test"},e.example)),t.createElement(i.Z,{value:"code",label:"Source Code"},e.codeString&&t.createElement(s.Z,{title:d,className:"language-tsx"},e.codeString)),t.createElement(i.Z,{value:"accessibility",label:"Accessibility"},t.createElement("pre",{className:"preText"},e.accessibilityInfo))))}},82224:(e,n,o)=>{o.d(n,{N:()=>s});var t=o(28084);const s=e=>(0,t.default)()["docusaurus-plugin-react-docgen-typescript"].default.filter((n=>n.displayName===e))},55626:(e,n,o)=>{o.r(n),o.d(n,{contentTitle:()=>c,default:()=>v,exampleString:()=>p,frontMatter:()=>l,metadata:()=>a,toc:()=>m});var t=o(87462),s=(o(67294),o(3905));o(95657),o(19055);const r="import { AppState, AppStateStatus } from 'react-native'\nimport { SvgProps } from 'react-native-svg'\nimport { isFinite } from 'underscore'\nimport React, { FC, useEffect } from 'react'\n\nimport { VAIconColors, VATextColors } from 'styles/theme'\nimport { useAppDispatch, useFontScale, useTheme } from 'utils/hooks'\n\nimport { Box, BoxProps } from 'components'\n// New svgs need to set `fill` to `#000` and `stroke` to `#00F`. See /svgs for examples\n// Navigation\nimport BenefitsSelected from './svgs/navIcon/benefitsSelected.svg'\nimport BenefitsUnselected from './svgs/navIcon/benefitsUnselected.svg'\nimport HealthSelected from './svgs/navIcon/healthSelected.svg'\nimport HealthUnselected from './svgs/navIcon/healthUnselected.svg'\nimport HomeSelected from './svgs/navIcon/homeSelected.svg'\nimport HomeUnselected from './svgs/navIcon/homeUnselected.svg'\nimport PaymentsSelected from './svgs/navIcon/paymentsSelected.svg'\nimport PaymentsUnselected from './svgs/navIcon/paymentsUnselected.svg'\nimport ProfileSelected from './svgs/navIcon/profileSelected.svg'\nimport ProfileUnselected from './svgs/navIcon/profileUnselected.svg'\n\n// Arrows\nimport ArrowDown from './svgs/chevron-down.svg'\nimport ArrowLeft from './svgs/chevron-left.svg'\nimport ArrowRight from './svgs/chevron-right.svg'\nimport ArrowUp from './svgs/chevron-up.svg'\n\n// forces icons\n\nimport Airforce from './svgs/dodBranch/air-force.svg'\nimport Army from './svgs/dodBranch/army.svg'\nimport CoastGuard from './svgs/dodBranch/coast-guard.svg'\nimport Marines from './svgs/dodBranch/marine.svg'\nimport Navy from './svgs/dodBranch/navy.svg'\n\n// Links\nimport Calendar from './svgs/links/calendar.svg'\nimport Chat from './svgs/links/chat.svg'\nimport Directions from './svgs/links/directions.svg'\nimport ExternalLink from './svgs/links/circle_external_link.svg'\nimport Phone from './svgs/links/phone.svg'\nimport PhoneTTY from './svgs/links/phone-tty.svg'\nimport RightArrowInCircle from './svgs/links/right-arrow-blue-circle.svg'\nimport Text from './svgs/links/text.svg'\n\n// Webview\nimport WebviewBack from './svgs/webview/chevron-left-solid.svg'\nimport WebviewForward from './svgs/webview/chevron-right-solid.svg'\nimport WebviewOpen from './svgs/webview/external-link-alt-solid.svg'\nimport WebviewRefresh from './svgs/webview/redo-solid.svg'\n\n// VASelector\nimport DisabledRadio from './svgs/radio/radioDisabled.svg'\nimport EmptyCheckBox from './svgs/checkbox/checkBoxEmpty.svg'\nimport EmptyRadio from './svgs/radio/radioEmpty.svg'\nimport ErrorCheckBox from './svgs/checkbox/checkBoxError.svg'\nimport FilledCheckBox from './svgs/checkbox/checkBoxFilled.svg'\nimport FilledRadio from './svgs/radio/radioFilled.svg'\nimport IntermediateCheckBox from './svgs/checkbox/checkBoxIntermediate.svg'\n\n// white icons with changeable filled circle\nimport WhiteCheckCircle from './svgs/circleWhiteIcon/white-check-circle.svg'\nimport WhiteCloseCircle from './svgs/circleWhiteIcon/white-close-circle.svg'\n\n// Misc\n\nimport { AccessibilityState } from 'store/slices'\nimport { RootState } from 'store'\nimport { updateFontScale } from 'utils/accessibility'\nimport { useSelector } from 'react-redux'\nimport Add from './svgs/add.svg'\nimport BuildingSolid from './svgs/buildingSolid.svg'\nimport Bullet from './svgs/bullet.svg'\nimport CheckMark from './svgs/check-mark.svg'\nimport CircleCheckMark from './svgs/checkmark-in-circle.svg'\nimport Compose from './svgs/compose.svg'\nimport DatePickerArrows from './svgs/date-picker-arrows.svg'\nimport Delete from './svgs/delete.svg'\nimport EllipsisSolid from './svgs/ellipsisSolid.svg'\nimport ExclamationTriangleSolid from './svgs/exclamationTriangleSolid.svg'\nimport FolderSolid from './svgs/folder-solid.svg'\nimport InboxSolid from './svgs/inbox-solid.svg'\nimport InfoIcon from './svgs/info-circle.svg'\nimport Lock from './svgs/webview/lock-solid.svg'\nimport Logo from './svgs/vaParentLogo/logo.svg'\nimport Minus from './svgs/minus.svg'\nimport PaperClip from './svgs/paperClip.svg'\nimport PhoneSolid from './svgs/phoneSolid.svg'\nimport QuestionMark from './svgs/questionMark.svg'\nimport Remove from './svgs/remove.svg'\nimport Reply from './svgs/reply.svg'\nimport Save from './svgs/folder-medical-solid.svg'\nimport TrashSolid from './svgs/trash-solid.svg'\nimport Truck from './svgs/truck.svg'\nimport UnreadIcon from './svgs/unread_icon.svg'\nimport VideoCamera from './svgs/videoCamera.svg'\n\nexport const VA_ICON_MAP = {\n  HomeSelected,\n  HomeUnselected,\n  HealthSelected,\n  HealthUnselected,\n  BenefitsSelected,\n  BenefitsUnselected,\n  ProfileSelected,\n  ProfileUnselected,\n  PaymentsSelected,\n  PaymentsUnselected,\n  Add,\n  ArrowDown,\n  ArrowUp,\n  ArrowLeft,\n  ArrowRight,\n  Airforce,\n  Army,\n  Bullet,\n  Calendar,\n  Compose,\n  CircleCheckMark,\n  CoastGuard,\n  Delete,\n  Directions,\n  EmptyCheckBox,\n  FilledCheckBox,\n  IntermediateCheckBox,\n  FolderSolid,\n  EmptyRadio,\n  EllipsisSolid,\n  FilledRadio,\n  DisabledRadio,\n  Marines,\n  Minus,\n  Navy,\n  PaperClip,\n  Phone,\n  PhoneTTY,\n  Chat,\n  Text,\n  RightArrowInCircle,\n  Reply,\n  WebviewBack,\n  WebviewForward,\n  WebviewOpen,\n  WebviewRefresh,\n  Lock,\n  DatePickerArrows,\n  CheckMark,\n  Logo,\n  ErrorCheckBox,\n  QuestionMark,\n  Remove,\n  UnreadIcon,\n  VideoCamera,\n  PhoneSolid,\n  ExclamationTriangleSolid,\n  TrashSolid,\n  InboxSolid,\n  BuildingSolid,\n  InfoIcon,\n  WhiteCheckCircle,\n  WhiteCloseCircle,\n  Truck,\n  ExternalLink,\n  Save,\n}\n/**\n *  Props that need to be passed in to {@link VAIcon}\n */\nexport type VAIconProps = BoxProps & {\n  /**  enum name of the icon to use {@link VA_ICON_MAP} **/\n  name: keyof typeof VA_ICON_MAP\n\n  /** Fill color for the icon */\n  fill?: keyof VAIconColors | keyof VATextColors | string\n\n  /** Stroke color of the icon */\n  stroke?: keyof VAIconColors | string\n\n  /**  optional number use to set the width; otherwise defaults to svg's width */\n  width?: number\n\n  /**  optional number use to set the height; otherwise defaults to svg's height */\n  height?: number\n\n  /** optional boolean that prevents the icon from being scaled when set to true */\n  preventScaling?: boolean\n\n  /** Optional TestID */\n  testID?: string\n}\n\n/**\n * A common component to display assets(svgs). Svgs need to place in VAIcon/svgs folder. Set fill to #000 and stroke to #00F in the svg so VAIcon component can set the fill/stroke color. Examples/details can be found in VAIcon component.\n *\n * @returns VAIcon component\n */\nconst VAIcon: FC<VAIconProps> = ({ name, width, height, fill, stroke, preventScaling, testID, ...boxProps }) => {\n  const theme = useTheme()\n  const fs: (val: number) => number = useFontScale()\n  const dispatch = useAppDispatch()\n  const { fontScale } = useSelector<RootState, AccessibilityState>((state) => state.accessibility)\n  let iconProps = Object.create({ name, width, height, stroke, preventScaling, fill })\n\n  useEffect(() => {\n    // Listener for the current app state, updates the font scale when app state is active and the font scale has changed\n    const sub = AppState.addEventListener('change', (newState: AppStateStatus): void => updateFontScale(newState, fontScale, dispatch))\n    return (): void => sub.remove()\n  }, [dispatch, fontScale])\n\n  if (fill) {\n    iconProps = Object.assign({}, iconProps, { fill: theme.colors.icon[fill as keyof VAIconColors] || theme.colors.text[fill as keyof VATextColors] || fill })\n  }\n\n  if (stroke) {\n    iconProps = Object.assign({}, iconProps, { stroke: theme.colors.icon[stroke as keyof VAIconColors] || stroke })\n  }\n\n  const Icon: FC<SvgProps> | undefined = VA_ICON_MAP[name]\n  if (!Icon) {\n    return <></>\n  }\n\n  if (width && isFinite(width)) {\n    iconProps = Object.assign({}, iconProps, { width: preventScaling ? width : fs(width) })\n  }\n\n  if (height && isFinite(height)) {\n    iconProps = Object.assign({}, iconProps, { height: preventScaling ? height : fs(height) })\n  }\n\n  return (\n    <Box testID={testID} {...boxProps}>\n      <Icon {...iconProps} />\n    </Box>\n  )\n}\n\nexport default VAIcon\n";var i=o(38909);const l={},c=void 0,a={unversionedId:"UX/ComponentsSection/Uncategorized/VAIcon",id:"UX/ComponentsSection/Uncategorized/VAIcon",title:"VAIcon",description:"// set icon color using theme",source:"@site/docs/UX/ComponentsSection/Uncategorized/VAIcon.mdx",sourceDirName:"UX/ComponentsSection/Uncategorized",slug:"/UX/ComponentsSection/Uncategorized/VAIcon",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Uncategorized/VAIcon",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"NotificationManager",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Uncategorized/NotificationManager"},next:{title:"VAImage",permalink:"/va-mobile-app/docs/UX/ComponentsSection/Uncategorized/VAImage"}},m=[],p="<VAIcon name={'Logo'} />\n<VAIcon name={'ArrowUp'} fill={theme.colors.icon.inactive}/> // set icon color using theme\n ",d={toc:m,exampleString:p},g="wrapper";function v(e){let{components:n,...o}=e;return(0,s.kt)(g,(0,t.Z)({},d,o,{components:n,mdxType:"MDXLayout"}),(0,s.kt)(i.Z,{componentName:"VAIcon",example:p,codeString:r,mdxType:"ComponentTopInfo"}))}v.isMDXComponent=!0}}]);