[{"title":"OpenAPI Docs","type":0,"sectionRef":"#","url":"docs/Engineering/API/OpenAPI Docs","content":"OpenAPI Docs OpenAPI Docs","keywords":""},{"title":"Auth Diagrams","type":0,"sectionRef":"#","url":"docs/Engineering/Architecture/Auth Diagrams","content":"Auth Diagrams","keywords":""},{"title":"Intro","type":0,"sectionRef":"#","url":"docs/Engineering/Architecture/Intro","content":"Intro","keywords":""},{"title":"Background Workers","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/BackgroundWorkers","content":"Background Workers TODO Sidekiq jobs, pre-caching...","keywords":""},{"title":"Data Flow","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/DataFlow","content":"Data Flow TODO Endpoint data flow: controller (request) -&gt; param contract -&gt; proxy/service -&gt; middleware -&gt; adapter -&gt; model -&gt; serializer -&gt; controller (response)...","keywords":""},{"title":"Continuous Integration and Deployment","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/ContinuousIntegrationAndDeployment","content":"Continuous Integration and Deployment RspecRubocopSimpleCov","keywords":""},{"title":"Directory Layout","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/DirectoryLayout","content":"Directory Layout TODO vets-api app vs lib vs mobile module...","keywords":""},{"title":"Documentation","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/Documentation","content":"Documentation Automatically published via a github action anytime the YAML file changes in vets-api.","keywords":""},{"title":"Feature Flagging","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/FeatureFlagging","content":"","keywords":""},{"title":"Flipper​","type":1,"pageTitle":"Feature Flagging","url":"docs/Engineering/BackEnd/Architecture/FeatureFlagging#flipper","content":"We use Flipper to manage feature flags. Instructions for use and best practices can be found here "},{"title":"Access​","type":1,"pageTitle":"Feature Flagging","url":"docs/Engineering/BackEnd/Architecture/FeatureFlagging#access","content":""},{"title":"Staging​","type":1,"pageTitle":"Feature Flagging","url":"docs/Engineering/BackEnd/Architecture/FeatureFlagging#staging","content":"In order to turn features on and off in staging and in review instances, you will first need to create an id.me account. You can do this by going to staging, clicking &quot;sign in&quot;, choosing to sign in with id.me, then choosing to sign in using the google integration. Enter your Ad Hoc email address. It will then take you through an identity verification process. This is done on the id.me sandbox environment. DO NOT PROVIDE YOUR REAL SSN OR OTHER SENSITIVE DATA. IT WILL ACCEPT ANY PERSONAL IDENTIFYING INFORMATION. Once this is done, you will need to add your Ad Hoc email to the flipper section in config/settings.yml. You will have flipper access once this file has been deployed to staging. "},{"title":"Production​","type":1,"pageTitle":"Feature Flagging","url":"docs/Engineering/BackEnd/Architecture/FeatureFlagging#production","content":"In order to change feature flags in production, you will need a real id.me account. Because you're only allowed to have one id.me account, it is strongly recommended that you sign up using your personal email address. You can create an account at id.me. You can then add other email addresses to your id.me profile. If you've already created a sandbox id.me account with your AdHoc email address, you may experience difficulty linking your AdHoc address to your production account. You will then need to add your production id.me email address to config/settings.yml. You will have flipper access once this file has been deployed to production. "},{"title":"Toggling Feature Flags​","type":1,"pageTitle":"Feature Flagging","url":"docs/Engineering/BackEnd/Architecture/FeatureFlagging#toggling-feature-flags","content":"Flipper URLS (note the 'api' in the url) staging: https://staging-api.va.gov/flipper/featuresproduction: https://api.va.gov/flipper/features From there, you can select individual features and turn them on and off for all users, individual users, or even a percentage of random users. "},{"title":"IAM","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/Iam","content":"","keywords":""},{"title":"Authentication Sequence Diagram​","type":1,"pageTitle":"IAM","url":"docs/Engineering/BackEnd/Architecture/Iam#authentication-sequence-diagram","content":" "},{"title":"Vets-API Authentication Activity Diagram​","type":1,"pageTitle":"IAM","url":"docs/Engineering/BackEnd/Architecture/Iam#vets-api-authentication-activity-diagram","content":" "},{"title":"Provider Details​","type":1,"pageTitle":"IAM","url":"docs/Engineering/BackEnd/Architecture/Iam#provider-details","content":"DSLogon - Oldest authentication method. Connected to DoD. Vets who already have this login info can use it to access services on VA.gov and Mobile that don't require MFA. MHV - Allows users to use their My HealtheVet credentials to utilize other services such as va.gov and our mobile app. Similar to DSLogon users, authenticating this way can't access services that require users to have MFA. Id.me - Owned by a 3rd party company, paid for by the VA. Requires identity verification and MFA (via OTPs). Login.gov - Newest authentication method. Recently built and owned by the VA. Requires identity verification and MFA (via many different options). Long term goal is to move everyone to login.gov so all users will be verified and the VA can stop paying for id.me "},{"title":"Test Users​","type":1,"pageTitle":"IAM","url":"docs/Engineering/BackEnd/Architecture/Iam#test-users","content":"DSLogon - Currently we only have one DSL test user, Arfan Russel. The login password in for can be found in the VA Mobile 1Password under &quot;DSlogon staging (claims)&quot; MHV - Users can be found here: MHV test users. Premium users are the only ones who work with the mobile app. Id.me - Can be found here: MVI staging test users or can be found in the VA.gov 1Password vault under vets.gov.user+NNN@gmail.com where NNN is a number 1 to 3 digits long. Login.gov - Located in the VA.gov 1Password vault. Can be found by searching &quot;login.gov&quot;. "},{"title":"Parallel Calls","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/ParallelCalls","content":"Parallel Calls The mobile API often needs to make requests to external services to fetch data to return to the client. In some cases, a single request from the client can require data from multiple external services. This can cause those requests to be slow and creates a bad user experience. To mitigate the issue, we use the Parallel Gem, which provides a simple interface for executing functions in parallel using threads. A simple use pattern is: Find the common location where code branches off into the multiple network calls.Wrap the methods that initiate those branches in lambdas.Pass an array of those lambdas to the gem, telling it how many threads to use and specifying that it should execute the call method on each lambda to execute it.Capture return values if needed.It is possible to rescue errors either within lambdas or around the entire parallelization code block. This allows us the ability to capture errors and either log them or provide helpful information back to the client. If we do not rescue, errors will stop execution and be handled as they normally would.","keywords":""},{"title":"JSON-API","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/JsonApi","content":"JSON-API TODO link to docs, Fastserializers...","keywords":""},{"title":"Datadog","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Monitoring/DataDog","content":"","keywords":""},{"title":"Integrations​","type":1,"pageTitle":"Datadog","url":"docs/Engineering/BackEnd/Monitoring/DataDog#integrations","content":"One of the major Pros of Datadog is a plethora of already created integration steps. Datadog integration documentation  "},{"title":"Exploring Metrics​","type":1,"pageTitle":"Datadog","url":"docs/Engineering/BackEnd/Monitoring/DataDog#exploring-metrics","content":"You can search for existing metrics using Datadog's explore page. Within Datadog navigate to Metrics -&gt; Explore from the sidebar. Selecting a metric from here will automatically create a graph that can be modified and exported to new or existing dashboards. Explore documentation  "},{"title":"Creating Graphs​","type":1,"pageTitle":"Datadog","url":"docs/Engineering/BackEnd/Monitoring/DataDog#creating-graphs","content":"Navigate to Dashboards -&gt; Quick Graphs or edit a graph from an existing dashboardChoose the metric to graph by searching or selecting it from the dropdown next to 'Metric'  Select filters for the metric  Decide how to aggregate the metric (Max, Min, Avg, Sum)  Apply functions to the metric. Functions documentation  Example: Total requests per second to any mobile endpoint averaged over 5 minutes  "},{"title":"Formulas​","type":1,"pageTitle":"Datadog","url":"docs/Engineering/BackEnd/Monitoring/DataDog#formulas","content":"You can compare multiple metrics by using formulas. Example: Request error rate averaged over 5 minutes  "},{"title":"Dashboards​","type":1,"pageTitle":"Datadog","url":"docs/Engineering/BackEnd/Monitoring/DataDog#dashboards","content":"Dashboards allow you to display many different widgets. Select the 'Add widgets' button then select the desired widget. Widgets documentation  Additionally you can add variables for use across all widgets within a single dashboard. At the top of a dashboard select the pencil icon then fill in the details of your variable. These variables can be accessed from within a widget using $[variable name]. Template variables documentation  "},{"title":"Creating Alerts​","type":1,"pageTitle":"Datadog","url":"docs/Engineering/BackEnd/Monitoring/DataDog#creating-alerts","content":"Define a metric to alert on. This works the same as discussed in the graphs section above  Define alert thresholds. These will dictate when the alert triggers  Decide how you would like to be notified when the alert triggers  Define message you want to appear when alert triggers  To receive alert messages in slack the Datadog slack tool will need to be added to the channel where you want notifications then the channel also needs to be added via the slack integration within Datadog. Once this is complete the channel will be in a dropdown in the 'Notify your team' section shown above. Slack integration docs  "},{"title":"Good Places to Get Started​","type":1,"pageTitle":"Datadog","url":"docs/Engineering/BackEnd/Monitoring/DataDog#good-places-to-get-started","content":"Datadog 101 videos and Datadog documentation home page "},{"title":"Existing Mobile Dashboards​","type":1,"pageTitle":"Datadog","url":"docs/Engineering/BackEnd/Monitoring/DataDog#existing-mobile-dashboards","content":"Dashboard and Alerts. If you have issues accessing the dashboard or the VA Datadog site reach out in the shared mobile slack channel "},{"title":"Logs","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Monitoring/Logs","content":"","keywords":""},{"title":"How to Access and Search Logs​","type":1,"pageTitle":"Logs","url":"docs/Engineering/BackEnd/Monitoring/Logs#how-to-access-and-search-logs","content":"The Grafana UI is used as the visualization interface for logs aggregated by Loki. To view logs, Log in to the VFS Grafana instance 🧦 (Socksneeded; use GitHub account for auth; see image below)  Go to Explore (the little compass icon on the left-hand navigation; see image below)  Select the Loki environment that you're interested in (from the drop-down near the top-left of the page; see image below)  You'll now see a query interface for searching and analyzing log files:  In the Log browser, enter a query starting with an app label to view all logs for a given app. Many developers will be interested in vets-api logs: To use this use case as an example, click &quot;Log browser&quot;Make sure &quot;app&quot; is highlightedScroll down and highlight &quot;vets-api-server&quot; or &quot;vets-api-worker&quot; depending on your needClick &quot;Show logs&quot;  Note: The query can be updated to include two labels such as the app and specific log file. {app=&quot;vets-api-server&quot;, filename=~&quot;.+json.log&quot;} Copy After selecting the labels for the data you are looking for, modify the query in the browser to include the text or the regex of the data you are looking for and then run the query. A basic query example that searches for errors within the logs: { app=~&quot;vets-api-server&quot;, filename=~&quot;.+json.log&quot; } |~ &quot;error&quot;` Copy  If searching for data that has a specific key and value, the data can be searched using regex. In the example below, The query is looking for log lines that contain a key of &quot;message&quot; with a value of &quot;Mobile Request&quot;.  "},{"title":"How to Parse Logs​","type":1,"pageTitle":"Logs","url":"docs/Engineering/BackEnd/Monitoring/Logs#how-to-parse-logs","content":"LogQL can be used to parse data out of certain log formats such as JSON or traditional Apache log formats. To parse logs, you need to enter a query of the data that you are looking for, then include the regex expression to remove the prefixed timestamp, container name, and pipe symbol. Once you use regex to extract the JSON blob to an object, you can then parse it with the built-in JSON parser. The regex expression that needs to be included in the to extract JSON to an object is: | regexp &quot;(?P&lt;time&gt;\\\\d\\\\d:\\\\d\\\\d:\\\\d\\\\d) (?P&lt;process_name&gt;\\\\w+.\\\\d) \\\\s+ (\\\\|) (?P&lt;json&gt;.+)&quot; Copy To parse JSON blob, also include in the query: | line_format &quot;{{.json}}&quot; | json Copy The query end-result will look like: {app=&quot;vets-api-server&quot;, filename=~&quot;.+json.log&quot;} |~ &quot;error&quot; | regexp &quot;(?P&lt;time&gt;\\\\d\\\\d:\\\\d\\\\d:\\\\d\\\\d) (?P&lt;process_name&gt;\\\\w+.\\\\d) \\\\s+ (\\\\|) (?P&lt;json&gt;.+)&quot; | line_format &quot;{{.json}}&quot; | json Copy Where &quot;error&quot; can be replaced with any data that you are searching for within the logs.  In the resulting logs, click on one of the logs to see additional details, including extracted fields and other labels that are tagged onto that specific message. Within the list of labels will be the json label that contains the json blob. The contents of the json are then listed under &quot;detected fields&quot;.  "},{"title":"Services","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Architecture/Services","content":"","keywords":""},{"title":"Upstream Service Map​","type":1,"pageTitle":"Services","url":"docs/Engineering/BackEnd/Architecture/Services#upstream-service-map","content":" "},{"title":"Service Contacts​","type":1,"pageTitle":"Services","url":"docs/Engineering/BackEnd/Architecture/Services#service-contacts","content":"Service\tSlack Channel\tContactsCaseflow\t#caseflow-support-team CDC\tN/A\tiisinfo@cdc.gov DSLogon\t#vsa-authd-exp EMIS\t#vsa-authd-exp EVSS\t#evss-prod ID.ME\t#idme-va-gov Lighthouse\t#lighthouse-infrastructure MHV\t#mhv-vetsgov, #vsa-authd-exp VAOS\t#vaos-team VEText\t#va-mobile-app-push-notifications Vet360\t#vsa-authd-exp\t "},{"title":"Sentry","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Monitoring/Sentry","content":"Sentry Sentry is our automated error tracking tool. New exceptions in the API will cause Sentry to send us an email alert. We also audit the existing errors when fixing tech debt or silencing errors that are expected, i.e. unexceptional, such as when sub-systems return validation or not-found errors as 500s rather than 422s or 404s. All our classes are namespaced with a 'Mobile' Ruby module. When auditing errors a custom search of 'Mobile' filters out other vets-api errors. To further refine the search to only 'error', rather than 'warn' or 'info' level errors you can toggle open the search builder bar. And then select 'error' from the list. Once you've found an error, or have been linked to one directly from an alert email, you'll be taken to the error details page. The majority of our errors occur during HTTP responses. Often the errors first present themselves deep within the API framework's base classes. Selecting the 'Full' tab reveals the full call stack and as seen below the true source of the error. Once the location of the error has been determined the next step is determining the cause. Errors from bugs we have introduced (500s in our API responses) will have clear Ruby errors such as 'NoMethodError'. For errors from sub-systems you'll need to check the 'ADDITIONAL DATA' section of the error details page. As seen below this section includes the errors from the upstream service as well as any custom tags added for that specific service. In this case 'ICN' and 'MHV Correlation ID' can be used to cross-reference Loki based logs to get an idea of the full request flow and any user actions that lead up to the error.","keywords":""},{"title":"On-Call Procedure","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Monitoring/OnCallProcedure","content":"","keywords":""},{"title":"Handling Backend Alerts​","type":1,"pageTitle":"On-Call Procedure","url":"docs/Engineering/BackEnd/Monitoring/OnCallProcedure#handling-backend-alerts","content":"First use tools described above to track down the source of an issue. Look up the error in Sentry. You can find expanded error details, stack traces, and parameters in Sentry. A good query to start with is searching for the 'Mobile' namespace sorted by 'Last Seen'. Add more filters by toggling open the search builder sidebar on the right of the search field.Loki logs via Grafana can help you find more data or trace the requests before the error occurred.Our Datadog dashboard offers a wider metric based view of how often the issue has been occurring. It's also the first place to look for latency issues and to check if an upstream service is down.Datadog's Application Performance Management tool is also configured for vets-api. It breaks down the ruby, database, and upstream calls down so you can determine the source latency. The APM also provides p50 and p99 latency data to let us know how slow the worst 50% and 1% of calls are doing. If you've determined that the source of the issue is an upstream service contact the relevant party.If you believe a forward proxy is down or having trouble connecting to the service. Then contact the Operations team via DSVA Slack's #vfs-platform-support channel. To open a support ticket type /support. This will open a modal window with a form rather than posting a Slack message. For the 'I need help from' field select 'Operations Team'. Then add the details in the 'Summary of request' field.Finally if the error is not from the API, a forward proxy connection to an upstream service, or an upstream service itself but rather an issue with infrastructure that we (and VSP/VFS) control then a SNOW ticket should be opened. Only a DSVA team member can do this. Reach out to a stakeholder and have them open a SNOW ticket for you (currently Travis Newby or Leanna Miller). "},{"title":"Statsd Metrics","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Monitoring/Statsd","content":"Statsd Metrics You can create custom Mobile metrics within Vets API by adding new statsd entries to modules/mobile/config/initializers/statsd.rb. More information about Statsd can be found at: https://github.com/Shopify/statsd-instrument . In order for metics to be picked up an entry for the associated endpoint must also be in ansible/deployment/config/revproxy-vagov/vars/nginx_components.yml in the DevOps repo","keywords":""},{"title":"API Tokens","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Testing/ApiTokens","content":"","keywords":""},{"title":"Authorization and token types​","type":1,"pageTitle":"API Tokens","url":"docs/Engineering/BackEnd/Testing/ApiTokens#authorization-and-token-types","content":"The mobile app currently uses two authorization services: IAM and SIS (short for Sign-In Service). IAM is a third party service and SIS is an in-house VA auth service. We expect to eventually sunset IAM in favor of SIS. The tokens are visually distinct: IAM tokens are 20 characters long, while SIS tokens are over a thousand characters long. The one important functional difference is that you have to include an additional header when using SIS tokens: Authentication-Method: SIS "},{"title":"Fetching API tokens​","type":1,"pageTitle":"API Tokens","url":"docs/Engineering/BackEnd/Testing/ApiTokens#fetching-api-tokens","content":"We host a web app on heroku for fetching api tokens. You can fetch tokens in two ways: Manual: Go to the token generator web app and log in with a test user. User credentials are in 1Password. Automated: These requests use basic auth (ask teammates for username and password) and will only work if the test user has previously been logged in via the manual approach and the user's refresh token is still valid. There are routes for fetching IAM tokens: GET https://va-mobile-cutter.herokuapp.com/auth/iam/token/judy.morrison@id.me And SIS tokens: GET https://va-mobile-cutter.herokuapp.com/auth/sis/token/judy.morrison@id.me "},{"title":"Working on the token app​","type":1,"pageTitle":"API Tokens","url":"docs/Engineering/BackEnd/Testing/ApiTokens#working-on-the-token-app","content":"The code for the token fetcher app can be found here and instructions for development can be found in the README. To work on the app, you will need write access to the repo and admin access to the heroku instance. "},{"title":"Prerequisites","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Testing/Prerequisites","content":"Prerequisites This guide assumes that you have locally: Configured and turned on the SOCKS proxyChecked out the DevOps repoConfigured your AWS credentials and MFA","keywords":""},{"title":"Review Instances","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Testing/ReviewInstances","content":"","keywords":""},{"title":"API Calls​","type":1,"pageTitle":"Review Instances","url":"docs/Engineering/BackEnd/Testing/ReviewInstances#api-calls","content":""},{"title":"Making Requests​","type":1,"pageTitle":"Review Instances","url":"docs/Engineering/BackEnd/Testing/ReviewInstances#making-requests","content":"As with the URLs you've been accessing so far, all API requests must go through the SOCKS proxy. You can configure this in your API client (Postman, Insomnia, Paw, etc). The proxy URL is socks5h://127.0.0.1:2001. Requests, as in staging and production, require that you include an 'Authorization' header with a bearer token. An example request using the SOCKS proxy to the user endpoint would look like below. curl --proxy socks5h://127.0.0.1:2001 --request GET \\ --url http://a8710e1eb08cd469aa43874b25f86278-api.review.vetsgov-internal/mobile/v1/user \\ --header 'Authorization: Bearer EESBp0xiLD6p1g86q4g1' --header 'X-Key-Inflection: camel' Copy "},{"title":"Console Access​","type":1,"pageTitle":"Review Instances","url":"docs/Engineering/BackEnd/Testing/ReviewInstances#console-access","content":"You can SSH into the review instance and test code directly in a review instance Rails console. You retrieve the instance name via the Jenkins console output. To get to Jenkins, return to the PR on Github and click 'Show environments' within the 'This branch was successfully deployed' section. Click the 'Deployed' link to the left of the 'View deployment' button. This will open Jenkins. Next, select 'Console Output' from the menu on the left.  Then search for &quot;SSH at&quot;. 07:15:00 [0;32m msg: Review instance available at http://9bbbb1184faf0a6cb1c551390c073923.review.vetsgov-internal/, or via SSH at ip-172-30-18-119.us-gov-west-1.compute.internal[0m Copy In the example above 'ip-172-30-18-119.us-gov-west-1.compute.internal' is the address for the instance. To open a Rails console SSH in and then run the console Docker command as below. ssh ip-172-30-18-119.us-gov-west-1.compute.internal cd ~/vets-api; docker-compose -f docker-compose.review.yml exec vets-api bundle exec rails c {&quot;host&quot;:&quot;0fca69c2c0fa&quot;,&quot;application&quot;:&quot;vets-api-server&quot;,&quot;environment&quot;:&quot;production&quot;,&quot;timestamp&quot;:&quot;2021-12-02T16:32:05.979827Z&quot;,&quot;level&quot;:&quot;info&quot;,&quot;level_index&quot;:2,&quot;pid&quot;:632,&quot;thread&quot;:&quot;65000&quot;,&quot;name&quot;:&quot;Rails&quot;,&quot;message&quot;:&quot;Raven 2.13.0 ready to catch errors&quot;} 2021-12-02 16:32:08.420676 W [632:65000] SemanticLogger::Appenders -- Ignoring attempt to add a second console appender: SemanticLogger::Appender::File since it would result in duplicate console output. Loading production environment (Rails 6.1.4.1) irb(main):001:0&gt; Copy "},{"title":"User sessions​","type":1,"pageTitle":"Review Instances","url":"docs/Engineering/BackEnd/Testing/ReviewInstances#user-sessions","content":"Once you've started a Rails console you'll need a user session to test most features. As with the API calls you'll need an API token. Given a token the IAM session manager will create a user for you. irb(main):001:0&gt; user = IAMSSOeOAuth::SessionManager.new('EESBp0xiLD6p1g86q4g1').find_or_create_user Copy "},{"title":"Staging Instances","type":0,"sectionRef":"#","url":"docs/Engineering/BackEnd/Testing/StagingInstances","content":"","keywords":""},{"title":"API Calls​","type":1,"pageTitle":"Staging Instances","url":"docs/Engineering/BackEnd/Testing/StagingInstances#api-calls","content":"API calls are made in a similar way to the review instances above. Note that your API client may not connect to staging if going through the SOCKS proxy. The API URL for staging is http://staging-api.va.gov/mobile. Staging uses the same API tokens as review instances. curl --request GET \\ --url https://staging-api.va.gov/mobile/v1/user \\ --header 'Authorization: Bearer 6qdITmRgDqEmsdGyzNj7' \\ --header 'X-Key-Inflection: camel' Copy "},{"title":"Console Access​","type":1,"pageTitle":"Staging Instances","url":"docs/Engineering/BackEnd/Testing/StagingInstances#console-access","content":"To connect to a staging instance, open a terminal locally and enter 'mfa' followed by a code from a 2FA tool such as Authy. Change into the devops repo dir, and run the SSM script with 'staging' as an argument. The script will return a numbered list of available instances. mfa {2fa code} AWS Session credentials saved. Will expire in 12 hours cd {path to devops checkout dir} sh utilities/ssm.sh vets-api-server staging Finding apps for vets-api-server staging -e Found the following instances: Instance ID Private Ip Name i-0cb43936846956681 10.247.34.198 dsva-vagov-staging-deployment-vagov-staging-vets-api-server-20211201-221337-asg i-002a2d845a9bbfb47 10.247.34.238 dsva-vagov-staging-deployment-vagov-staging-vets-api-server-20211201-221337-asg i-09bf54f2024d20400 10.247.34.61 dsva-vagov-staging-deployment-vagov-staging-vets-api-server-20211201-221337-asg i-0900c0675f349b4b5 10.247.34.15 dsva-vagov-staging-deployment-vagov-staging-vets-api-server-20211201-221337-asg i-0304e9c0fc5d4c4e3 10.247.35.117 dsva-vagov-staging-deployment-vagov-staging-vets-api-server-20211201-221337-asg i-0a9d52a236730155f 10.247.35.40 dsva-vagov-staging-deployment-vagov-staging-vets-api-server-20211201-221337-asg What instance do you want to connect to? (input only the number eg: 1, 2, 4) Type 'q' to exit 1) -n 5) -n 9) -n 2) i-0cb43936846956681 6) i-09bf54f2024d20400 10) i-0304e9c0fc5d4c4e3 3) -n 7) -n 11) -n 4) i-002a2d845a9bbfb47 8) i-0900c0675f349b4b5 12) i-0a9d52a236730155f #? Copy Select an instance by typing its number, e.g. 2. Then change to a super user and run the Docker command to launch the Rails console. #? 2 Starting session to: i-0cb43936846956681 Starting session with SessionId: First.Last-09fdb960f34e99c93 sh-4.2$ sudo su [root@ip-10-247-34-198 /]# docker exec -it vets-api bundle exec rails c {&quot;host&quot;:&quot;0fca69c2c0fa&quot;,&quot;application&quot;:&quot;vets-api-server&quot;,&quot;environment&quot;:&quot;production&quot;,&quot;timestamp&quot;:&quot;2021-12-02T16:32:05.979827Z&quot;,&quot;level&quot;:&quot;info&quot;,&quot;level_index&quot;:2,&quot;pid&quot;:632,&quot;thread&quot;:&quot;65000&quot;,&quot;name&quot;:&quot;Rails&quot;,&quot;message&quot;:&quot;Raven 2.13.0 ready to catch errors&quot;} 2021-12-02 16:32:08.420676 W [632:65000] SemanticLogger::Appenders -- Ignoring attempt to add a second console appender: SemanticLogger::Appender::File since it would result in duplicate console output. Loading production environment (Rails 6.1.4.1) irb(main):001:0&gt; Copy You can then create a user session, as in a review instance. irb(main):001:0&gt; user = IAMSSOeOAuth::SessionManager.new('EESBp0xiLD6p1g86q4g1').find_or_create_user Copy "},{"title":"Accessibility Information","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation","content":"","keywords":""},{"title":"IOS​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#ios","content":"IOS has a handful of ways to test a11y. Here are tools we can use to verify a11y on a real IOS device. "},{"title":"VoiceOver(Screen Reader)​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#voiceoverscreen-reader","content":"Enable VoiceOver via Settings -&gt; Accessibility -&gt; VoiceOver -&gt; toggle onAccessibilityHints are not turned on by default. To turn on Settings -&gt; Accessibility -&gt; Verbosity -&gt; toggle on Speak HintsGestures for traversing "},{"title":"Voice Control(Voice Navigation)​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#voice-controlvoice-navigation","content":"Enable Voice Control via Settings -&gt; Accessibility -&gt; Voice Control -&gt; toggle onVoice Commands Show names -&gt; Tap &lt;name&gt;Show numbers -&gt; Tap &lt;number&gt; "},{"title":"Wireless Keyboard​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#wireless-keyboard","content":"Use right and left arrows to traverse (tab is not supported)Hit up and down at the same time to activate an item "},{"title":"Accessibility Inspector(Simulator Only)​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#accessibility-inspectorsimulator-only","content":"Open Xcode -&gt; Play to start simulator -&gt; Xcode Menu Item -&gt; Open Developer Tool -&gt; Accessibility Inspector "},{"title":"Android​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#android","content":"Like IOS, Android provides tools to help verify a11y. A real device is needed to test a11y on Android. "},{"title":"TalkBack(Screen Reader)​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#talkbackscreen-reader","content":"Enable Talkback via Settings -&gt; Accessibility -&gt; TalkBack -&gt; toggle on Swipe right or left to move between itemsDouble-tap to activate an itemDrag 2 fingers to scroll "},{"title":"Voice Access(Voice Navigation)​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#voice-accessvoice-navigation","content":"Download/Install Voice Access from the Google Play Store Settings -&gt; Accessibility -&gt; Voice Access -&gt; toggle onStart Voice Access by swiping down from the top of your phone and tap to start Voice Commands Show numbers -&gt; Tap &lt;number&gt; "},{"title":"Wireless Keyboard​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#wireless-keyboard-1","content":"Use tab key to traverseHit enter to activate an itemSee React Navigation and Wireless Keyboard "},{"title":"Screen Reader Pronunciations​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#screen-reader-pronunciations","content":"Some screen readers(ex. Samsung phones) will not always pronounce words like &quot;VA&quot; correctly - will sometimes read it as &quot;VAAH&quot; instead of &quot;VA&quot;. To get round this, add in the unicode \\ufeff in between letters(ex. VA -&gt; V\\ufeffA) for your translations. Text is unchanged from the users pov and the screen reader will pronounce the word correctly.  "},{"title":"Touch Targets​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#touch-targets","content":"Most common components will have it setup so that the text or wrapper will use theme.dimensions.touchableMinHeight so pressable elements have a minimum of 44 height. We can add additional height without changing the font/styles by adding additional padding where it is needed. Work with QA or design if the default minimum height for touchable targets should be bigger. You can visually view the touch target size by going to debug menu -&gt; Show Inspector -&gt; Toggle on Touchable -&gt; select the element  "},{"title":"React Native Support​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#react-native-support","content":"React Native has a variety of properties that can be set to support a11y. Most common components will already support the a11y properties listed in the link. "},{"title":"Accessibility with Integration Tests​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#accessibility-with-integration-tests","content":"We originally used the following functions to set a11y properties to better support integration test since without them we were unable to query for certain elements on the screen. testIdProps for accessibilityLabels(when the literal text needs to sound different for TalkBack or VoiceOver). a11yHintProp for accessibilityHints(additional text read by TalkBack or VoiceOver ex. Button that opens a link outside the app -&gt; &quot;This page will open in your device's browser&quot;). a11yValueProp for accessibilityValue(additional text read by TalkBack or VoiceOver ex. The first item in a list of items -&gt; &quot;Item 1, 1 of 10&quot;). Note AccessibilityState can be used as normal without a special function. "},{"title":"Notable Quirks​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#notable-quirks","content":""},{"title":"React Navigation and Wireless Keyboard​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#react-navigation-and-wireless-keyboard","content":"There has been noticeable issues using wireless keyboard with react navigation that has been tracked here. "},{"title":"Copy and Paste and how it affects Accessibility​","type":1,"pageTitle":"Accessibility Information","url":"docs/Engineering/FrontEnd/Accessibility/AccessibilityInformation#copy-and-paste-and-how-it-affects-accessibility","content":"We can make text-only elements(ex. TextView) have the ability to copy and paste by adding selectable to its property. We limit the areas(ex. Secure Messaging) where we want to do this because any selectable element gets read as pressable from voice navigation apps like Voice Access and Voice Control. See related ticket here. "},{"title":"AlertBox","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/AlertBox","content":"AlertBox Displays content in a box styled as an alert PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionborder\tstring | number | symbol Yes\tcolor of the border text\tstring No\tbody of the alert title\tstring No\toptional bolded title text textA11yLabel\tstring No\toptional accessibility label for the text titleA11yLabel\tstring No\toptional accessibility label for the title titleRole\tAccessibilityRole No\toptional accessibility role for the title","keywords":""},{"title":"AccordionCollapsible","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/AccordionCollapsible","content":"AccordionCollapsible A common component to show content inside of a collapsible accordion. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionheader\tReactNode Yes\tcomponent to display as header of accordion expandedContent\tReactNode Yes\tcomponent to display only when the accordion is expanded testID\tstring No\ttestID for the header a11yHint\tstring No\ta11yHint for the header collapsedContent\tReactNode No\tcomponent to display on when the accordion is collapsed hideArrow\tboolean No\tif true hides the accordion arrow and only displays header &amp; collapsed content customOnPress\t(expandedValue?: boolean) =&gt; void No\tcustom on press call if more action is needed when expanding/collapsing the accordion expandedInitialValue\tboolean No\tsets the initial value of expanded if an accordion should already be expanded on render noBorder\tboolean No\tgets rid of border of TextArea so the top and bottom borders don't double up in message threads when accordion is opened headerRef\tRef&lt;View&gt; No\tRef for the header section","keywords":""},{"title":"AppVersionAndBuild","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/AppVersionAndBuild","content":"AppVersionAndBuild Common component to display the apps version and build number PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontextColor\tstring | number | symbol\tbodyText\tNo\tcolor of the text textWeight\tstring | number | symbol\tMobileBody\tNo\tfont weight of the text","keywords":""},{"title":"AttachmentLink","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/AttachmentLink","content":"AttachmentLink A common component for an attachment link display. Can be used to show file attachments in a message thread. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionname\tstring Yes\tName of link/attachment formattedSize\tstring No\tSize of file attachment and size unit wrapped in parentheses onPress\t() =&gt; void No\tonPress function a11yHint\tstring No\toptional a11y Hint a11yValue\tstring No\toptional a11y value load\tboolean No\tEnables loading display","keywords":""},{"title":"BackButton","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/BackButton","content":"BackButton Button used by the stack navigation to go back to the previous screen PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononPress\t() =&gt; void Yes\tthe onPress function for the back button canGoBack\tboolean Yes\ta boolean indicating if the user has a screen to go back to; if false, the back button will be hidden label\tBackButtonLabel Yes\ttranslation key to use for the display text, as well as the testID for the component showCarat\tboolean No\twhether to show the carat left of the text a11yHint\tstring No\toptional param to add accessibility hint to back button focusOnButton\tboolean\ttrue\tNo\tboolean to specify if we want accesibility to focus on the back button","keywords":""},{"title":"BaseListItem","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/BaseListItem","content":"BaseListItem Reusable component for menu items that take up the full width of the screen that is touchable. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontestId\tstring No\ttest id string also used for the accessibility label a11yHint\tstring Yes\tThe a11y hint text a11yValue\tstring No\toptional a11y text value a11yRole\tAccessibilityRole No\toptional accessibility role. By default it will be button a11yState\tAccessibilityState No\toptional accessibility state onPress\t() =&gt; void No\tonPress callback decorator\tButtonDecoratorType No\tDecorator Type to use decoratorProps\tListItemDecoratorProps No\tOptional props to be passed to the decorator children\tany No\tOptional child elements to use instead of listOfText if you need to do special styling backgroundColor\tBackgroundVariant No\tOptional background color for an individual item activeBackgroundColor\tBackgroundVariant No\tOptional active background color for an individual item claimsRequestNumber\tnumber No\tOptional file request number for the number indicator fileUploaded\tboolean No\tOptional file request if file was loaded to show check mark","keywords":""},{"title":"Carousel","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/CarouselComponents/Carousel","content":"Carousel A common component to set up a carousel of screens and display a carousel tab at the bottom of the screen, which displays a skip button, continue button, and a progress bar PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionscreenList\tCarouselScreen[] Yes\tlist of screens with the screen name and the component in each item onCarouselEnd\t() =&gt; void Yes\tcalled when the skip button is clicked or the user has gone through all the carousel components translation\tTFunction Yes\tuseTranslations t function to translate the labels","keywords":""},{"title":"CarouselTabBar","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/CarouselComponents/CarouselTabBar","content":"CarouselTabBar A common component with the carousel tab bar content. Displays skip button, continue button, and a progress bar PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionnavigation\t{ dispatch(action: Readonly&lt;{ type: string; payload?: object; source?: string; target?: string; }&gt; | ((state: Readonly&lt;{ key: string; index: number; routeNames: string[]; history?: unknown[]; routes: NavigationRoute&lt;ParamListBase, string&gt;[]; type: string; stale: false; }&gt;) =&gt; Readonly&lt;...&gt;)): void; ... 6 more ...; g... Yes\tthe tab navigators navigation helpers onCarouselEnd\t() =&gt; void Yes\tcalled when the skip button is clicked or the user has gone through all the carousel components translation\tTFunction Yes\tuseTranslations t function to translate the labels screenList\tCarouselScreen[] Yes\tlist of screens with the screen name and the component in each item","keywords":""},{"title":"Box","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/Box","content":"Box A common component for layout. It conforms to the convention of [m] [my] [mx] [mt] [mb] [ml] [mr] for specifying margins. It also accepts dimensions for padding in the same form. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionm\tNumOrStrPx No\tset margin of this component mt\tNumOrStrPx No\tset margin top of this component mr\tNumOrStrPx No\tset margin right of this component mb\tNumOrStrPx No\tset margin bottom of this component ml\tNumOrStrPx No\tset margin left of this component mx\tNumOrStrPx No\tset margin right and left of this component my\tNumOrStrPx No\tset margin top and bottom of this component p\tNumOrStrPx No\tset padding of this component pt\tNumOrStrPx No\tset padding top of this component pr\tNumOrStrPx No\tset padding right of this component pb\tNumOrStrPx No\tset padding bottom of this component pl\tNumOrStrPx No\tset padding left of this component px\tNumOrStrPx No\tset padding right and left of this component py\tNumOrStrPx No\tset padding top and bottom of this component top\tstring | number No\tsets the number of logical pixels to offset the top edge of this component left\tstring | number No\tsets the number of logical pixels to offset the left edge of this component right\tstring | number No\tsets the number of logical pixels to offset the right edge of this component bottom\tstring | number No\tsets the number of logical pixels to offset the bottom edge of this component position\t&quot;relative&quot; | &quot;absolute&quot; No\tsets the positioning to relative or absolute of this component display\t&quot;none&quot; | &quot;flex&quot; No\tsets the display type of this component flex\tnumber No\tsets the flex property of this component flexGrow\tnumber No\tdescribes how any space within a container should be distributed among its children along the main axis flexShrink\tnumber No\tflexShrink describes how to shrink children along the main axis in the case in which the total size of the children overflows the size of the container on the main axis flexWrap\t&quot;wrap&quot; | &quot;nowrap&quot; | &quot;wrap-reverse&quot; No\tcontrols whether children can wrap around after they hit the end of a flex container flexDirection\t&quot;column&quot; | &quot;row&quot; No\tcontrols which directions children of a container go overflow\t&quot;hidden&quot; | &quot;visible&quot; | &quot;scroll&quot; No\tcontrols how children are measured and displayed justifyContent\t&quot;center&quot; | &quot;flex-start&quot; | &quot;flex-end&quot; | &quot;space-between&quot; No\taligns children in the main direction alignItems\t&quot;center&quot; | &quot;flex-start&quot; | &quot;flex-end&quot; No\taligns children in the cross direction alignSelf\t&quot;auto&quot; | FlexAlignType No\tcontrols how a child aligns in the cross direction, overriding the alignItems of the parent width\tstring | number No\tsets the width of this component minWidth\tstring | number No\tsets the min width of this component height\tstring | number No\tsets the height of this component minHeight\tstring | number No\tsets the min height of this component textAlign\t&quot;left&quot; | &quot;right&quot; | &quot;center&quot; No\talings the text of this component backgroundColor\tBackgroundVariant No\tsets the background color of this component opacity\tnumber No\tsets the opacity of this component borderWidth\tBorderWidths No\tsets the border width of this component borderColor\tBorderColorVariant No\tsets the border color of this component borderStyle\tBorderStyles No\tsets the border style of this component borderBottomWidth\tBorderWidths No\tsets the bottom border's width of this component borderBottomColor\tBorderColorVariant No\tsets the bottom border's color of this component borderTopWidth\tBorderWidths No\tsets the top border's width of this component borderTopColor\tBorderColorVariant No\tsets the top border's color of this component borderRightWidth\tBorderWidths No\tsets the right border's width of this component borderRightColor\tBorderColorVariant No\tsets the right border's color of this component borderLeftWidth\tBorderWidths No\tsets the left border's width of this component borderLeftColor\tBorderColorVariant No\tsets the left border's color of this component borderRadius\tstring | number No\tsets the border's radius of this component borderRadiusTop\tstring | number No\tsets the border radius just for the top of the component borderRadiusBottom\tstring | number No\tsets the border radius just for the bottom of the component","keywords":""},{"title":"ClickForActionLink","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/ClickForActionLink","content":"ClickForActionLink Reusable component used for opening native calling app, texting app, or opening a url in the browser PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiondisplayedText\tstring Yes\tphone number or text for url that is displayed to the user, may be different than actual number or url used linkType\tLinkTypeOptions Yes\tstring signifying the type of link it is (click to call/text/go to website/add to calendar) numberOrUrlLink\tstring No\tsignifies actual link or number used for link, may be different than text displayed linkUrlIconType\tLinkUrlIconType No\tsignifies icon type of link metaData\tCalendarMetaData No\tobject with additional data needed to perform the given action testID\tstring No\toptional testID fireAnalytic\t() =&gt; void No\toptional function to fire analytic events when the link is clicked","keywords":""},{"title":"ClickToCallPhoneNumber","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/ClickToCallPhoneNumber","content":"ClickToCallPhoneNumber A common component for a blue underlined phone number with a phone icon beside it - clicking brings up phone app - automatically renders TTY info PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionphone\tany No\tsets the phone information displayedText\tstring No\tsets the text that will be displayed center\tboolean No\tboolean to align items to the center","keywords":""},{"title":"CollapsibleView","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/CollapsibleView","content":"CollapsibleView CollapsibleView that on click reveals content, which is hidden again on another click PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontext\tstring Yes\ttext displayed on the touchable textColor\tColorVariant No\toptional color for the touchable text contentInTextArea\tboolean\ttrue\tNo\toptional param that renders the child content outside text area when set to false (defaults to true) a11yHint\tstring No\toptional a11y hint showInTextArea\tboolean\ttrue\tNo\tWhether to display any of the collapsible view in a text area. If false, contentInTextArea will have no effect. *","keywords":""},{"title":"CtaButton","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/CtaButton","content":"CtaButton CtaButton that shows up on the HomeScreen' and 'Contact VA' option on HomeScreen PropertiesExampleSource CodeAccessibility This component does not have props defined","keywords":""},{"title":"CrisisLineCta","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/CrisisLineCta","content":"CrisisLineCta Reusable Crisis Line component that shows up as a 'sticky' on the Home screen PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononPress\t() =&gt; void Yes\tfunction called when the banner is pressed","keywords":""},{"title":"DefaultList","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/DefaultList","content":"DefaultList Component to show a list composed of lines of display text built using TextLines PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionitems\tDefaultListItemObj[] &amp; ListItemObj[] Yes\tlist of items of which a button will be rendered per item selectable\tboolean No\tif true the text will be selectable title\tstring No\toptional title to use for the list titleA11yLabel\tstring No\toptional a11y hint for the title","keywords":""},{"title":"BasicError","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/ErrorComponents/BasicError","content":"BasicError A common component to show an error PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononTryAgain\t() =&gt; void Yes\tfunction called when the Try again button is pressed messageText\tstring Yes\tmessage to display headerText\tstring No\ttext to appear in bold headerA11yLabel\tstring No\taccessibility hint for the header buttonA11yHint\tstring No\thint for the try again button label\tstring No\tlabel for button and accessibility title","keywords":""},{"title":"CallHelpCenter","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/ErrorComponents/CallHelpCenter","content":"CallHelpCenter A common component to show the help center contact info for when an error happens PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononTryAgain\t() =&gt; void No\toptional function called when the Try again button is pressed titleText\tstring No\toptional text for the title titleA11yHint\tstring No\toptional title a11y hint errorText\tstring No\toptional text for the error errorA11y\tstring No\toptional a11y hint for the error callPhone\tstring No\toptional phone number","keywords":""},{"title":"DowntimeError","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/ErrorComponents/DowntimeError","content":"DowntimeError Common component to show an alert when the service is down PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionscreenID\tScreenIDTypes Yes\tThe screen id for the screen that has the errors","keywords":""},{"title":"ErrorComponent","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/ErrorComponents/ErrorComponent","content":"ErrorComponent Main error handling component. This component will show the proper screen according to the type of error. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionscreenID\tScreenIDTypes Yes\tThe screen id for the screen that has the errors onTryAgain\t() =&gt; void No\toptional function called when the Try again button is pressed","keywords":""},{"title":"NetworkConnectionError","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/ErrorComponents/NetworkConnectionError","content":"NetworkConnectionError A common component to show an alert for when it is a network error PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononTryAgain\t() =&gt; void Yes\tfunction called when the Try again button is pressed","keywords":""},{"title":"FocusedNavHeaderText","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/FocusedNavHeaderText","content":"FocusedNavHeaderText Component to use as a navigation header where accessibility focus is needed on the header in iOS on screen load PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionheaderTitle\tstring Yes\tsets the title's text","keywords":""},{"title":"FooterButton","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/FooterButton","content":"FooterButton A common component to show a button at the bottom of the screen that takes the full width of the display. Optional Icon can be passed in to render next to text PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontext\tstring Yes\ttext that will display on the button textColor\tkeyof VATextColors | keyof VAButtonTextColors No\ttext color iconProps\tany No\tprops for icon onPress\t() =&gt; void No\tfunction called when pressed backGroundColor\tBackgroundVariant No\tbackground color testID\tstring No\ttest id a11yHint\tstring No\toptional accessibility hint","keywords":""},{"title":"FormAttachments","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/FormComponents/FormAttachments","content":"FormAttachments A common component for form attachments, displays Attachments heading with helper link, already attached items with remove option, and an optional large button. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionoriginHeader\tstring Yes\theader for page title display removeOnPress\t(attachment: any) =&gt; void No\tcallback called on click of remove link for an attachment largeButtonProps\tOmit&lt;VAButtonProps, &quot;iconProps&quot; | &quot;buttonType&quot;&gt; No\toptional props for large button attachmentsList\tany[] No\tlist of current attachments a11yHint\tstring No\toptional a11y Hint","keywords":""},{"title":"PickerList","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/FormComponents/PickerList","content":"PickerList Display a list of buttons with text and optional actions PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionitems\tany[] Yes\tlist of items of which a button will be rendered per item title\tstring No\toptional title to use for the list titleA11yLabel\tstring No\toptional a11y hint for the title","keywords":""},{"title":"RadioGroup","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/FormComponents/RadioGroup","content":"RadioGroup A common component to display radio button selectors for a list of selectable items PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionoptions\tradioOption&lt;T&gt;[] Yes\tZero based array of options. An option is an object with both a value which is the relevant data, and a label which is displayed as a string to represent the value. value\tT No\tCurrently selected option. An initial value can be used or this can be left undefined which will have nothing initially selected. onChange\t(val: T) =&gt; void Yes\tCall back function that passes the newly selected option's value as an argument to. disabled\tboolean\tfalse\tNo\toptional boolean that disables the radio group when set to true","keywords":""},{"title":"FormWrapper","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/FormComponents/FormWrapper","content":"FormWrapper A common component to wrap forms in that handles error states of each field PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionfieldsList\tFormFieldType&lt;T&gt;[] Yes\tlist of form field objects to display onSave\t() =&gt; void Yes\tcallback called when onSaveClicked is true and there are no field errors onSaveClicked\tboolean Yes\tboolean that when set to true calls the form validation and set field errors if they exist, otherwise it calls onSave setOnSaveClicked\t(value: boolean) =&gt; void Yes\tcallback that updates the onSaveClicked prop setFormContainsError\t(containsError: boolean) =&gt; void No\toptional callback that sets to true if the form currently has an error resetErrors\tboolean No\toptional boolean that resets all field errors when set to true setResetErrors\t(value: boolean) =&gt; void No\toptional callback to set the resetErrors prop. must be set when resetErrors is set.","keywords":""},{"title":"VASelector","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/FormComponents/VASelector","content":"VASelector A common component to display a checkbox with text PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionselectorType\tSelectorType\tSelectorType.Checkbox\tNo\trender checkbox or radio button selected\tboolean Yes\twhen true displays the filled checkbox/radio , when false displays the empty checkbox/radio onSelectionChange\t(selected: boolean) =&gt; void Yes\tsets the value of selected on click of the checkbox/radio labelKey\tstring Yes\ttranslated labelKey displayed next to the checkbox/radio labelArgs\t{ [key: string]: string; } No\toptional arguments to pass in with the labelKey during translation disabled\tboolean No\toptional boolean that disables the VASelector/radio when set to true a11yLabel\tstring No\toptional accessibilityLabel a11yHint\tstring No\toptional accessibilityHint error\tstring No\toptional error to display for the checkbox setError\t(value?: string) =&gt; void No\toptional callback to set the error message isRequiredField\tboolean No\toptional boolean that marks the component as required","keywords":""},{"title":"VAModalPicker","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/FormComponents/VAModalPicker","content":"VAModalPicker A common component to display a picker for the device with an optional label PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionselectedValue\tstring Yes\tCurrently selected item from list of options onSelectionChange\t(selectValue: string) =&gt; void Yes\tCalled when the selected value is changed pickerOptions\tPickerItem[] Yes\tlist of items of containing types label and value for each option in the picker labelKey\tstring No\ti18n key for the text label next the picker field disabled\tboolean No\toptional boolean that disables the picker when set to true testID\tstring No\toptional testID for the overall component isRequiredField\tboolean No\toptional boolean that displays required text next to label if set to true helperTextKey\tstring No\toptional key for string to display underneath label setError\t(error?: string) =&gt; void No\toptional callback to update the error message if there is an error error\tstring No\tif this exists updated picker styles to error state validationList\tValidationFunctionItems[] No\toptional list of validation functions to check against includeBlankPlaceholder\tboolean No\tIf true, will include a blank option at the top of the list with a blank value displayButton\tboolean\tfalse\tNo\trenders a button instead of form field buttonText\tstring No\ti18n key text for the name of the button confirmBtnText\tstring No\ti18n key text for the picker confirm button","keywords":""},{"title":"VATextInput","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/FormComponents/VATextInput","content":"VATextInput Text input with a label PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptioninputType\tVATextInputTypes Yes\tType of the input. Will determine the keyboard used value\tstring No\tInitial value of the input. If blank it will show the placeholder labelKey\tstring No\ti18n key for the label onChange\t(val: string) =&gt; void Yes\tHandle the change in input value maxLength\tnumber No\tMaximum length of the input onEndEditing\t() =&gt; void No\tHandle input once the user is done typing testID\tstring No\toptional testID for the overall component inputRef\tRefObject&lt;TextInput&gt; No\toptional ref value isRequiredField\tboolean No\toptional boolean that displays required text next to label if set to true helperTextKey\tstring No\toptional key for string to display underneath label setError\t(error?: string) =&gt; void No\toptional callback to update the error message if there is an error error\tstring No\tif this exists updates input styles to error state validationList\tValidationFunctionItems[] No\toptional list of validation functions to check against isTextArea\tboolean No\toptional boolean that when true displays a text area rather than a single line text input setInputCursorToBeginning\tboolean No\toptional boolean to set the cursor to the beginning of a string value","keywords":""},{"title":"HeaderTitle","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/HeaderTitle","content":"HeaderTitle Common component used for the navigation header title PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionfocusRef\tRef&lt;View&gt; No\tref for this component headerTitle\tstring No\tsets the header title accessible\tboolean\ttrue\tNo\tsets if it is accessible testID\tstring No\tsets the test id accessabilityLabel\tstring No\tsets the accessibility label","keywords":""},{"title":"LabelTag","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/LabelTag","content":"LabelTag Common component to show a text inside of a tag PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontext\tstring Yes\tMessage to be shown on the tag backgroundColor\tBackgroundVariant No\toptional background color for tag color\tColorVariant No\toptional text color for tag variant\tstring | number | symbol No\toptional variant for tag text","keywords":""},{"title":"LargeNavButton","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/LargeNavButton","content":"LargeNavButton Reusable large navigation button PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontitle\tstring Yes\tstring for header and used to create testID for accessibility subText\tstring Yes\tstring secondary text that seats on the second row a11yHint\tstring No\tstring for accessibility hint onPress\t() =&gt; void Yes\tfunction to be called when press occurs backgroundColor\tBackgroundVariant No\tBackgroundVariant color for background backgroundColorActive\tBackgroundVariant No\tBackgroundVariant color for active state textColor\tstring | number | symbol No\tVATextColors color for text iconColor\tstring | number | symbol No\tVAIconColors icon color borderWidth\tBorderWidths No\tBorderWidths possible widths for HomeNavButton borderColor\tBorderColorVariant No\tBorderColorVariant color for the borders borderColorActive\tBorderColorVariant No\tBorderColorVariant color for active state for the borders borderStyle\tBorderStyles No\tBorderStyles denotes the styling of the borders tagCount\tnumber No\tnumber for the tag tagCountA11y\tstring No\ta11y for the tag","keywords":""},{"title":"List","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/List","content":"List A common component for showing a list of &lt;ListItem&gt;. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionitems\tListItemObj[] Yes\tlist of items of which a button will be rendered per item title\tstring No\toptional title to use for the list titleA11yLabel\tstring No\toptional a11y hint for the title","keywords":""},{"title":"MessageAlert","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/MessageAlert","content":"MessageAlert Common component to show a message alert when saving or sending a secure message PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionhasValidationError\tboolean No\tsets if there is validation errors saveDraftAttempted\tboolean No\tsets if attempted to save a draft savingDraft\tboolean No\tsets that the draft is being saved","keywords":""},{"title":"MessageList","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/MessageList","content":"MessageList Display a list of buttons with text and optional actions PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionitems\tMessageListItemObj[] &amp; ListItemObj[] Yes\tlist of items of which a button will be rendered per item title\tstring No\toptional title to use for the list titleA11yLabel\tstring No\toptional a11y hint for the title","keywords":""},{"title":"LoadingComponent","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/LoadingComponent","content":"LoadingComponent A common component to show a loading spinner PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontext\tstring No\tText to be shown under the spinner a11yLabel\tstring No\tAccessibilityLabel for the text justTheSpinnerIcon\tboolean No\tParam to show the spinner icon only and not the full page with text spinnerHeight\tnumber No\tspinner height spinnerWidth\tnumber No\tspinner width spinnerColor\tstring No\tHex string to set the spinner color","keywords":""},{"title":"MessagesCountTag","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/MessagesCountTag","content":"MessagesCountTag A common component to show a count of a particular item within a page before clicking to enter that page. For example, this tag would be used to display the number of unread messages in one's inbox. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionunread\tnumber Yes\tnumber to be shown on the tag","keywords":""},{"title":"MultiTouchCard","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/MultiTouchCard","content":"MultiTouchCard PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiontopOnPress\t() =&gt; void No\tcalled when the top button is pressed topText\tstring No\tText to display in the top button topTextColor\tstring | number | symbol No\tcolor of the text in the top bar topBackgroundColor\tBackgroundVariant No\tbackground color of the top button topIconColor\tstring | number | symbol No\tcolor of the icon if necessary to contrast the background a11yValue\tstring No\taccessibility value used by all three buttons topA11yHint\tstring No\thint for the top button action middleOnPress\t() =&gt; void No\tcalled when the middle button is pressed middleA11yHint\tstring No\thint for the middle button action middleContent\tReactElement&lt;any, string | JSXElementConstructor&lt;any&gt;&gt; Yes\tcontent to display in the middle button bottomOnPress\t() =&gt; void No\tcalled when the bottom button is pressed bottomContent\tReactElement&lt;any, string | JSXElementConstructor&lt;any&gt;&gt; No\tcontent to display in the bottom button bottomA11yHint\tstring No\thint for the bottom button action","keywords":""},{"title":"NotificationManger","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/NotificationManger","content":"NotificationManger notification manager component to handle all push logic PropertiesExampleSource CodeAccessibility This component does not have props defined","keywords":""},{"title":"NavigationTabBar","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/NavigationTabBar","content":"NavigationTabBar Component for the bottom tab navigation PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionstate\tTabNavigationState&lt;ParamListBase&gt; Yes\tthe tab navigators current state navigation\t{ dispatch(action: Readonly&lt;{ type: string; payload?: object; source?: string; target?: string; }&gt; | ((state: Readonly&lt;{ key: string; index: number; routeNames: string[]; history?: unknown[]; routes: NavigationRoute&lt;ParamListBase, string&gt;[]; type: string; stale: false; }&gt;) =&gt; Readonly&lt;...&gt;)): void; ... 6 more ...; g... Yes\tthe tab navigators navigation helpers translation\tTFunction Yes\tuseTranslations t function to translate the labels","keywords":""},{"title":"Pagination","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/Pagination","content":"Pagination A common component for showing pagination on the page. Displays previous arrow, next arrow, and copy message based on current page and item. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionpage\tnumber Yes\tpage number totalEntries\tnumber Yes\ttotal number of items pageSize\tnumber Yes\tpageSize onPrev\t() =&gt; void Yes\tfunction to be called when previous is selected onNext\t() =&gt; void Yes\tfunction to be called when next is selected","keywords":""},{"title":"SaveButton","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/SaveButton","content":"SaveButton A common component for the save button located at the header. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononSave\t() =&gt; void Yes\tfunction to run on save pressed disabled\tboolean Yes\tdisables this component a11yHint\tstring No\ta11y hint for this component","keywords":""},{"title":"SignoutButton","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/SignoutButton","content":"SignoutButton Common component for the sign out button PropertiesExampleSource CodeAccessibility This component does not have props defined","keywords":""},{"title":"SegmentedControl","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/SegmentedControl","content":"SegmentedControl A common component for filtering UI views by segments or lanes. Used for things like toggling between Active/Completed claims and Future/Past Appointments PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononChange\t(selection: string) =&gt; void Yes\tfunction to call when the selected value has changed values\tstring[] Yes\tThe values to signify selection options titles\tstring[] Yes\tthe text to display in the selection option UI selected\tnumber Yes\tthe index of the currently selected item. used to set initial state accessibilityHints\tstring[] No\toptional list of accessibility hints, ordering dependent on values/titles ordering","keywords":""},{"title":"SimpleList","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/SimpleList","content":"SimpleList Component to show a list with one line of text per item PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionitems\tSimpleListItemObj[] &amp; ListItemObj[] Yes\tlist of items of which a button will be rendered per item title\tstring No\toptional title to use for the list titleA11yLabel\tstring No\toptional a11y hint for the title","keywords":""},{"title":"Switch","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/Switch","content":"Switch A common component for the react native switch component PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononPress\t(value: boolean) =&gt; void Yes\tcallback called on value change of the switch on\tboolean No\toptional value of switch, updated with onPress testID\tstring No\toptional testID of switch a11yHint\tstring No\toptional accessibilityHint","keywords":""},{"title":"TextLines","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/TextLines","content":"TextLines Component to render individual lines of text. Each text line will wrap as needed and subsequent lines will be on the next line PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionlistOfText\t(TextLine | TextLineWithIconProps)[] No\tList of text for the button selectable\tboolean No\tif true the text will be selectable","keywords":""},{"title":"TextArea","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/TextArea","content":"TextArea Text area block for content PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononPress\t() =&gt; void No\tonPress callback noBorder\tboolean No\tprop to remove border","keywords":""},{"title":"TextLineWithIcon","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/TextLineWithIcon","content":"TextLineWithIcon Common component to show an icon with a line of text PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptioniconProps\tany No\tProps for icon you want to display in this line of text text\tstring Yes\tstring to display variant\tstring | number | symbol No\tsets the variant of the text, if not set defaults to MobileBody color\tstring | number | symbol No\tsets the text to the specified color, if not specified defaults to primary textAlign\t&quot;left&quot; | &quot;right&quot; | &quot;center&quot; No\talignment of the text textTag\t{ backgroundColor?: BackgroundVariant; color?: ColorVariant; variant?: string | number | symbol; } No\tsets the text to be a tag mb\tstring | number No\tset margin bottom of this component","keywords":""},{"title":"TextView","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/TextView","content":"TextView A common component for styling text in the application. It also conforms to the Box properties so you don't need to wrap it with a Box view for margins / paddings PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionm\tNumOrStrPx No\tset margin of this component mt\tNumOrStrPx No\tset margin top of this component mr\tNumOrStrPx No\tset margin right of this component mb\tNumOrStrPx No\tset margin bottom of this component ml\tNumOrStrPx No\tset margin left of this component mx\tNumOrStrPx No\tset margin right and left of this component my\tNumOrStrPx No\tset margin top and bottom of this component p\tNumOrStrPx No\tset padding of this component pt\tNumOrStrPx No\tset padding top of this component pr\tNumOrStrPx No\tset padding right of this component pb\tNumOrStrPx No\tset padding bottom of this component pl\tNumOrStrPx No\tset padding left of this component px\tNumOrStrPx No\tset padding right and left of this component py\tNumOrStrPx No\tset padding top and bottom of this component top\tstring | number No\tsets the number of logical pixels to offset the top edge of this component left\tstring | number No\tsets the number of logical pixels to offset the left edge of this component right\tstring | number No\tsets the number of logical pixels to offset the right edge of this component bottom\tstring | number No\tsets the number of logical pixels to offset the bottom edge of this component position\t&quot;relative&quot; | &quot;absolute&quot; No\tsets the positioning to relative or absolute of this component display\t&quot;none&quot; | &quot;flex&quot; No\tsets the display type of this component flex\tnumber No\tsets the flex property of this component flexGrow\tnumber No\tdescribes how any space within a container should be distributed among its children along the main axis flexShrink\tnumber No\tflexShrink describes how to shrink children along the main axis in the case in which the total size of the children overflows the size of the container on the main axis flexWrap\t&quot;wrap&quot; | &quot;nowrap&quot; | &quot;wrap-reverse&quot; No\tcontrols whether children can wrap around after they hit the end of a flex container flexDirection\t&quot;column&quot; | &quot;row&quot; No\tcontrols which directions children of a container go overflow\t&quot;hidden&quot; | &quot;visible&quot; | &quot;scroll&quot; No\tcontrols how children are measured and displayed justifyContent\t&quot;center&quot; | &quot;flex-start&quot; | &quot;flex-end&quot; | &quot;space-between&quot; No\taligns children in the main direction alignItems\t&quot;center&quot; | &quot;flex-start&quot; | &quot;flex-end&quot; No\taligns children in the cross direction alignSelf\t&quot;auto&quot; | FlexAlignType No\tcontrols how a child aligns in the cross direction, overriding the alignItems of the parent width\tstring | number No\tsets the width of this component minWidth\tstring | number No\tsets the min width of this component height\tstring | number No\tsets the height of this component minHeight\tstring | number No\tsets the min height of this component textAlign\t&quot;left&quot; | &quot;right&quot; | &quot;center&quot; No\talings the text of this component backgroundColor\tBackgroundVariant No\tsets the background color of this component opacity\tnumber No\tsets the opacity of this component borderWidth\tBorderWidths No\tsets the border width of this component borderColor\tBorderColorVariant No\tsets the border color of this component borderStyle\tBorderStyles No\tsets the border style of this component borderBottomWidth\tBorderWidths No\tsets the bottom border's width of this component borderBottomColor\tBorderColorVariant No\tsets the bottom border's color of this component borderTopWidth\tBorderWidths No\tsets the top border's width of this component borderTopColor\tBorderColorVariant No\tsets the top border's color of this component borderRightWidth\tBorderWidths No\tsets the right border's width of this component borderRightColor\tBorderColorVariant No\tsets the right border's color of this component borderLeftWidth\tBorderWidths No\tsets the left border's width of this component borderLeftColor\tBorderColorVariant No\tsets the left border's color of this component borderRadius\tstring | number No\tsets the border's radius of this component borderRadiusTop\tstring | number No\tsets the border radius just for the top of the component borderRadiusBottom\tstring | number No\tsets the border radius just for the bottom of the component color\tColorVariant No\tDefaults to primary text variant\tstring | number | symbol No\tDefaults to regular textTransform\t&quot;none&quot; | &quot;uppercase&quot; | &quot;lowercase&quot; | &quot;capitalize&quot; No\tThe text transformation textDecoration\t&quot;none&quot; | &quot;underline&quot; | &quot;line-through&quot; | &quot;underline line-through&quot; No\ttext decoration textDecorationColor\tColorVariant No\ttext decoration color onPress\t() =&gt; void No\tonPress callback allowFontScaling\tboolean No\tif false font won't scale if screen font size changes selectable\tboolean\tfalse\tNo\tif true the text will be selectable numberOfLines\tnumber No\tif set, sets the number of lines the text will render on. if the text exceeds the line amount, it will ellipsis maxFontSizeMultiplier\tnumber No\tMax size for font when user adjusts their font scaling","keywords":""},{"title":"VABulletList","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/VABulletList","content":"VABulletList Displays the list of text as a bulleted list PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionlistOfText\t(string | VABulletListText)[] Yes\tlist of text to display in a bulleted list","keywords":""},{"title":"VADatePicker","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/VADatePicker","content":"VADatePicker Common component for selecting a date. (This can be updated to a date/time picker later if we need it) PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiondefaultString\tstring Yes\tWhat should the picker show if no value is selected? onChange\t(date?: Date) =&gt; void Yes\tfunction to run on date selected","keywords":""},{"title":"VAButton","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/VAButton","content":"VAButton A common component to show a button that takes the full width of the view with gutters PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptiononPress\t() =&gt; void Yes\tfunction called when button is pressed label\tstring Yes\ttext appearing in the button buttonType\tButtonTypes Yes\tspecifies how the button will look - buttonPrimary has non white background, buttonSecondary has white background w/ colored border testID\tstring No\ta string value used to set the buttons testID/accessibility label a11yHint\tstring No\ttext to use as the accessibility hint disabled\tboolean No\toptional prop that disables the button when set to true disabledText\tstring No\toptional prop for text to display under the button if it is disabled * hideBorder\tboolean No\thides the border if set to true accessibilityState\tAccessibilityState No\toptional accessibility state iconProps\tany No\tprops for optional icon to display before text","keywords":""},{"title":"VAImage","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/VAImage","content":"VAImage A common component to display static images. New images need to be placed in VAImge/image and in Xcode under VAMobile/Images.xcassets. Examples/details can be found in VAImage component. PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionname\t&quot;PaperCheck&quot; Yes\tenum name of the image a11yLabel\tstring Yes\taccessibilityLabel for the overall component marginX\tnumber Yes\tmargins for the image","keywords":""},{"title":"VAScrollView","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/VAScrollView","content":"VAScrollView A common component that provides a scrollable view. Use this instead of ScrollView. This component is a wrapper for react-native ScrollView that has a scrollbar styling fix PropertiesExampleSource CodeAccessibility Name\tType\tDefault Value\tRequired\tDescriptionscrollViewRef\tRef&lt;ScrollView&gt; No\tOptional reference prop to determine scroll position backgroundColor\tBackgroundVariant No\toptional background color to override the main background","keywords":""},{"title":"VAIcon","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ComponentsSection/VAIcon","content":"VAIcon A common component to display assets(svgs). Svgs need to place in VAIcon/svgs folder. Set fill to #000 and stroke to #00F in the svg so VAIcon component can set the fill/stroke color. Examples/details can be found in VAIcon component. PropertiesExampleSource CodeAccessibility This component does not have props defined","keywords":""},{"title":"useAccessibilityFocus","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useAccessibilityFocus","content":"useAccessibilityFocus DescriptionParams and ReturnExample On iOS, voiceover will focus on the element closest to what the user last interacted with on the previous screen rather than what is on the top left (https://github.com/react-navigation/react-navigation/issues/7056) This hook allows you to manually set the accessibility focus on the element we know will be in the correct place.","keywords":""},{"title":"useAttachments","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useAttachments","content":"useAttachments DescriptionParams and ReturnExample Hook to add and remove attachments from the attachment list","keywords":""},{"title":"useAutoScrollToElement","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useAutoScrollToElement","content":"useAutoScrollToElement DescriptionParams and ReturnExample Hook to autoscroll to an element","keywords":""},{"title":"useBeforeNavBackListener","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useBeforeNavBackListener","content":"useBeforeNavBackListener DescriptionParams and ReturnExample Hook to catch IOS swipes and Android lower nav back events","keywords":""},{"title":"useDestructiveAlert","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useDestructiveAlert","content":"useDestructiveAlert DescriptionParams and ReturnExample Hook to create appropriate alert for a destructive event (Actionsheet for iOS, standard alert for Android)","keywords":""},{"title":"useError","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useError","content":"useError DescriptionParams and ReturnExample Hook to determine if an error should be shown for a given screen id","keywords":""},{"title":"useExternalLink","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useExternalLink","content":"useExternalLink DescriptionParams and ReturnExample Hook to display a warning that the user is leaving the app when tapping an external link","keywords":""},{"title":"useFontScale","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useFontScale","content":"useFontScale DescriptionParams and ReturnExample Hook to calculate based on fontScale","keywords":""},{"title":"useHasCernerFacilities","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useHasCernerFacilities","content":"useHasCernerFacilities DescriptionParams and ReturnExample Returns whether user has cerner facilities or not","keywords":""},{"title":"useHeaderStyles","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useHeaderStyles","content":"useHeaderStyles DescriptionParams and ReturnExample Hook to get the current header styles in a component","keywords":""},{"title":"useIsScreanReaderEnabled","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useIsScreanReaderEnabled","content":"useIsScreanReaderEnabled DescriptionParams and ReturnExample Hook to check if the screan reader is enabled","keywords":""},{"title":"useMessageWithSignature","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useMessageWithSignature","content":"useMessageWithSignature DescriptionParams and ReturnExample Hook to add signature to a message","keywords":""},{"title":"useOnResumeForeground","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useOnResumeForeground","content":"useOnResumeForeground DescriptionParams and ReturnExample Hook that is called when app moves from the background to the foreground","keywords":""},{"title":"useRouteNavigation","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useRouteNavigation","content":"useRouteNavigation DescriptionParams and ReturnExample Navigation hook to use in onPress events.","keywords":""},{"title":"useTheme","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useTheme","content":"useTheme DescriptionParams and ReturnExample Hook to get the theme in a component","keywords":""},{"title":"useTopPaddingAsHeaderStyles","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useTopPaddingAsHeaderStyles","content":"useTopPaddingAsHeaderStyles DescriptionParams and ReturnExample Hook to recreate SafeArea top padding through header styles: This is for screens that are meant to look header-less (no headerTitle, or right/left buttons), since the SafeArea top padding is already included in useHeaderStyles above. We are recreating SafeArea top padding through the header rather than just wrapping the app in a SafeArea with top padding, because the latter method causes misalignment issues between the left/right header buttons and the center title for screens with headers.","keywords":""},{"title":"useValidateMessageWithSignature","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/CustomHooks/useValidateMessageWithSignature","content":"useValidateMessageWithSignature DescriptionParams and ReturnExample Hook to validate message that could have a signature","keywords":""},{"title":"Debugging Instructions","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/DebuggingTools/DebuggingToolsInstructions","content":"","keywords":""},{"title":"Launching The Debugger​","type":1,"pageTitle":"Debugging Instructions","url":"docs/Engineering/FrontEnd/DebuggingTools/DebuggingToolsInstructions#launching-the-debugger","content":"This section will apply to all the tools. More information on the react native debugging page "},{"title":"IOS​","type":1,"pageTitle":"Debugging Instructions","url":"docs/Engineering/FrontEnd/DebuggingTools/DebuggingToolsInstructions#ios","content":"If on physical device Shake your device. If using a simulator press the shortcut ⌘D or by selecting the Shake Gesture inside the hardware menu in the simulator. On the Action Sheet select Debug with Chrome "},{"title":"Android​","type":1,"pageTitle":"Debugging Instructions","url":"docs/Engineering/FrontEnd/DebuggingTools/DebuggingToolsInstructions#android","content":"Ff on physical device Shake your device. If using a emulator press the shortcut ⌘M. On the dialog select Debug "},{"title":"Debugging Tools​","type":1,"pageTitle":"Debugging Instructions","url":"docs/Engineering/FrontEnd/DebuggingTools/DebuggingToolsInstructions#debugging-tools","content":"This sections shows the different debugging tools you can use. By default the chrome developers tools will open if no other tool is already open. important You must have only the tool you want to use open so that the debugger connects to it. "},{"title":"Chrome Developers Tools​","type":1,"pageTitle":"Debugging Instructions","url":"docs/Engineering/FrontEnd/DebuggingTools/DebuggingToolsInstructions#chrome-developers-tools","content":"Launch the debugger from the device debug menu. The React Native Debugger page will open in Chrome on url http://localhost:8081/debugger-ui/. You will know if the device is connected in the Status section. Open the developers tools. From the developers tools you can see the elements, console outputs and source files. In the element you can see the html tree. In the console you can see the redux logout messages and other console outputs. In the source under debuggerWorker you can find the javascript files that you can put breakpoints. "},{"title":"React Native Developer Tools (standalone application)​","type":1,"pageTitle":"Debugging Instructions","url":"docs/Engineering/FrontEnd/DebuggingTools/DebuggingToolsInstructions#react-native-developer-tools-standalone-application","content":"If not installed yet follow the installation instructions in the react-devtools to install the react dev tools globally on your machine not in the project. And than install standalone react native debugger app If installed or after the installation launch the react native debugger standalone app. Launch the debugger from your device. With the standalone you can see the redux messages with the redux devtools, see the element tree and console logs in the console tab. In the source tab under RNDebuggerWorker you can find the javascripts to add breakpoints to. If you right click on the redux devtools section you will get a popup to enable network calls. This will allow you to see the calls and response done to the api. "},{"title":"VSCode React Native Tools Extension​","type":1,"pageTitle":"Debugging Instructions","url":"docs/Engineering/FrontEnd/DebuggingTools/DebuggingToolsInstructions#vscode-react-native-tools-extension","content":"This extension will allow you to add breakpoints on the actual code in VSCode. If not installed install the React Native Tools extension in VSCode and follow the setup instructions in the extensions document. After the extension is installed launch the debugger. Select the Run and Debug Icon on the left explorer and click the play button on the Attach tp packager dropdown. Launch the debugger from your device. The debugger should attach to the VSCode debugger and stop on any breakpoints "},{"title":"Development Setup Instructions","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess","content":"","keywords":""},{"title":"Prerequisites​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#prerequisites","content":"Download and install the latest versions of the following IDEs and Native Hosts:​ XCode Android Studio CocoaPods Node.js Java JDK Depending on which IDE you are using install the following:​ VSCode IntelliJ IDEA "},{"title":"ENV Variables Setup​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#env-variables-setup","content":"info If you are using z on Mac you will need to create the .zprofile and .zshrc files if they do not exists. Copy On your bash_profile or .zprofile add the following:​ JAVA_HOME variable pointing to the java installed above example: export JAVA_HOME=$(/usr/libexec/java_home -v 15.0.2) make sure you use the version you installed. NODE_OPTIONS this is to manage the node memory space: export NODE_OPTIONS=--max_old_space_size=8192 On your bashrc or .zshrc add the following:​ Android specific vars for the ANDROID_HOME, platform-tools and cmdline-tools: export ANDROID_SDK=/Users/(your user folder)/Library/Android/sdk export ANDROID_HOME=$ANDROID_SDK export PATH=$PATH:$ANDROID_HOME/cmdline-tools/latest/bin export PATH=$PATH:$ANDROID_HOME/platform-tools The build of the app relies on a scripted creation of the .env file to run correctly. You will need to add the APP_CLIENT_SECRET var to work correctly: export APP_CLIENT_SECRET='client secret ask for this client key' The app has a demo mode. To use demo mode the app reads the DEMO_PASSWORD var. You can set this to a blank password or assign any string to it: export DEMO_PASSWORD='' info After adding the variables if you have a terminal open run source .zprofile and source .zshrc. If you do not have a terminal open than open a brand new terminal and the variables should be activated. Run which adb to make sure the android vars are working. Copy "},{"title":"Github And Cloning Repo​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#github-and-cloning-repo","content":"Verify you have access to the VAMobile repo. Make sure you have the SSH Github setup on your machine if not follow these instruction Connect With SSH. Create a folder where you wish to clone the repo to. Example (/Users/(your user folder/Workspace). Using your prefer method or prefer IDE (example cmd line, Github Desktop, VSCode, or IntelliJ) clone the VAMobile repo to the folder created in the previouse step. Verify you see a folder structure like /Users/(your user folder/Workspace/va-mobile-app/VAMobile. "},{"title":"With VSCode or IntelliJ IDEA Project Setup​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#with-vscode-or-intellij-idea-project-setup","content":"With your prefer IDE Open the /Users/(your user folder/Workspace/va-mobile-app/VAMobile folder. In the android/app add a file named google-services.json. Please ask for the data that this file contains. Open a terminal in the IDE and type yarn or yarn install and press enter to install the projects dependencies. This will create the node_modules folder. After dependencies are installed type cd ios &amp;&amp; pod install &amp;&amp; cd .. and press enter to install pods on ios (This is done once unless you installed new dependencies that need pods created). After pods are installed type yarn env:staging and press enter to setup the staging environment and create the .env file. Verify the file has the client key and demo password that is in your .zshrc file. After the env file is created type yarn bundle:ios and press enter to create the IOS bundle. After the ios bundle is done tye yarn bundle:android and press enter to create the android bundle. After the android bundle is done type yarn start to start the metro development server. "},{"title":"Android Setup​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#android-setup","content":""},{"title":"Emulator Setup:​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#emulator-setup","content":"Open Android Studios and select to a open project. On the popup window browse to /Users/(your user folder/Workspace/va-mobile-app/VAMobile/android and select the android folder from the VAMobile project and press open. After opening the android project you will need to sync the project with gradle. Go to File -&gt; Sync Project With Gradle Files. Go to Android Studios -&gt; Preferences -&gt; Build, Execution, Deployment -&gt; Build Tools -&gt; Gradle and verify that the Gradle JDK is pointing to /Applications/Android Studio.app/Contents/jre/Contents/Home Add a test emulator in Android Studios Tools -&gt; AVD Manager. Follow the instructions on Android Emulator Setup to add a new virtual device. After adding the new virtual device select it from the top device menu. Build the project. Launch Virtual Device from Android studio. Verify the Virtual Device launches and Android Studios installs and opens the VAMobile app on the device. "},{"title":"Physical Device Setup:​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#physical-device-setup","content":"Open Android Studios and select to a open project. On the popup window browse to /Users/(your user folder/Workspace/va-mobile-app/VAMobile/android and select the android folder from the VAMobile project and press open. After opening the android project you will need to sync the project with gradle. Go to File -&gt; Sync Project With Gradle Files. Go to Android Studios -&gt; Preferences -&gt; Build, Execution, Deployment -&gt; Build Tools -&gt; Gradle and verify that the Gradle JDK is pointing to /Applications/Android Studio.app/Contents/jre/Contents/Home Turn on developer mode for the phone. See React Native Instructions Connect phone with a usb to the host machine. Open a Terminal and type adb devices. You should see an ouput like so. Type adb -s &lt;device name&gt; reverse tcp:8081 tcp:8081. Select the physical device from the top device menu. Build the project. Launch Virtual Device from Android studio. Verify Android Studios installs and opens the VAMobile app on the device. "},{"title":"iPhone Setup​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#iphone-setup","content":""},{"title":"Simulator Setup​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#simulator-setup","content":"Open Xcode and select to open project or file. On the popup window browse and select the ios folder on the VAMobile project. Go to Xcode -&gt; Preference and under account verify you are signed in with the apple id which has the US Department of Veterans Affairs (VA) developer account. Select the project icon on the left hand explorer and verify you have the right signing. Team should be US Department of Veterans Affairs (VA) Select a simulator from the list in Xcode. Build project on Xcode. Launch simulator by pressing the play button. "},{"title":"Physical Device​","type":1,"pageTitle":"Development Setup Instructions","url":"docs/Engineering/FrontEnd/DevSetupInstructions/DevSetupProcess#physical-device","content":"Open Xcode and select to open project or file. On the popup window browse and select the ios folder on the VAMobile project. Go to Xcode -&gt; Preference and under account verify you are signed in with the apple id which has the US Department of Veterans Affairs (VA) developer account. Select the project icon on the left hand explorer and verify you have the right signing. Team should be US Department of Veterans Affairs (VA). Connect the iPhone via USB to the host machine. See React Native Instructions Accept permissions on your iPhone from Xcode to allow the developers option. Select a device from the list in Xcode. Build project on Xcode. Launch device by pressing the play button. "},{"title":"Downtime Messages","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Downtime Messages/DowntimeMessages","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Downtime Messages","url":"docs/Engineering/FrontEnd/Downtime Messages/DowntimeMessages#overview","content":"Downtime Messages are error pages that shown to users when a known maintenance window is actively occuring for a specific feature in the app. Downtime windows are determined by upstream service providers and compiled into a single list by the back-end. The front-end checks for active downtime windows once per session durin the sync stage after login and caches the data for the remainder of the session. Downtime messages use the same display pattern as errors in code, with additional checks in the useError utility to check if a downtime error exists for a specific screen ID. Multiple features can trigger a downtime message on a single screen, e.g. claims and appeals are two separate features but display on the same page. Whether a downtime message is displayed if a subset of features on the screen are down is a business decision that varies based on feature. "},{"title":"Maintenance Window Technical Description​","type":1,"pageTitle":"Downtime Messages","url":"docs/Engineering/FrontEnd/Downtime Messages/DowntimeMessages#maintenance-window-technical-description","content":"The data returned from the back-end for a maintenance window includes a service name, and start time, and an end time. The service name is determined by the back-end and is not directly equivalent to feature names used in the front-end, so a mapping from service name to feature name as well as service name to the affected screen ID is provided in the store/api/types/Errors.ts file. Anytime a new feature with downtime is added, this mapping needs to be updated and the rest of the logic will automatically piggyback off of error logic and the checks in store/slices/errorSlice.ts:checkForDowntimeErrors() Example return data from /v0/maintenance_windows endpoint: data: [ { attributes: { service: 'direct_deposit_benefits', startTime: '2021-06-01T12:00:00.000Z', endTime: '2021-06-01T18:00:00.000Z', }, id: '1', type: 'maintenance_window', }, { attributes: { service: 'military_service_history', startTime: '2021-06-01T12:00:00.000Z', endTime: '2021-06-01T18:00:00.000Z', }, id: '2', type: 'maintenance_window', }, ] Copy "},{"title":"Downtime Messages Display​","type":1,"pageTitle":"Downtime Messages","url":"docs/Engineering/FrontEnd/Downtime Messages/DowntimeMessages#downtime-messages-display","content":"The downtime message displays as a full page error with a warning border. The template and an example are show below   "},{"title":"Fonts and Colors","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Fonts and Colors/FontsAndColors","content":"","keywords":""},{"title":"Fonts​","type":1,"pageTitle":"Fonts and Colors","url":"docs/Engineering/FrontEnd/Fonts and Colors/FontsAndColors#fonts","content":"To support the common usage of colors for each font style, defaults colors have been set for each type of font under src/styles/themes/standardTheme.ts(See buildTypography function). Colors for each font style are based on these: Light Mode Text ColorsDark Mode Text Colors "},{"title":"Colors​","type":1,"pageTitle":"Fonts and Colors","url":"docs/Engineering/FrontEnd/Fonts and Colors/FontsAndColors#colors","content":"Colors in code can be found under src/styles/themes/VAColors.ts. Any new colors should be added src/styles/themes/VAColors.ts and then used in src/styles/themes/standardTheme.ts or src/styles/themescolorSchemes.ts Some text, components(ex. snackbar), or icons use different colors than the default color set for each font. You can find the general guidelines for what colors to use for most text, components, and icons here "},{"title":"Checkbox","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Icons/checkboxIcons","content":"Checkbox info These icons are located under VaMobile/src/components/VAIcon/svgs/checkBox Name\tIcon\tFile NameCheckbox Empty checkBoxEmpty.svg Checkbox Error checkBoxError.svg Checkbox Filled checkBoxFilled.svg","keywords":""},{"title":"Common","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Icons/commonIcons","content":"Common info These icons are located under VaMobile/src/components/VAIcon/svgs Name\tIcon\tFile LocationBullet bullet.svg Check Mark check-mark.svg Check Mark Circle checkmark-in-circle.svg Chevron Down svgs/chevron-down.svg Chevron Right chevron-right.svg Compose compose.svg Paper Clip paperClip.svg Phone Solid phoneSolid.svg Question Mark questionMark.svg Remove remove.svg Reply reply.svg Unread unread_icon.svg Video Camera videoCamera.svg","keywords":""},{"title":"DOD Branch","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Icons/dodIcons","content":"DOD Branch info These icons are located under VaMobile/src/components/VAIcon/svgs/dodBranch Name\tIcon\tFile NameMarines marine.svg Air Force air-force.svg Navy navy.svg Army army.svg Coast Guard coast-guard.svg","keywords":""},{"title":"Logo","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Icons/logoIcons","content":"Logo info These icons are located under VaMobile/src/components/VAIcon/svgs/vaParentLogo Name\tIcon\tFile NameVA Logo logo.svg","keywords":""},{"title":"Links","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Icons/linksIcons","content":"Links info These icons are located under VaMobile/src/components/VAIcon/svgs/links Name\tIcon\tFile NameCalendar calendar.svg Chat chat.svg Phone TTY phone-tty.svg Phone phone.svg Right Arrow Blue Circle right-arrow-blue-circle.svg Text text.svg Directions directions.svg","keywords":""},{"title":"Radio Button","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Icons/radioBtnIcons","content":"Radio Button info These icons are located under VaMobile/src/components/VAIcon/svgs/radio Name\tIcon\tFile NameRadio Disabled radioDisabled.svg Radio Empty radioEmpty.svg Radio Filled radioFilled.svg","keywords":""},{"title":"Navigation","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Icons/navIcons","content":"Navigation info These icons are located under VaMobile/src/components/VAIcon/svgs/navIcon Name\tIcon\tFile NameClaims Selected claimsSelected.svg Claims Unselected claimsUnselected.svg Health Selected healthSelected.svg Health Unselected healthUnselected.svg Home Selected homeSelected.svg Home Unselected homeUnselected.svg Profile Selected profileSelected.svg Profile Unselected profileUnselected.svg","keywords":""},{"title":"Webview","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Icons/webviewIcons","content":"Webview info These icons are located under VaMobile/src/components/VAIcon/svgs/webView Name\tIcon\tFile NameChevron Left chevron-left-solid.svg Chevron Right chevron-right-solid.svg External Link external-link-alt-solid.svg Lock lock-solid.svg Redo redo-solid.svg","keywords":""},{"title":"Redux Toolkit Overview","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ReduxToolkit/Overview/ReduxToolkitOverview","content":"","keywords":""},{"title":"Purpose​","type":1,"pageTitle":"Redux Toolkit Overview","url":"docs/Engineering/FrontEnd/ReduxToolkit/Overview/ReduxToolkitOverview#purpose","content":"The Redux Toolkit package was built with the intention on being the standard way of writing Redux logic. It was mainly created to help address the three common concerns of Redux. &quot;Configuring a Redux store is too complicated&quot;&quot;I have to add a lot of packages to get Redux to do anything useful&quot;&quot;Redux requires too much boilerplate code&quot; "},{"title":"Benefits​","type":1,"pageTitle":"Redux Toolkit Overview","url":"docs/Engineering/FrontEnd/ReduxToolkit/Overview/ReduxToolkitOverview#benefits","content":"Some benefits of using Redux Toolkit are: Simple : Includes utilities to simplify common use cases like store setup, creating reducers, immutable update logic, and more.Opinionated : Provides good defaults for store setup out of the box, and includes the most commonly used Redux addons built-in.Powerful : Takes inspiration from libraries like Immer and Autodux to let you write &quot;mutative&quot; immutable update logic, and even create entire &quot;slices&quot; of state automatically.Effective : Lets you focus on the core logic your app needs, so you can do more work with less code. More information on the purpose and installation of Redux Toolkit can be found on their page. "},{"title":"Translations","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Internationalization/Translations","content":"","keywords":""},{"title":"Translation Files​","type":1,"pageTitle":"Translations","url":"docs/Engineering/FrontEnd/Internationalization/Translations#translation-files","content":"All visible copy in the app should be located in language specific translation files to support the ability of the app to decide client side which language it will display. Translations are stored in JSON files located under src/translations/&lt;language&gt; and split into separate files by namespace. "},{"title":"Files and Namespaces​","type":1,"pageTitle":"Translations","url":"docs/Engineering/FrontEnd/Internationalization/Translations#files-and-namespaces","content":"Within a language directory, the translation files are split into files for each namespace representing different sections of the app. There is also a common namespace used for strings used throughout the app like &quot;Save&quot; or &quot;Cancel&quot;. "},{"title":"Translation Keys​","type":1,"pageTitle":"Translations","url":"docs/Engineering/FrontEnd/Internationalization/Translations#translation-keys","content":"Strings are identified in the app through a key associated with the value in their language file. This key must be consistent across all language files for their respective values, the key itself is not translated. &quot;claimPhase.details.phaseFive&quot;: &quot;Complete&quot;, This is an example of a string in the claims namespace. The key is claimPhase.details.phaseFive and the translated value is Complete. "},{"title":"Adding a New String​","type":1,"pageTitle":"Translations","url":"docs/Engineering/FrontEnd/Internationalization/Translations#adding-a-new-string","content":"If it is specific to a screen or will only be used within certain parts of the app (for example, &quot;Take photos and upload to your claim&quot;) it should be placed in the file for the namespace associated with that copy.If it is used in a common component or will be used across the app in nonspecific contexts (for example &quot;confirm&quot; or &quot;refreshes the page&quot;) then it should go in the common namespace.Maintain keys in alphabetical order within the JSON file. "},{"title":"Using Translations​","type":1,"pageTitle":"Translations","url":"docs/Engineering/FrontEnd/Internationalization/Translations#using-translations","content":"Translation values are accessed via the useTranslation hook. This hook creates a translation function for a namespace or list of namespaces provided as an argument. const { t } = useTranslation(NAMESPACE.CLAIMS) Copy For basic usage, the translation function takes in the desired key as the only argument and will resolve to the display value associated with that key. t('claimDetails.needHelp') Copy This value can be used like any other string, either placed directly into a TextView component: &lt;TextView variant=&quot;MobileBodyBold&quot; &gt; {t('claimDetails.needHelp')} &lt;/TextView&gt; Copy Or passed in as a prop to a component that will decide where and how to display it: &lt;VAButton label={t('fileUpload.submit')} testID={t('fileUpload.submit')} buttonType={ButtonTypesConstants.buttonPrimary} a11yHint={t('fileUpload.uploadFileA11yHint')} /&gt; Copy "},{"title":"Strings With Parameters​","type":1,"pageTitle":"Translations","url":"docs/Engineering/FrontEnd/Internationalization/Translations#strings-with-parameters","content":"Sometimes text will not be static and includes values that are user, code, or API driven and cannot be added to the translation file itself. In the translated string in the translation files, the {{}} notation provides a spot in the string to place dynamic values. &quot;listPosition&quot;: &quot;{{position}} of {{total}}&quot;, Copy This allows this translation to take in two values, position and total that will be placed in the translated value. To use this with our translation function: t('listPosition', { position: myPosition, total: totalEntries }) Copy "},{"title":"Multiple Namespaces​","type":1,"pageTitle":"Translations","url":"docs/Engineering/FrontEnd/Internationalization/Translations#multiple-namespaces","content":"To use multiple namespaces, either create another function with the desired namespace const { t } = useTranslation(NAMESPACE.CLAIMS) const { t: tCommon } = useTranslation(NAMESPACE.COMMON) Copy or create one translation function for multiple namespaces where the usage will be prefixed with the desired namespace const { t } = useTranslation([NAMESPACE.CLAIMS, NAMESPACE.COMMON]) const myClaimsString = t('claims:key.in.claims') const myCommonString = t('common:key.in.common') Copy "},{"title":"Add a New Feature State","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit","content":"","keywords":""},{"title":"Intro​","type":1,"pageTitle":"Add a New Feature State","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit#intro","content":"This tutorial will consists of adding a new Redux state for the military service feature. This will be the same steps for adding any new Redux state to the VA mobile app. "},{"title":"Creating the Slice File​","type":1,"pageTitle":"Add a New Feature State","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit#creating-the-slice-file","content":"Right click the slice folder (src/store/slice) and select new file. Enter the name of the file [your file name]Slice.ts. Example: (militaryServiceSlice.ts) Add the Redux toolkit import to the created slice file. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' Copy Add the Redux initial state. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } Copy Create the Redux slice and add the initial state created in the previouse step to the create slice function. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { }, }) Copy Add the reducers that will be updating the state. The name that you give to the reducer will be the same name the action creator and type is going to use typescript will infere that name. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { dispatchStartGetHistory: (state) =&gt; { state.loading = true }, dispatchFinishGetHistory: (state, action: PayloadAction&lt;{ serviceHistory?: api.ServiceHistoryData; error?: Error }&gt;) =&gt; { const { serviceHistory, error } = action.payload const history = serviceHistory || state.serviceHistory const latestHistory = max(history, (historyItem) =&gt; { return getDateFromString(historyItem.endDate) }) as ServiceData return { ...state, error, mostRecentBranch: latestHistory?.branchOfService, serviceHistory: history, loading: false, needsDataLoad: !!error, preloadComplete: true, } }, }, }) Copy info The PayloadAction param only takes one value if you need to pass more than one param use an object as above. Also the reducer functions created inside the slice uses the Immer package. Which allows you to write mutated code as the dispatchStartGetHistory reducer function above. You can also return an immutable object as the dispatchFinishGetHistory function above. Here is more information on what you can do with immer inside the reducer functions Redux Immer Page Export the reducer and actions to be used in other files or async Redux function. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { dispatchStartGetHistory: (state) =&gt; { state.loading = true }, dispatchFinishGetHistory: (state, action: PayloadAction&lt;{ serviceHistory?: api.ServiceHistoryData; error?: Error }&gt;) =&gt; { const { serviceHistory, error } = action.payload const history = serviceHistory || state.serviceHistory const latestHistory = max(history, (historyItem) =&gt; { return getDateFromString(historyItem.endDate) }) as ServiceData return { ...state, error, mostRecentBranch: latestHistory?.branchOfService, serviceHistory: history, loading: false, needsDataLoad: !!error, preloadComplete: true, } }, }, }) export const { dispatchFinishGetHistory, dispatchMilitaryHistoryLogout, dispatchStartGetHistory } = militaryServiceSlice.actions export default militaryServiceSlice.reducer Copy Add the async function that will fetch the data from the server and call the actions. Here we are adding the getServiceHistory async thunk function. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } /** * Redux action to get service history for user */ export const getServiceHistory = (screenID?: ScreenIDTypes): AppThunk =&gt; async (dispatch) =&gt; { dispatch(dispatchClearErrors(screenID)) dispatch(dispatchSetTryAgainFunction(() =&gt; dispatch(getServiceHistory(screenID)))) try { dispatch(dispatchStartGetHistory()) const mshData = await api.get&lt;api.MilitaryServiceHistoryData&gt;('/v0/military-service-history') dispatch(dispatchFinishGetHistory({ serviceHistory: mshData?.data.attributes.serviceHistory })) } catch (error) { if (isErrorObject(error)) { dispatch(dispatchFinishGetHistory({ error })) dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID })) } } } const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { dispatchStartGetHistory: (state) =&gt; { state.loading = true }, dispatchFinishGetHistory: (state, action: PayloadAction&lt;{ serviceHistory?: api.ServiceHistoryData; error?: Error }&gt;) =&gt; { const { serviceHistory, error } = action.payload const history = serviceHistory || state.serviceHistory const latestHistory = max(history, (historyItem) =&gt; { return getDateFromString(historyItem.endDate) }) as ServiceData return { ...state, error, mostRecentBranch: latestHistory?.branchOfService, serviceHistory: history, loading: false, needsDataLoad: !!error, preloadComplete: true, } }, }, }) export const { dispatchFinishGetHistory, dispatchMilitaryHistoryLogout, dispatchStartGetHistory } = militaryServiceSlice.actions export default militaryServiceSlice.reducer Copy info The getServiceHistory is a thunk async function which will give you two params (dispatch, getState). The dispatch is what will be use to call the actions. The getState is if you need to pull any value from the current Redux store state. "},{"title":"Adding the Exported Reducer to the Store​","type":1,"pageTitle":"Add a New Feature State","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit#adding-the-exported-reducer-to-the-store","content":"Open the store file (src/store/index.ts) and import the exported reducer from the created slice above. And add it to the reducer object in the configureStore function. /src/store/index.ts import { AnyAction, ThunkAction, configureStore } from '@reduxjs/toolkit' import accessabilityReducer from 'store/slices/accessibilitySlice' import militaryServiceReducer from 'store/slices/militaryServiceSlice' // Creates the store const store = configureStore({ reducer: { accessibility: accessabilityReducer, militaryService: militaryServiceReducer, }, middleware: (getDefaultMiddleWare) =&gt; getDefaultMiddleWare({ serializableCheck: false }).concat(logger), devTools: process.env.NODE_ENV !== 'production', }) //creates the typed dispatch to work with the thunk actions export type AppDispatch = typeof store.dispatch // creates the types root state export type RootState = ReturnType&lt;typeof store.getState&gt; // creates the types thunk action creator export type AppThunk&lt;ReturnType = Promise&lt;void&gt;&gt; = ThunkAction&lt;ReturnType, RootState, unknown, AnyAction&gt; export default store Copy "},{"title":"Adding to the Slices Folder Index.ts File.​","type":1,"pageTitle":"Add a New Feature State","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit#adding-to-the-slices-folder-indexts-file","content":"Open the slices folder index.ts file (src/store/slices/index.ts). Here you are going to add the initialState export and a export everything for the slice created above. /src/store/index.ts import { RootState } from 'store' import { initialAccessibilityState } from 'store/slices/accessibilitySlice' import { initialMilitaryServiceState } from 'store/slices/militaryServiceSlice' export * from './accessibilitySlice' export * from './militaryServiceSlice' export const InitialState: RootState = { militaryService: initialMilitaryServiceState, accessibility: initialAccessibilityState, } Copy "},{"title":"Using the Slice In a Component​","type":1,"pageTitle":"Add a New Feature State","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/AddNewStateInReduxToolKit#using-the-slice-in-a-component","content":"This section will show you how to retrieve the state and dispatch any thunk function in a component. src/screens/ProfileScreen/MilitaryInformationScreen/MilitaryInformationScreen.tsx import { MilitaryServiceState, getServiceHistory } from 'store/slices/militaryServiceSlice' import { RootState } from 'store' import { useAppDispatch } from 'utils/hooks' import { useSelector } from 'react-redux' const MilitaryInformationScreen: FC = () =&gt; { const dispatch = useAppDispatch() const { serviceHistory, loading, needsDataLoad } = useSelector&lt;RootState, MilitaryServiceState&gt;((s) =&gt; s.militaryService) useEffect(() =&gt; { if (needsDataLoad &amp;&amp; militaryInfoAuthorization &amp;&amp; mhNotInDowntime) { dispatch(getServiceHistory(ScreenIDTypesConstants.MILITARY_INFORMATION_SCREEN_ID)) } }, [dispatch, needsDataLoad, militaryInfoAuthorization, mhNotInDowntime]) const historyItems: Array&lt;DefaultListItemObj&gt; = map(serviceHistory, (service: ServiceData) =&gt; { const branch = t('personalInformation.branch', { branch: service.branchOfService }) const textLines: Array&lt;TextLine&gt; = [ { text: branch, variant: 'MobileBodyBold', color: 'primaryTitle', }, { text: t('militaryInformation.history', { begin: service.formattedBeginDate, end: service.formattedEndDate }), }, ] return { textLines, testId: `${branch} ${t('militaryInformation.historyA11yLabel', { begin: service.formattedBeginDate, end: service.formattedEndDate, })}`, } }) return ( &lt;VAScrollView {...testIdProps('Military-Information-page')}&gt; &lt;ProfileBanner /&gt; &lt;Box mb={theme.dimensions.standardMarginBetween}&gt; &lt;DefaultList items={historyItems} title={t('militaryInformation.periodOfService')} /&gt; &lt;/Box&gt; &lt;TextView {...linkProps}&gt;{t('militaryInformation.incorrectServiceInfo')}&lt;/TextView&gt; &lt;/VAScrollView&gt; ) } export default MilitaryInformationScreen Copy info To dispatch an action in a component use the useAppDispatch hook from the src/utils/hook.tsx file. To get the current state value for the slice use useSelector function from Redux as shown above. "},{"title":"VA App and Redux Toolkit","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ReduxToolkit/Overview/VAAppAndReduxToolkit","content":"","keywords":""},{"title":"Why Redux Toolkit​","type":1,"pageTitle":"VA App and Redux Toolkit","url":"docs/Engineering/FrontEnd/ReduxToolkit/Overview/VAAppAndReduxToolkit#why-redux-toolkit","content":"The reasons the VA mobile team decided to move to Redux toolkit from the regular Redux implementation are: Redux Toolkit is the new modern way of writing Redux and is the new standard which most Redux's guides and documentation are moving to or suggesting to use.The standard Redux has too much boiler plate and to add a new state you have to modify or add files in many different locations. With Redux Toolkit everything is in one file.With Redux Toolkit we have devtools for debugging and the thunk middleware out of the box without extra configurations. "},{"title":"VA App Redux Architectures​","type":1,"pageTitle":"VA App and Redux Toolkit","url":"docs/Engineering/FrontEnd/ReduxToolkit/Overview/VAAppAndReduxToolkit#va-app-redux-architectures","content":"This section will show the difference from using the standard Redux and Redux Toolkit in our VA App. We will be using the disability rating as an example. "},{"title":"With Standard Redux (older implementation)​","type":1,"pageTitle":"VA App and Redux Toolkit","url":"docs/Engineering/FrontEnd/ReduxToolkit/Overview/VAAppAndReduxToolkit#with-standard-redux-older-implementation","content":"Folder Structure: With the standard Redux you would need three folders actions, reducers, and types. To add a new state you would have to add a file in each of those different sections.  Actions Folder: Here is where the actions file would go. The action file would define the sync and async actions for a feature. Also the created file would need to be added to the actions index file.  &quot;/src/store/actions/disabilityRating.ts import * as api from 'store/api' import { AsyncReduxAction, ReduxAction } from 'store/types' import { RatingData, ScreenIDTypes } from '../api' import { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errors' import { getCommonErrorFromAPIError } from 'utils/errors' import { isErrorObject } from 'utils/common' /** * Redux action to start disability ratings fetch * * @returns ReduxAction */ const dispatchStartGetRating = (): ReduxAction =&gt; { return { type: 'DISABILITY_RATING_START_GET_RATING', payload: {}, } } /** * Redux action to set disability ratings data or error after fetch * * @returns ReduxAction */ const dispatchFinishGetRating = (ratingData?: RatingData, error?: Error): ReduxAction =&gt; { return { type: 'DISABILITY_RATING_FINISH_GET_RATING', payload: { ratingData, error, }, } } /** * Redux action to reset disability ratings on logout * * @returns ReduxAction */ export const dispatchDisabilityRatingLogout = (): ReduxAction =&gt; { return { type: 'DISABILITY_RATING_ON_LOGOUT', payload: {}, } } /** * Redux action to get the users disability ratings * * @returns AsyncReduxAction */ export const getDisabilityRating = (screenID?: ScreenIDTypes): AsyncReduxAction =&gt; { return async (dispatch, _getState): Promise&lt;void&gt; =&gt; { dispatch(dispatchClearErrors(screenID)) dispatch(dispatchSetTryAgainFunction(() =&gt; dispatch(getDisabilityRating(screenID)))) try { dispatch(dispatchStartGetRating()) const ratingData = await api.get&lt;api.DisabilityRatingData&gt;('/v0/disability-rating') dispatch(dispatchFinishGetRating(ratingData?.data.attributes)) } catch (err) { if (isErrorObject(err)) { dispatch(dispatchFinishGetRating(undefined, err)) dispatch(dispatchSetError(getCommonErrorFromAPIError(err), screenID)) } } } } Copy &quot;/src/store/actions/index.ts export * from './auth' export * from './directDeposit' export * from './disabilityRating' Copy Reducers Folder: Here is where the reducer file would go. The reducer file would define the initial state and reducer functions for a feature. Also the created file would need to be added to the reducers index file.  &quot;/src/store/reducers/disabilityRating.ts import { RatingData } from 'store/api' import createReducer from './createReducer' export type DisabilityRatingState = { ratingData?: RatingData error?: Error loading: boolean needsDataLoad: boolean preloadComplete: boolean } export const initialDisabilityRatingState: DisabilityRatingState = { loading: false, needsDataLoad: true, preloadComplete: false, } export default createReducer&lt;DisabilityRatingState&gt;(initialDisabilityRatingState, { DISABILITY_RATING_START_GET_RATING: (state, payload) =&gt; { return { ...state, ...payload, loading: true, } }, DISABILITY_RATING_FINISH_GET_RATING: (state, { ratingData, error }) =&gt; { return { ...state, error, ratingData, needsDataLoad: error ? true : false, preloadComplete: true, loading: false, } }, DISABILITY_RATING_ON_LOGOUT: (_state, _payload) =&gt; { return { ...initialDisabilityRatingState, } }, }) Copy &quot;/src/store/reducers/index.ts import { combineReducers } from 'redux' import { ReduxAction } from 'store/types' import auth, { AuthState, initialAuthState } from './auth' import directDeposit, { DirectDepositState, initialDirectDepositState } from './directDeposit' import disabilityRating, { DisabilityRatingState, initialDisabilityRatingState } from './disabilityRating' export * from './auth' export * from './directDeposit' export * from './disabilityRating' export interface StoreState { auth: AuthState directDeposit: DirectDepositState disabilityRating: DisabilityRatingState } export const InitialState: StoreState = { auth: initialAuthState, directDeposit: initialDirectDepositState, disabilityRating: initialDisabilityRatingState, } const allReducers = combineReducers&lt;StoreState, ReduxAction&gt;({ auth, directDeposit, disabilityRating, }) export default allReducers Copy Types Folder: Here is where the type file would go. The type file would define the action's payload type and action creators definitions. Also the created file would need to be added to the types index file.  &quot;/src/store/types/disabilityRating.ts import { ActionDef, EmptyPayload } from './index' import { RatingData } from 'store/api' /** * Redux payload for DISABILITY_RATING_START_GET_RATING action */ export type DisabilityRatingStartGetRatingPayload = Record&lt;string, unknown&gt; /** * Redux payload for DISABILITY_RATING_FINISH_GET_RATING action */ export type DisabilityRatingPayload = { ratingData?: RatingData error?: Error } /** * All disability rating actions */ export interface DisabilityRatingActions { /** Redux action to signify the initial start of getting the disablity rating*/ DISABILITY_RATING_START_GET_RATING: ActionDef&lt;'DISABILITY_RATING_START_GET_RATING', DisabilityRatingPayload&gt; /** Redux action to signify that the disability rating is being retrieved */ DISABILITY_RATING_FINISH_GET_RATING: ActionDef&lt;'DISABILITY_RATING_FINISH_GET_RATING', DisabilityRatingPayload&gt; /** Redux action to clear disability rating data on logout **/ DISABILITY_RATING_ON_LOGOUT: ActionDef&lt;'DISABILITY_RATING_ON_LOGOUT', EmptyPayload&gt; } Copy &quot;/src/store/types/index.ts import { ThunkAction } from 'redux-thunk' import { AuthActions } from './auth' import { DirectDepositActions } from './directDeposit' import { DisabilityRatingActions } from './disabilityRating' export * from './auth' export * from './directDeposit' export * from './disabilityRating' type ActObjs&lt;T extends keyof AllActionDefs&gt; = AllActionDefs[T] type ActObjsPayload&lt;T extends keyof AllActionDefs&gt; = AllActionDefs[T]['payload'] export interface ActionDef&lt;T extends string, P extends ActObjsPayload&lt;AllActionTypes&gt;&gt; { type: T payload: P } export type EmptyPayload = unknown export type StoreStateFn = () =&gt; StoreState export type AllActionDefs = AuthActions &amp; DirectDepositActions &amp; DisabilityRatingActions type AllActionTypes = keyof AllActionDefs export type ReduxAction = ActObjs&lt;AllActionTypes&gt; export type AsyncReduxAction = ThunkAction&lt;Promise&lt;void&gt;, StoreState, undefined, ReduxAction&gt; Copy Store File: Here is where the store would be configured. &quot;/src/store/index.tsx import { ReduxAction } from './types' import { Store, applyMiddleware, createStore } from 'redux' import logger from 'redux-logger' import rootReducer, { StoreState } from './reducers' import thunk from 'redux-thunk' export * from './reducers' export * from './actions' export * from './types' const configureStore = (state?: StoreState): Store&lt;StoreState, ReduxAction&gt; =&gt; { const middleware = applyMiddleware(thunk, logger) return createStore(rootReducer, state, middleware) as Store&lt;StoreState, ReduxAction&gt; } export default configureStore Copy "},{"title":"With Redux Toolkit (current implementation)​","type":1,"pageTitle":"VA App and Redux Toolkit","url":"docs/Engineering/FrontEnd/ReduxToolkit/Overview/VAAppAndReduxToolkit#with-redux-toolkit-current-implementation","content":"Folder Structure: With Redux Toolkit you would need one folder slices. To add a new state you would have to add one file to the slices folder.  Slices Folder: Here is where you will define your slice file. This file is where everything will be added. With redux toolkit actions creators, types and reducers are created for you in the slice. Also the creted file needs to be added to the slices index file.  &quot;/src/store/slices/disabilityRatingSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' import * as api from 'store/api' import { AppThunk } from 'store' import { RatingData, ScreenIDTypes } from 'store/api' import { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errorSlice' import { getCommonErrorFromAPIError } from 'utils/errors' import { isErrorObject } from 'utils/common' export type DisabilityRatingState = { ratingData?: RatingData error?: Error loading: boolean needsDataLoad: boolean preloadComplete: boolean } export const initialDisabilityRatingState: DisabilityRatingState = { loading: false, needsDataLoad: true, preloadComplete: false, } /** * Redux action to get the users disability ratings */ export const getDisabilityRating = (screenID?: ScreenIDTypes): AppThunk =&gt; async (dispatch) =&gt; { dispatch(dispatchClearErrors(screenID)) dispatch(dispatchSetTryAgainFunction(() =&gt; dispatch(getDisabilityRating(screenID)))) try { dispatch(dispatchStartGetRating()) const ratingData = await api.get&lt;api.DisabilityRatingData&gt;('/v0/disability-rating') dispatch(dispatchFinishGetRating({ ratingData: ratingData?.data.attributes })) } catch (error) { if (isErrorObject(error)) { dispatch(dispatchFinishGetRating({ error })) dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID })) } } } /** * Redux slice that will create the actions and reducers */ const disabilitRatingSlice = createSlice({ name: 'disabilityRating', initialState: initialDisabilityRatingState, reducers: { dispatchStartGetRating: (state) =&gt; { state.loading = true }, dispatchFinishGetRating: (state, action: PayloadAction&lt;{ ratingData?: RatingData; error?: Error }&gt;) =&gt; { const { ratingData, error } = action.payload state.ratingData = ratingData state.error = error state.needsDataLoad = error ? true : false state.preloadComplete = true state.loading = false }, dispatchDisabilityRatingLogout: () =&gt; { return { ...initialDisabilityRatingState } }, }, }) export const { dispatchDisabilityRatingLogout, dispatchFinishGetRating, dispatchStartGetRating } = disabilitRatingSlice.actions export default disabilitRatingSlice.reducer Copy &quot;/src/store/slices/index.tsx import { RootState } from 'store' import { initialAuthState } from 'store/slices/authSlice' import { initialDirectDepositState } from 'store/slices/directDepositSlice' import { initialDisabilityRatingState } from 'store/slices/disabilityRatingSlice' export * from './authSlice' export * from './directDepositSlice' export * from './disabilityRatingSlice' export const InitialState: RootState = { auth: initialAuthState, directDeposit: initialDirectDepositState, disabilityRating: initialDisabilityRatingState, } Copy Store File: Here is where the store would be configured. &quot;/src/store/index.tsx import { AnyAction, ThunkAction, configureStore } from '@reduxjs/toolkit' import authReducer from 'store/slices/authSlice' import directDepositReducer from 'store/slices/directDepositSlice' import disabilityRatingReducer from 'store/slices/disabilityRatingSlice' // Creates the store const store = configureStore({ reducer: { auth: authReducer, directDeposit: directDepositReducer, disabilityRating: disabilityRatingReducer, }, middleware: (getDefaultMiddleWare) =&gt; getDefaultMiddleWare({ serializableCheck: false }).concat(logger), devTools: process.env.NODE_ENV !== 'production', }) //creates the typed dispatch to work with the thunk actions export type AppDispatch = typeof store.dispatch // creates the types root state export type RootState = ReturnType&lt;typeof store.getState&gt; // creates the types thunk action creator export type AppThunk&lt;ReturnType = Promise&lt;void&gt;&gt; = ThunkAction&lt;ReturnType, RootState, unknown, AnyAction&gt; Copy "},{"title":"Updating or Adding to an Existing Feature State","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature","content":"","keywords":""},{"title":"Intro​","type":1,"pageTitle":"Updating or Adding to an Existing Feature State","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature#intro","content":"This tutorial will consists of adding state to an existing feature state. "},{"title":"Adding a New State​","type":1,"pageTitle":"Updating or Adding to an Existing Feature State","url":"docs/Engineering/FrontEnd/ReduxToolkit/Tutorials/UpdatingExistingStateFeature#adding-a-new-state","content":"Here we are going to add a new reducer to clear the data on logout to the existing militaryServiceSlice.ts. Current Slice Code /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' import * as api from 'store/api' import { AppThunk } from 'store' import { ScreenIDTypes, ServiceData } from '../api' import { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errorSlice' import { getCommonErrorFromAPIError } from 'utils/errors' import { getDateFromString } from 'utils/formattingUtils' import { isErrorObject } from 'utils/common' import { max } from 'underscore' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } /** * Redux action to get service history for user */ export const getServiceHistory = (screenID?: ScreenIDTypes): AppThunk =&gt; async (dispatch) =&gt; { dispatch(dispatchClearErrors(screenID)) dispatch(dispatchSetTryAgainFunction(() =&gt; dispatch(getServiceHistory(screenID)))) try { dispatch(dispatchStartGetHistory()) const mshData = await api.get&lt;api.MilitaryServiceHistoryData&gt;('/v0/military-service-history') dispatch(dispatchFinishGetHistory({ serviceHistory: mshData?.data.attributes.serviceHistory })) } catch (error) { if (isErrorObject(error)) { dispatch(dispatchFinishGetHistory({ error })) dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID })) } } } /** * Redux slice that will create the actions and reducers */ const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { dispatchStartGetHistory: (state) =&gt; { state.loading = true }, dispatchFinishGetHistory: (state, action: PayloadAction&lt;{ serviceHistory?: api.ServiceHistoryData; error?: Error }&gt;) =&gt; { const { serviceHistory, error } = action.payload const history = serviceHistory || state.serviceHistory const latestHistory = max(history, (historyItem) =&gt; { return getDateFromString(historyItem.endDate) }) as ServiceData return { ...state, error, mostRecentBranch: latestHistory?.branchOfService, serviceHistory: history, loading: false, needsDataLoad: !!error, preloadComplete: true, } }, }, }) export const { dispatchFinishGetHistory, dispatchStartGetHistory } = militaryServiceSlice.actions export default militaryServiceSlice.reducer Copy Code after adding the logout reducer Here we added the dispatchMilitaryHistoryLogout reducer function which we will extract an action to be dispatch on the logout Redux thunk. /src/store/slices/militaryServiceSlice.ts import { PayloadAction, createSlice } from '@reduxjs/toolkit' import * as api from 'store/api' import { AppThunk } from 'store' import { ScreenIDTypes, ServiceData } from '../api' import { dispatchClearErrors, dispatchSetError, dispatchSetTryAgainFunction } from './errorSlice' import { getCommonErrorFromAPIError } from 'utils/errors' import { getDateFromString } from 'utils/formattingUtils' import { isErrorObject } from 'utils/common' import { max } from 'underscore' export type MilitaryServiceState = { serviceHistory: api.ServiceHistoryData loading: boolean error?: Error mostRecentBranch?: string needsDataLoad: boolean preloadComplete: boolean } export const initialMilitaryServiceState: MilitaryServiceState = { serviceHistory: [] as api.ServiceHistoryData, loading: false, needsDataLoad: true, preloadComplete: false, } /** * Redux action to get service history for user */ export const getServiceHistory = (screenID?: ScreenIDTypes): AppThunk =&gt; async (dispatch) =&gt; { dispatch(dispatchClearErrors(screenID)) dispatch(dispatchSetTryAgainFunction(() =&gt; dispatch(getServiceHistory(screenID)))) try { dispatch(dispatchStartGetHistory()) const mshData = await api.get&lt;api.MilitaryServiceHistoryData&gt;('/v0/military-service-history') dispatch(dispatchFinishGetHistory({ serviceHistory: mshData?.data.attributes.serviceHistory })) } catch (error) { if (isErrorObject(error)) { dispatch(dispatchFinishGetHistory({ error })) dispatch(dispatchSetError({ errorType: getCommonErrorFromAPIError(error), screenID })) } } } /** * Redux slice that will create the actions and reducers */ const militaryServiceSlice = createSlice({ name: 'militaryService', initialState: initialMilitaryServiceState, reducers: { dispatchStartGetHistory: (state) =&gt; { state.loading = true }, dispatchFinishGetHistory: (state, action: PayloadAction&lt;{ serviceHistory?: api.ServiceHistoryData; error?: Error }&gt;) =&gt; { const { serviceHistory, error } = action.payload const history = serviceHistory || state.serviceHistory const latestHistory = max(history, (historyItem) =&gt; { return getDateFromString(historyItem.endDate) }) as ServiceData return { ...state, error, mostRecentBranch: latestHistory?.branchOfService, serviceHistory: history, loading: false, needsDataLoad: !!error, preloadComplete: true, } }, dispatchMilitaryHistoryLogout: () =&gt; { return { ...initialMilitaryServiceState, } }, }, }) export const { dispatchFinishGetHistory, dispatchMilitaryHistoryLogout, dispatchStartGetHistory } = militaryServiceSlice.actions export default militaryServiceSlice.reducer Copy That is all it takes to add a new state to an existing slice file. Now the dispatchMilitaryHistoryLogout could be imported to any file and be dispatched. "},{"title":"Unit Tests","type":0,"sectionRef":"#","url":"docs/Engineering/FrontEnd/Testing/UnitTesting","content":"","keywords":""},{"title":"Frameworks​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#frameworks","content":"Our tests primarily use Jest and React Test Renderer "},{"title":"What to Test​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#what-to-test","content":"All React components including common components and screens should have an associated unit test. The test should cover the visible effects of logic within the component as well as any output from the component passed through events like buttons where possible. Examples of this include: Verifying expected results when pressing a button including showing/hiding elements or calling actionsVerifying props are having the expected effect within the componentError states displaying as expectedEdge cases that may not be noticed in day to day development or regular QA cyclesValidation on forms "},{"title":"What Not To Test​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#what-not-to-test","content":"Interactions with or effects within other components or screens that require pulling in those screens or components.The actions being called (such as API calls), it should only be testing that the actions are called with the correct parameters. These actions should be tested in their own set of unit tests.Functionality of third party libraries that the component is not directly responsible for. These should be mocked appropriately to isolate the test to logic within the component. "},{"title":"Test Files​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#test-files","content":"The test file should live in the same location as its associated component with the same file name with .test included after the component name. ClaimsScreen.tsx will have a test file named ClaimsScreen.test.tsx "},{"title":"Running Tests​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#running-tests","content":"Run unit tests with yarn testCoverage can be found under coverage/lcov-report/index.html "},{"title":"Test Structure​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#test-structure","content":"Unit tests are structured into context, describe, and it functions that provide context to the tests as they are run. These are presented as a readable heirarchy, making it easy to follow the output of the tests and identify where failing tests are and what they were testing. context('MyScreen', () =&gt; { describe('when loading is set to true', () =&gt; { it('should show loading screen', async () =&gt; { // testing }) it('should not show a menu', async () =&gt; { // testing }) }) }) Copy The context is typically the name of the component or screen, the primary identifier of what this file is testing. describe provides a specific circumstance or set of properties. it explains exactly what is being tested. A context can have as many describe or it functions as is necessary to describe the flow of the test. "},{"title":"Mocking​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#mocking","content":"Components often interact with other pieces of code that are not the responsibility of that unit test, but rely on them to function. To handle these cases, we use mocks to guarantee inputs and outputs of things like navigation actions, API calls, external libraries, hooks, or anything else the component might need but does not control the logic of. Mocking libraries and functions are done through jest mocks. Global mocks can be found at jest/testSetup.ts but can be overridden within the individual test files. "},{"title":"Mocking Hooks​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#mocking-hooks","content":"One of the most commonly mocked parts of the app are hooks related to things like navigation, theme, and alerts. This is done by creating a spy object at the top of the file that will then be set in the jest mocks to allow it to be used within the tests. let mockNavigationSpy = jest.fn() jest.mock('utils/hooks', () =&gt; { let original = jest.requireActual('utils/hooks') return { ...original, useRouteNavigation: () =&gt; { return mockNavigationSpy }, } }) Copy This block of code will mock the entirety of the hooks util file using the original implementations except for the useRouteNavigation hook, which is instead returning a spy object that the unit test can use to verify it was called with the correct arguments. navigateToPaymentMissingSpy = jest.fn() when(mockNavigationSpy) .mockReturnValue(() =&gt; {}) .calledWith('PaymentMissing') .mockReturnValue(navigateToPaymentMissingSpy) Copy This will create another object navigateToPaymentMissingSpy that will be returned if the hook is called with the parameters 'PaymentMissing' // Do something that will trigger a navigation to the PaymentMissing screen expect(navigateToPaymentMissingSpy).toHaveBeenCalled() Copy "},{"title":"Mocking API Calls​","type":1,"pageTitle":"Unit Tests","url":"docs/Engineering/FrontEnd/Testing/UnitTesting#mocking-api-calls","content":"Components will often make API calls which can be mocked via the redux actions that call them. import { downloadLetter } from 'store/slices' jest.mock('store/slices', () =&gt; { let actual = jest.requireActual('store/slices') return { ...actual, downloadLetter: jest.fn(() =&gt; { return { type: '', payload: '', } }), } }) Copy This imports the downloadLetter action from the letters slice responsible for handling downloading letters and mocks it to do nothing. This will let the unit test validate it has been called without the test itself trying to actually download anything. // Do something that triggers downloading of a letter with some set of options const letterOptions = { chapter35Eligibility: true, militaryService: true, monthlyAward: true, serviceConnectedDisabilities: true, serviceConnectedEvaluation: true, } expect(downloadLetter).toBeCalledWith(LetterTypeConstants.benefitSummary, letterOptions) Copy This checks to see that the downloadLetter action was called with the expected parameters "},{"title":"Releases","type":0,"sectionRef":"#","url":"docs/Engineering/Releases","content":"Releases","keywords":""},{"title":"Intro","type":0,"sectionRef":"#","url":"docs/intro","content":"","keywords":""},{"title":"Background​","type":1,"pageTitle":"Intro","url":"docs/intro#background","content":"On VA.gov today, nearly 40% of all traffic comes from users on their mobile devices. This traffic is typically driven by users that want to complete quick transactions, such as viewing Claims Status or Facility Locator. Our team has a hypothesis, validated by user research, that native functionality in a mobile app will allow Veterans to more easily complete key transactions across VA Health and Benefits services. "},{"title":"Team​","type":1,"pageTitle":"Intro","url":"docs/intro#team","content":""},{"title":"VA Product Owners​","type":1,"pageTitle":"Intro","url":"docs/intro#va-product-owners","content":"Chris JohnstonMartha Wilkes (part time design and accessibility) "},{"title":"Product and Program Management​","type":1,"pageTitle":"Intro","url":"docs/intro#product-and-program-management","content":"Matt Hall - Product LeadershipBrenda Cudone - ProductMeko Hong - ProductAshley Matthews - ProductBrenda Rocha - ProductSeth Eheart - Program "},{"title":"UX​","type":1,"pageTitle":"Intro","url":"docs/intro#ux","content":"Jen Ecker - UX LeadershipMelissa Lefevre - DesignEsther Kitavi - DesignLauren Russell - DesignHolly Collier - DesignBrea Blackwelder - Accessibility DesignLiz Straghalis - ResearchMisty Milliron-Grant - WriterAlex Taylor - Principal UX Designer "},{"title":"Engineering​","type":1,"pageTitle":"Intro","url":"docs/intro#engineering","content":"Patrick Saxton - Engineer LeadershipChika Adibemma - EngineerNarin Ratana - EngineerJayson Perkins - EngineerAndrew Herzberg, EngineerJon Bindbeutel, EngineerKris Pethtel, EngineerTim Roettger, EngineerRaf Arroyo, EngineerJason Conigliari, EngineerJohn Marchi, EngineerKen Li, EngineerKen Harrison - QA SupportTom Gammons, Engineer, QATherese Dickson, Engineer, QA "},{"title":"Communications​","type":1,"pageTitle":"Intro","url":"docs/intro#communications","content":"Slack: #va-mobile-appZenhub tag: va-mobile-app "},{"title":"Timeline​","type":1,"pageTitle":"Intro","url":"docs/intro#timeline","content":"MVP V1: Released to Test Flight by end of Nov. 2020MVP V1 or V2: Released to app store in Q2 2021 "},{"title":"Release Cycle​","type":1,"pageTitle":"Intro","url":"docs/intro#release-cycle","content":"Because VSP's Collaboration Cycle is designed for web features, the VA Mobile App team is going to leverage parts of the process that make sense for mobile and create other quality control processes where it doesn't. For example, the VA Mobile App team is creating its own Accessibility review that is tailored to mobile devices. These deviations will be documented here "},{"title":"Incident Response","type":0,"sectionRef":"#","url":"docs/Operations/Incident Response","content":"Incident Response","keywords":""},{"title":"Maintenance Windows","type":0,"sectionRef":"#","url":"docs/Operations/Maintenance Windows","content":"Maintenance Windows","keywords":""},{"title":"Firebase","type":0,"sectionRef":"#","url":"docs/Operations/Firebase","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#overview","content":"Firebase is a Google Cloud system which can capture analytics, performance, and crash data from our deployed app. The Firebase Console offers an overview into the app If you are unable to access the console, request access from the team or project lead Further information available in each of the subcategories in the navigation menu  The important sections within the console are listed below. Anything not listed is likely not used or not intergrated into the app at this time Something to note about all the data presented in these sections, none of the data is attributed to individual users for purposes of anonymity and privacy. The tools here allow you to get data on events and see stack traces of crashes, but not directly debug the issues of a specific user. All analytics, crashlytics, and performance are turned off for non-production environments, with the only exception being DebugView. "},{"title":"Crashlytics​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#crashlytics","content":"Crashlytics provides metrics on app crashes that occur in production, and can be filtered by release and platform. You'll find the platform dropdown at the top of the page next to the Crashlytics title. The filter at the top left under the title allows you to select which release number to look at and the filter at the top right allows you to choose a different date range.  Crashlytics is added to the app through the @react-native-firebase/crashlytics package. The only code added to the repo which affects Crashlytics is for toggling DebugView and explained in that section. "},{"title":"Performance​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#performance","content":"Performance provides many default metrics on http requests and app runtime, and can be filtered by platform. You'll find the platform dropdown at the top of the page next to the Crashlytics title. The filter at the top right allows you to choose a different date range.  Performance is added to the app through the @react-native-firebase/perf package. The only code added to the repo which affects Performance is for toggling DebugView and explained in that section. Additional custom traces can be added to the code by following the examples in the package docs. "},{"title":"App Distribution​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#app-distribution","content":"App Distribution provides a dashboard for all the releases of the app. It lists previous releases, allows for creating a new release, provides invite links and group permissions for testers and other groups. Each release contains notes for its purpose, whether it is a QA build or one for UAT or a proper release build. Only people with permissions to use the distribution tools will be able to build new releases. The contact info for the person with top level permission will be listed on that page under Contant Email  "},{"title":"Analytics​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#analytics","content":"Analytics provides metrics on discrete events within the app. Most general events like accessing a screen are built into the package and provided in the dashboard without any additional coding, but all other actions like pressing a button or downloading a file are tracked as a custom analytic event. These events are collated and displayed in multiple ways in the Analytics subsections of the nav menu, as listed in the subsections below. "},{"title":"To Add a New Analytics Event​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#to-add-a-new-analytics-event","content":"Add an event name with optional parameters to the Events constant in constants/analytics.ts. Additionally, if user properties need to be tracked, they can be added to the UserAnalytics object: export const Events = { ... , vama_new_event_name: (): Event =&gt; { return { name: 'vama_new_event_name', params: { paramName, }, } }, } export const UserAnalytics = { ... , vama_uses_property: (value: boolean): UserAnalytic =&gt; { return { name: 'vama_uses_property', value: value.toString(), } }, } Copy Then include the analytics utility functions in your screen or store slice and call the event name: import { getAnalyticsTimers, logAnalyticsEvent, setAnalyticsUserProperty } from 'utils/analytics' export const analyticsAction = (): AppThunk =&gt; async (dispatch, getState) =&gt; { await setAnalyticsUserProperty(UserAnalytics.vama_uses_property(true)) const [totalTime] = getAnalyticsTimers(getState()) await logAnalyticsEvent(Events.vama_new_event_name(totalTime)) ... } Copy Analytics is added to the app through the @react-native-firebase/analytics package. "},{"title":"Dashboard​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#dashboard","content":"The analytics dashboard provides a few common metrics that are important to the app, like current user engagement, active release versions, and user geolocation. You can drill down into the information on the dashboard by clicking on the All Users button, which will pop open a sidebar which allows you to create a custom query to test the data against, with up to 5 conditions. The time range of the query is in the top-right of the main dashboard, outside of the pop-up. Once a new query is created and Apply is pressed in the bottom right of the pop-up, the data shown will match all provided conditions only. Switching to the Realtime screen within Analytics will also apply these conditions. To clear a query, click on the X next to its name in the top-left where the All Users button used to be.  "},{"title":"Realtime​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#realtime","content":"Selecting the Realtime dashboard will show all events that occured within the indicated time range and which match the active query in the comparisons list at the top of the screen. This screen shows the geolocations of all these events grouped to the nearest city. Underneath the map, a breakdown of the event types and rankings of each is also provided.  "},{"title":"Events​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#events","content":"The Events page shows a list of all discrete events in the app, the count of each event firing, and the number of unique users who initiated that event. The events list can be filtered for a specific date range, but no other filters can be applied on this screen.  "},{"title":"DebugView​","type":1,"pageTitle":"Firebase","url":"docs/Operations/Firebase#debugview","content":"DebugView allows developers to get a live stream of events in real-time, with up to a 60 second delay when first starting. An Enable Firebase Debug Mode button has been added to the developer screen to make debugging easier.  For developers building locally, follow the steps listed below to get started: iOS: Make sure the -FIRDebugEnabled flag is enabled in your XCode &gt; Product &gt; Scheme &gt; Edit Scheme, under the Test (Debug) schemeStart the emulator or build to deviceIn the app, go to Profile &gt; Settings &gt; Developer and click Enable Firebase Debug ModeGo the Firebase Debug dashboard and select your device from the top left Debug Devices list Android: Open Android Studio and run the emulator or build to deviceIn a terminal, execute the command adb shell setprop debug.firebase.analytics.ap gov.va.mobileappIn the app, go to Profile &gt; Settings &gt; Developer and click Enable Firebase Debug ModeGo the Firebase Debug dashboard and select your device from the top left Debug Devices listAfter debugging is complete, run the command adb shell setprop debug.firebase.analytics.app .none. For QA team members, DebugView does not work using a signed build. Either build locally using the steps above, or use the steps below, but be aware that the wait time is high and it doesn't always work due to the way events are batched and sent to the Dashboard: On either platform: In the app, go to Profile &gt; Settings &gt; Developer and click Enable Firebase Debug ModeGo to the Firebase Realtime dashboardClick on the All Users button at the top left. A Build Comparison menu will pop up.Set Audience Name to Environment and the Dimension Values to Staging if available. If not available, no staging events have been logged in the time periodClick Apply and any events in that time period that have been logged will be shown on the map and in the lists "},{"title":"How to use GitHub Desktop and Sublime text to make pull requests","type":0,"sectionRef":"#","url":"docs/Operations/Making Changes","content":"","keywords":""},{"title":"Install git​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#install-git","content":"Git - Installing Git "},{"title":"On Mac​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#on-mac","content":"Open terminal and run git —version If you do not already have it installed it will prompt you to install it. "},{"title":"On Windows​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#on-windows","content":"Git - Downloading Package "},{"title":"sublime text​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#sublime-text","content":"Sublime Text - Text Editing, Done Right "},{"title":"Install GitHub Desktop​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#install-github-desktop","content":"GitHub Desktop | Simple collaboration from your desktop Getting started with GitHub Desktop - GitHub Docs Open the zip file. When Finder comes up, you will want to drag the application into the Applications folder  You can then open the app from either the finder window or using quick search ⌘ + Space and type GitHub desktop You may see a warning the first time you open the app, click Open  When the app opens it may ask you to log into GitHub. Once you are logged in you should see a screen like this:  Wait until your repositories list loads on the right  Scroll or use search until you find department-of-veterans-affairs/va-mobile-app When you click on the repository name, you should get an option to clone the repository  Click the clone button to pop up a modal. Choose the local path on your machine where you want to save it and click the clone button   "},{"title":"Create a new branch​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#create-a-new-branch","content":"To create a branch, you first need to know what base you need. The base of the branch determines what code changes are available to your branch when you start it. If we think of develop as a truck, then the two branches shown below will have slightly different code checked in because of where they are branched from. You can see that the yellow branch will have started and be missing two gray commits that the blue branch will have because of where it was based.  This means we need to pay attention the to base branch when we make new branches. In most cases, you will probably have two cases to choose from : I am making new changes that need to get added to the app or wherever, but NOT for the release ticket. For these you will likely need to base off of the develop branch.I am making change FOR a release ticket, such as what’s new or content changes that have to be in the next release. For these you will need to base it on the correct release branch and will need to do some extra work. "},{"title":"If your new branch is based on develop​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#if-your-new-branch-is-based-on-develop","content":"Click on the Current Branch tab at the top  There are a few ways to create a new branch. You can type in a branch name in the search, then click the New Branch or the Create New Branch button.  You can also press ⌘ + Shift + N to create a new branch from anywhere in the application. You will see this modal. Just enter your branch name and click Create Branch  Once you have created your branch, you should see this:  You can now start making your changes to the repository. There is no need to publish your branch at this time, we can make all of your changes first and then publish it. "},{"title":"If your changes are for a release​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#if-your-changes-are-for-a-release","content":"You will need to copy the release branch from the remote repository to start. This is called pulling a remote. To do is in GH desktop, you will simple search for the branch on the server and double click it. Click on the current branch tab, type release into the search and double click the release branch you want to update. It should pre prefixed with origin/ like you see below for origin/release/v1.12.0. Click the branch name and your GH Desktop will pull down that branch history and change to that branch for you.  Now that we have our starting place, we can then create a branch based on release/v1.12.0. Create a new branch any of the ways listed above, but when the create branch modal pops up, you will need to change the base branch from develop to the correct release branch.  Click the release/vx.y.x that is the correct version and click Create Branch You now have a branch that will update for only the release branch that you can now start making changes on. "},{"title":"Open the repository in Sublime text​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#open-the-repository-in-sublime-text","content":"Open Sublime Text from your applications folder or using quick search ⌘ + Space In GitHub Desktop, click on the Current Repository tab at the top and right click on va-mobile-app. Select Reveal in Finder  Click on the va-mobile-app text at the top of finder so that a folder icon pops up. Drag that icon onto the sublime text icon that should be visible in your dock area.  Sublime text should open a new window with your files in a sidebar on the left and a black text editor in the middle. You can now navigate the files in the repo in order to make your changes. "},{"title":"Making and saving changes​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#making-and-saving-changes","content":"Once you have made changes to the files you want to update, you will need to save the changes in sublime to make them show up in GH Desktop. You can Save All changes with Option(⌥) + ⌘ + S If you now look at GH Desktop, you should see a list of changes in the left-hand tab.  If you click on a file, you can see the set of changes for each file (called a diff). Green indicates a line was added. Red indicates the line was deleted.  "},{"title":"Committing Changes​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#committing-changes","content":"Once we have all the changes we want to make, we need to save the changes to our git history so that the repository is updated. We call this committing changes to git. To do so in GH Desktop, simple check the box to the left of each file that you want to save changes from. You can save all the changes at once or split up changes in a couple of commits if you want to add changes by some type of change grouping (i.e. all image updates in one commit, all text updates in a second). Its not necessary to do more than one commit, but if you make a lot of changes it can be helpful to break it up in case you make a mistake you need to undo(revert).  Once you have selected all the changes you want to commit, you will need to enter a summary message and commit the changes. Add a summary message that explains the changes in case someone needs to review the history and can easily tell what you were up to. In this case I am making my message “update what’s new text for iOS and android”. Click Commit to &lt;branch_name&gt; to save the changes to git.  GH Desktop should then show you a screen that says No local changes again. If you have more changes or more commits, go ahead and do those now. Once you have all the changes you want to make, you will need to publish your branch so that you can make a pull request. "},{"title":"Publish your branch​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#publish-your-branch","content":"In order to make a Pull Request and add your changes back onto the base branch, you will need to copy your local branch up onto the GitHub server. To do this, you just need to go to the GH Desktop app, and click either the Publish Branch tab at the top or the Publish Branch button in the Publish your branch area. The branch should get pushed up to the repository and you should then see an area to Create Pull Request\u0003\u0003   Now the only thing left to do is create a pull request so that others can review your changes before they are added to the repository. "},{"title":"Create a Pull Request​","type":1,"pageTitle":"How to use GitHub Desktop and Sublime text to make pull requests","url":"docs/Operations/Making Changes#create-a-pull-request","content":"Click the Create Pull Request button. This should open a browser window that takes you to a Pull Request template in the repository.  Follow the template to add changes and explain to reviewers what is being added or subtracted from the code base. You should also connect the ticket to this PR request so that the two move through the ZenHub pipelines together. To do this, you will need the ZenHub Browser Extension for Chrome and Firefox installed. Once this is installed, there should be a button under the text input for you to search the issues in our repo.  Click Connect Issue and search for the ticket by title or number Once you have connected the issue, you should see something like this:  Next, you will need to add any specific reviewers you need. If you don’t know, you can leave it empty. Click the reviewers section on the right-hand side and search for folks you need to review.  Click on the user’s name to add them as a reviewer. You should see a check next to their name if you’re successful  Click outside the box when you are done adding people. You should now see a list of reviewers with orange dots next to their names to indicate that they have not yet started a review  Click the green Create pull request button to finish your work and send the PR for review. "},{"title":"Mobile Plays and Postmortems","type":0,"sectionRef":"#","url":"docs/Operations/Mobile Plays and Postmortems","content":"Mobile Plays and Postmortems","keywords":""},{"title":"On-Call Procedures","type":0,"sectionRef":"#","url":"docs/Operations/On-Call Procedures","content":"On-Call Procedures","keywords":""},{"title":"Intro","type":0,"sectionRef":"#","url":"docs/Product/Intro","content":"Intro","keywords":""},{"title":"Test Accounts","type":0,"sectionRef":"#","url":"docs/QA/TestUsers","content":"Test Accounts Here are the users we use the most. Email / Username\tSign In\tFeatures\tNotesvets.gov.user+41@gmail.com\tID.me\tSM, Payments, Claims, Disability Ratings, Letters, Military Info, Appointments, and Direct Deposit\tHas only past appointments. Claims are stage 2 and 3 with no file request. Has all letters. Has both paper check and direct deposit payments. vets.gov.user+153@gmail.com\tID.me\tPayments, Vaccines, Claims, Disability Ratings, Letters, Military Info, and Direct Deposit\tHas only closed claims. Has most letters but not all. Has only paper check payments judy.morrison@id.me\tID.me\tClaims, Letters, Appointments, and Direct Deposit\tOnly one claim on stage 2. Has only 3 letters. Has all appointments types. vets.gov.user+228@gmail.com\tID.me\tPayments, Claims, Disability Ratings, Letters, Military Info, and Direct Deposit\tOnly one claim on stage 1. Has all letters. Has no direct deposit account entered. Has both paper check and direct deposit payments. vets.gov.user+54@gmail.com\tID.me\tPayments, Claims, Appeals, Letters, Disablity Ratings, and Direct Deposit\tHas an Appeal. Has Claims stage 2 and 3 with no file request. Has some letters. Has only paper checks payments. Has no direct deposit account entered. vets.gov.user+261@gmail.com\tID.me\tSM, Claims, Letters, and Direct Deposit\tHas Claims stage 2 and 3 with no file request. Has 3 letters. Has no direct deposit account entered. Only has 2 messages on the draft folder for SM arfan.a.russel1\tDS Logon\tClaims\tMainly use for claims it has claims with file request. You can find the passwords for the users above and other users at this link mvi-staging-users.csv You can find other accounts according to features on this url vagov-users","keywords":""},{"title":"Accessibility","type":0,"sectionRef":"#","url":"docs/UX/accessibility","content":"","keywords":""},{"title":"Based on VA standards​","type":1,"pageTitle":"Accessibility","url":"docs/UX/accessibility#based-on-va-standards","content":"The VA design system does not have comprehensive accessibility guidelines. However it does provide accessibility samples and guidelines when it comes to design, content, and components. We base our design system on this existing system with modifications for native mobile. "},{"title":"Content takes center stage​","type":1,"pageTitle":"Accessibility","url":"docs/UX/accessibility#content-takes-center-stage","content":"All content throughout the app is clear and direct to ensure that users understand the information presented to them. "},{"title":"Go beyond guideline standards​","type":1,"pageTitle":"Accessibility","url":"docs/UX/accessibility#go-beyond-guideline-standards","content":"The VA Mobile app targets WCAG 2.1 Level AA and Level AAA success criteria, and section 508 guidelines. For more information, see the following resources: WCAG 2.1508 guidelines "},{"title":"Comprehensive disability support​","type":1,"pageTitle":"Accessibility","url":"docs/UX/accessibility#comprehensive-disability-support","content":"We aim to provide a usable experience for all Veterans and include disability support for: Individuals who use assistive technologyIndividuals with physical disabilities Individuals with mental or cognitive disabilities "},{"title":"Assistive technology support​","type":1,"pageTitle":"Accessibility","url":"docs/UX/accessibility#assistive-technology-support","content":"Our app and components are tested for accessibility with automated and manual techniques. Users should expect to be able to access our app using modern assistive technologies. These include native and third-party tools like: Screen readersSpeech recognition programsSupports for low vision and color blindnessBluetooth keyboardsTools for readability "},{"title":"Beyond disabilities​","type":1,"pageTitle":"Accessibility","url":"docs/UX/accessibility#beyond-disabilities","content":"Accessibility also goes beyond disabilities and we seek to provide access to our app for users with limited connectivity and device performance. "},{"title":"Color​","type":1,"pageTitle":"Accessibility","url":"docs/UX/accessibility#color","content":"All of our designs have a 4.5:1 color contrast ratio for text. It should also be 3:1 for graphics and user interface components (such as form input borders). "},{"title":"Touch targets​","type":1,"pageTitle":"Accessibility","url":"docs/UX/accessibility#touch-targets","content":"Touch targets should be a minimum of 44px by 44px. "},{"title":"Resources​","type":1,"pageTitle":"Accessibility","url":"docs/UX/accessibility#resources","content":"VA.gov Mobile Accessibility Testing Plan on GithubDraft Native Mobile Accessibility (A11y) Resources &amp; Articles on Google Docs "},{"title":"Components","type":0,"sectionRef":"#","url":"docs/UX/components","content":"Components Component info can be found within the Front End section of this site. Destructive actions draft on Google Docs Confirmation actions draft on Google Docs Overflow menu draft on Google Docs Success &amp; error actions draft on Google Docs","keywords":""},{"title":"Content","type":0,"sectionRef":"#","url":"docs/UX/Content","content":"","keywords":""},{"title":"Voice and tone​","type":1,"pageTitle":"Content","url":"docs/UX/Content#voice-and-tone","content":"We follow the VA design system content guidelines on voice and tone. The guidelines emphasize talking to users person-to-person, being empathetic, and using a conversational voice when communicating with users. Since many of our features are health related we follow the VA content guidelines around health content by also writing clear, plain language content. "},{"title":"Accessible and inclusive language​","type":1,"pageTitle":"Content","url":"docs/UX/Content#accessible-and-inclusive-language","content":"Our app is for all Veterans. This means that we write for everyone and use language that does not exclude or harm any of our users. We avoid using ableist language such as the words “view” or “see” as they implicate sight. We also write with respect to the community by using people first language. We also avoid using words like impairment. Resources to follow: Gov UK inclusive communicationsGeorgetown University best practices guideMicrosoft guideline "},{"title":"Grammar​","type":1,"pageTitle":"Content","url":"docs/UX/Content#grammar","content":"We follow VA design system content rules regarding grammar with the following adjustments: "},{"title":"Capitalization​","type":1,"pageTitle":"Content","url":"docs/UX/Content#capitalization","content":"Screen names (e.g. Home, Profile, Vaccine Records) are title case. With the new navigation design we will be moving to sentence case for screen titles.All other headings in the app are sentence case. "},{"title":"Times and time zones​","type":1,"pageTitle":"Content","url":"docs/UX/Content#times-and-time-zones","content":"We currently use AM and PM as this is default formatting in React Native. "},{"title":"Naming​","type":1,"pageTitle":"Content","url":"docs/UX/Content#naming","content":"We generally follow VA design rules for naming forms and labels. When naming components in our design library we use the Sketch format: Group-name/Symbol-name. When applicable, we also include subgroup names between the group name and symbol name. "},{"title":"Actionable language [TK]​","type":1,"pageTitle":"Content","url":"docs/UX/Content#actionable-language-tk","content":""},{"title":"Dictionary (aka word list)​","type":1,"pageTitle":"Content","url":"docs/UX/Content#dictionary-aka-word-list","content":"We follow the VA design system word list for all terms in the VA Mobile app. "},{"title":"New content​","type":1,"pageTitle":"Content","url":"docs/UX/Content#new-content","content":"Typically if it’s Veteran facing we need to run it by the Sitewide Content and IA team. To request support fill out an issue ticket on Github. "},{"title":"Design","type":0,"sectionRef":"#","url":"docs/UX/Design","content":"","keywords":""},{"title":"Typography​","type":1,"pageTitle":"Design","url":"docs/UX/Design#typography","content":"We generally follow typography used by VA.gov with some adjustments. With native and OS specific components we utilize OS defined typography.  "},{"title":"Colors (dark / light systems)​","type":1,"pageTitle":"Design","url":"docs/UX/Design#colors-dark--light-systems","content":"For both of our color systems we use much of the colors in the VA style guide, and only deviate if necessary for accessibility purposes. Light theme colors in FigmaDark theme colors in Figma Note: Although VA.gov does not have a dark mode color palette, we have developed one for the app. "},{"title":"Icons​","type":1,"pageTitle":"Design","url":"docs/UX/Design#icons","content":"We use icons sparingly throughout the app as a way to enhance user understanding and wayfinding. "},{"title":"Interactions​","type":1,"pageTitle":"Design","url":"docs/UX/Design#interactions","content":"[TK] "},{"title":"Spacing​","type":1,"pageTitle":"Design","url":"docs/UX/Design#spacing","content":"[TK] "},{"title":"Resources​","type":1,"pageTitle":"Design","url":"docs/UX/Design#resources","content":"VA Mobile App Design Library on SketchNeeds to be updated: MVP Mobile App UI Styles on Google Docs "},{"title":"Foundations","type":0,"sectionRef":"#","url":"docs/UX/Foundations","content":"","keywords":""},{"title":"Our approach​","type":1,"pageTitle":"Foundations","url":"docs/UX/Foundations#our-approach","content":"As outlined in our project mission, the VA: Health and Benefits app should be a trusted source for Veterans to quickly and easily check the status of their VA services and complete simple, transactional tasks across their health and benefits. In order to accomplish this we approach our design work by the following values: Accessibility first The VA Mobile App is an application that supports all users and their needs. This means we design all aspects of the application to be inclusive and accessible. Human centered In all aspects of the design process, we must understand and connect with Veterans on a human level.  We utilize these values in our design process that involves: Discovery &amp; research In order to understand a new feature or problem we interview users, go through research done by other VA teams, and/or look at other companies or applications for inspiration. Iteration cycles In most cases, we go through several iterations of a design before it is handed off to engineering. Most designs begin with sketches or low-fidelity mockups in Balsamiq. Accessibility &amp; technical feasibility reviews These reviews are conducted when appropriate and are used to clarify designs from an accessibility and engineering perspective. Incorporation of standard mobile conventions In an effort to utilize components and functionality that user’s are most familiar with. "},{"title":"Principles​","type":1,"pageTitle":"Foundations","url":"docs/UX/Foundations#principles","content":"Principles help in establishing a foundation for a system or application. They allow teams to have a unifying vision and objective standard of measurement. VA Design Principles "},{"title":"Information Architecture​","type":1,"pageTitle":"Foundations","url":"docs/UX/Foundations#information-architecture","content":"Information architecture (IA) focuses on organizing, structuring, and labeling content in an effective and sustainable way. The sitemap/flow diagram outlines the information architecture that the current (post-MVP) VA Mobile App's navigation follows. The goal of this diagram is to outline all the current screens and actions in the app. "},{"title":"IA Principles [TK]​","type":1,"pageTitle":"Foundations","url":"docs/UX/Foundations#ia-principles-tk","content":"Our IA principles are used to help Veterans find information and complete tasks within the app. "},{"title":"How we work","type":0,"sectionRef":"#","url":"docs/UX/how-we-work","content":"How we work Needs updating: Draft of Design Ops: UI Design &amp; File Management Process on Google docs","keywords":""},{"title":"Research","type":0,"sectionRef":"#","url":"docs/UX/research","content":"Research UX research on Github","keywords":""},{"title":"Resources","type":0,"sectionRef":"#","url":"docs/UX/Resources","content":"","keywords":""},{"title":"Sketch files​","type":1,"pageTitle":"Resources","url":"docs/UX/Resources#sketch-files","content":"Mobile App Design Library The design library is for finalized components, text styles, and color styles. Mobile App Screens This where we work day to day. This file is for finalized app screen designs as well as sandbox designs. Mobile App Graveyard The graveyard is for work we aren’t going forward with or past iterations VA Mobile App store images This file is where we create the app store images "},{"title":"Balsamiq files​","type":1,"pageTitle":"Resources","url":"docs/UX/Resources#balsamiq-files","content":"UX brainstorm &amp; work This is where we brainstorm low-fi designs UX ready to handoff This is where we prepare designs to hand-off or review with engineers "},{"title":"Research​","type":1,"pageTitle":"Resources","url":"docs/UX/Resources#research","content":"UX research on Github  "},{"title":"VA Design​","type":1,"pageTitle":"Resources","url":"docs/UX/Resources#va-design","content":"VA design system  "},{"title":"IA​","type":1,"pageTitle":"Resources","url":"docs/UX/Resources#ia","content":"IA on Github  "},{"title":"Archived files​","type":1,"pageTitle":"Resources","url":"docs/UX/Resources#archived-files","content":"MVP prototype (deprecated) This prototype is a good representation of most MVP features (minus Secure Messaging), but is not up to date or being maintained as of Winter 2021.* Sketch library - in Invision (deprecated) This shows all the MVP components laid out as a library visible and inspectable in Invision. Deprecated July 2021. Library style sheets (deprecated)Shows the components from the design library. Deprecated July 2021. "}]